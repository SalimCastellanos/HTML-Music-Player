From e2ce45cf1de5069b80aca8c22c82f630f5d4eda1 Mon Sep 17 00:00:00 2001
From: Petka Antonov <petka_antonov@hotmail.com>
Date: Sun, 18 Jun 2017 18:43:58 +0300
Subject: [PATCH] Only export functions with default visibility

---
 src/s2wasm.h        |  9 ++++++++-
 src/wasm-linker.cpp | 13 +++++++++++--
 src/wasm-linker.h   |  5 +++++
 3 files changed, 24 insertions(+), 3 deletions(-)

diff --git a/src/s2wasm.h b/src/s2wasm.h
index efa4ad6..4045a54 100644
--- a/src/s2wasm.h
+++ b/src/s2wasm.h
@@ -505,7 +505,10 @@ class S2WasmBuilder {
       s++;
       if (match("text")) parseText();
       else if (match("type")) parseType();
-      else if (match("weak") || match("hidden") || match("protected") || match("internal")) getStr(); // contents are in the content that follows
+      else if (match("weak")) getStr(); // contents are in the content that follows
+      else if (match("hidden")) parseVisibility(LinkerObject::Visibility::kHidden);
+      else if (match("internal")) parseVisibility(LinkerObject::Visibility::kInternal);
+      else if (match("protected")) parseVisibility(LinkerObject::Visibility::kProtected);
       else if (match("imports")) skipImports();
       else if (match("data")) {}
       else if (match("ident")) skipToEOL();
@@ -619,6 +622,10 @@ class S2WasmBuilder {
     WASM_UNUSED(filename); // TODO: use the filename
   }
 
+  void parseVisibility(LinkerObject::Visibility vis) {
+    linkerObj->setVisibility(getStr(), vis);
+    skipWhitespace();
+  }
   void parseGlobl() {
     linkerObj->addGlobal(getStr());
     skipWhitespace();
diff --git a/src/wasm-linker.cpp b/src/wasm-linker.cpp
index 7d1c35d..020471c 100644
--- a/src/wasm-linker.cpp
+++ b/src/wasm-linker.cpp
@@ -147,8 +147,17 @@ void Linker::layout() {
     ensureObjectImport(obj);
   }
 
-  // XXX For now, export all functions marked .globl.
-  for (Name name : out.globls) exportFunction(name, false);
+  // Export all globl functions with default visibility. Since .s files usually
+  // only output visibility information if it is not default, symbols are
+  // considered to have default visibility if they are not in the visibility table.
+  // Also export main for now because emscripten and the binaryen-shell tests use it.
+  for (Name name : out.globls) {
+    if (out.visibilities.count(name) == 0 ||
+        out.visibilities.at(name) == LinkerObject::Visibility::kDefault ||
+        name == "main") {
+      exportFunction(name, false);
+    }
+  }
   for (Name name : out.initializerFunctions) exportFunction(name, true);
 
   // Pad the indirect function table with a dummy function
diff --git a/src/wasm-linker.h b/src/wasm-linker.h
index 2129f4f..b505251 100644
--- a/src/wasm-linker.h
+++ b/src/wasm-linker.h
@@ -78,6 +78,7 @@ class LinkerObject {
                             other.aliasedSymbols.end());
     }
   };
+  enum class Visibility { kDefault, kInternal, kHidden, kProtected };
 
   LinkerObject() {}
 
@@ -86,6 +87,9 @@ class LinkerObject {
     staticObjects.emplace_back(allocSize, alignment, name);
   }
 
+  void setVisibility(Name name, Visibility vis) {
+    visibilities[name] = vis;
+  }
   void addGlobal(Name name) {
     globls.push_back(name);
   }
@@ -169,6 +173,7 @@ class LinkerObject {
         allocSize(allocSize), alignment(alignment), name(name) {}
   };
 
+  std::unordered_map<cashew::IString, LinkerObject::Visibility> visibilities;
   std::vector<Name> globls;
 
   std::vector<StaticObject> staticObjects;
-- 
2.7.4

