import {toTimeString, ownPropOr} from "util";
const NULL_STRING = `\x00`;

class TagData {
    constructor(track, trackInfo, context) {
        this.track = track;

        this.title = null;
        this.artist = null;
        this.album = null;
        this.albumArtist = null;
        this.autogenerated = false;
        this.duration = 0;
        this.sampleRate = 44100;
        this.channels = 2;
        this.year = null;
        this.genres = null;
        this.albumIndex = 0;
        this.trackCount = 1;
        this.rating = -1;
        this.skipCounter = 0;
        this.playthroughCounter = 0;
        this.lastPlayed = new Date(0);
        this._hasBeenAnalyzed = false;
        this._albumForSort = null;

        this.discNumber = 0;
        this.discCount = 1;

        this._formattedTime = null;
        this._hasBeenAnalyzed = false;
        this._context = context;
        this._album;

        this.updateFields(trackInfo);
    }

    updateFields(trackInfo) {
        this.title = trackInfo.title;
        this.artist = trackInfo.artist;
        this.album = trackInfo.album;
        this.albumArtist = trackInfo.albumArtist;
        this.autogenerated = trackInfo.autogenerated;
        this.duration = trackInfo.duration;
        this.sampleRate = trackInfo.sampleRate;
        this.channels = trackInfo.channels;
        this.year = trackInfo.year;
        this.genres = trackInfo.genres;
        this.albumIndex = trackInfo.albumIndex;
        this.trackCount = trackInfo.trackCount;
        this.rating = trackInfo.rating;
        this.skipCounter = trackInfo.skipCounter;
        this.playthroughCounter = trackInfo.playthroughCounter;
        this.lastPlayed = trackInfo.lastPlayed;
        this._hasBeenAnalyzed = trackInfo.hasBeenAnalyzed;
        this._albumForSort = `${this.album} ${this.albumArtist}`.toLowerCase();

        this.discNumber = ownPropOr(trackInfo, `discNumber`, this.discNumber);
        this.discCount = ownPropOr(trackInfo, `discCount`, this.discCount);

        this._formattedTime = null;
    }

    formatTime() {
        if (this._formattedTime !== null) return this._formattedTime;
        if (!this.duration) {
            this._formattedTime = ``;
            return ``;
        }
        const duration = Math.max(0, this.duration);
        return (this._formattedTime = toTimeString(duration));
    }

    getAlbum() {
        return this.album;
    }

    getTitle() {
        return this.title;
    }

    getArtist() {
        return this.artist;
    }

    isRated() {
        return this.rating !== -1;
    }

    getRating() {
        return this.rating;
    }

    setRating(val) {
        this.rating = Math.min(5, Math.max(1, +val));
        this._context.usageData.rateTrack(this.track, this.rating);
    }

    unsetRating() {
        this.rating = -1;
        this._context.usageData.rateTrack(this.track, this.rating);
    }

    destroy() {
        this._context.search.removeFromSearchIndex(this.track);
    }

    getTitleForSort() {
        return this.title;
    }

    getAlbumArtistForSort() {
        if (this.albumArtist === null) return NULL_STRING;
        return this.albumArtist;
    }

    getAlbumForSort() {
        return this._albumForSort;
    }

    getArtistForSort() {
        return this.artist;
    }

    getDiscNumberForSort() {
        return this.discNumber;
    }

    getAlbumIndexForSort() {
        return this.albumIndex;
    }

    hasBeenAnalyzed() {
        return this._hasBeenAnalyzed;
    }

    setHasBeenAnalyzed() {
        this._hasBeenAnalyzed = true;
    }

    recordSkip() {
        this.skipCounter++;
        this.lastPlayed = new Date();
        this._context.usageData.setSkipCounter(this.track, this.skipCounter);
    }

    triggerPlaythrough() {
        this.playthroughCounter++;
        this.lastPlayed = new Date();
        this._context.usageData.setPlaythroughCounter(this.track, this.playthroughCounter);
    }
}

export default class TagDataContext {
    constructor() {
        this.usageData = null;
        this.search = null;
    }

    setDeps(deps) {
        this.usageData = deps.usageData;
        this.search = deps.search;

    }
    create(track, trackInfo) {
        return new TagData(track, trackInfo, this);
    }
}
