{
  // http://eslint.org/docs/rules/

  "parserOptions": {
    "ecmaVersion": 8,
    "sourceType": "module"
  },

  "env": {
    "browser": false,     // browser global variables.
    "node": false,        // Node.js global variables and Node.js-specific rules.
    "amd": false,         // defines require() and define() as global variables as per the amd spec.
    "mocha": false,       // adds all of the Mocha testing global variables.
    "jasmine": false,     // adds all of the Jasmine testing global variables for version 1.3 and 2.false.
    "phantomjs": false,   // phantomjs global variables.
    "jquery": false,      // jquery global variables.
    "prototypejs": false, // prototypejs global variables.
    "shelljs": false     // shelljs global variables.
  },

  "globals": {
    "self": false,
    "Promise": false,
    "Map": false,
    "Set": false
    // e.g. "angular": 2
  },

  "plugins": [
    // e.g. "react" (must run `npm install eslint-plugin-react` first)
  ],

  "rules": {
    ////////// Possible Errors //////////

    "no-cond-assign": 0,          // disallow assignment in conditional expressions
    "no-console": 1,              // disallow use of console (off by default in the node environment)
    "no-constant-condition": [1, {"checkLoops": false}],   // disallow use of constant expressions in conditions
    "no-control-regex": 0,        // disallow control characters in regular expressions
    "no-debugger": 0,             // disallow use of debugger
    "no-dupe-keys": 2,            // disallow duplicate keys when creating object literals
    "no-empty": 2,                // disallow empty statements
    "no-ex-assign": 2,            // disallow assigning to the exception in a catch block
    "no-extra-boolean-cast": 2,   // disallow double-negation boolean casts in a boolean context
    "no-extra-parens": 0,         // disallow unnecessary parentheses (off by default)
    "no-extra-semi": 2,           // disallow unnecessary semicolons
    "no-func-assign": 2,          // disallow overwriting functions written as function declarations
    "no-inner-declarations": 2,   // disallow function or variable declarations in nested blocks
    "no-invalid-regexp": 2,       // disallow invalid regular expression strings in the RegExp constructor
    "no-irregular-whitespace": 2, // disallow irregular whitespace outside of strings and comments
    "no-negated-in-lhs": 2,       // disallow negation of the left operand of an in expression
    "no-obj-calls": 2,            // disallow the use of object properties of the global object (Math and JSON) as functions
    "no-regex-spaces": 2,         // disallow multiple spaces in a regular expression literal
    "no-reserved-keys": 0,        // disallow reserved words being used as object literal keys (off by default)
    "no-sparse-arrays": 2,        // disallow sparse arrays
    "no-unreachable": 2,          // disallow unreachable statements after a return, throw, continue, or break statement
    "use-isnan": 2,               // disallow comparisons with the value NaN
    "valid-jsdoc": 0,             // Ensure JSDoc comments are valid (off by default)
    "valid-typeof": 2,            // Ensure that the results of typeof are compared against a valid string


    ////////// Best Practices //////////

    "block-scoped-var": 0,      // treat var statements as if they were block scoped (off by default)
    "complexity": 0,            // specify the maximum cyclomatic complexity allowed in a program (off by default)
    "consistent-return": 2,     // require return statements to either always or never specify values
    "curly": 0,                 // specify curly brace conventions for all control statements
    "default-case": 0,          // require default case in switch statements (off by default)
    "dot-notation": 2,          // encourages use of dot notation whenever possible
    "eqeqeq": 2,                // require the use of === and !==
    "guard-for-in": 0,          // make sure for-in loops have an if statement (off by default)
    "no-alert": 1,              // disallow the use of alert, confirm, and prompt
    "no-caller": 2,             // disallow use of arguments.caller or arguments.callee
    "no-div-regex": 2,          // disallow division operators explicitly at beginning of regular expression (off by default)
    "no-else-return": 0,        // disallow else after a return in an if (off by default)
    "no-eq-null": 0,            // disallow comparisons to null without a type-checking operator (off by default)
    "no-eval": 0,               // disallow use of eval()
    "no-extend-native": 0,      // disallow adding to native types
    "no-extra-bind": 2,         // disallow unnecessary function binding
    "no-fallthrough": 0,        // disallow fallthrough of case statements
    "no-floating-decimal": 2,   // disallow the use of leading or trailing decimal points in numeric literals (off by default)
    "no-implied-eval": 0,       // disallow use of eval()-like methods
    "no-iterator": 2,           // disallow usage of __iterator__ property
    "no-labels": 2,             // disallow use of labeled statements
    "no-lone-blocks": 2,        // disallow unnecessary nested blocks
    "no-loop-func": 2,          // disallow creation of functions within loops
    "no-multi-spaces": 2,       // disallow use of multiple spaces
    "no-multi-str": 0,          // disallow use of multiline strings
    "no-native-reassign": 2,    // disallow reassignments of native objects
    "no-new": 2,                // disallow use of new operator when not part of the assignment or comparison
    "no-new-func": 0,           // disallow use of new operator for Function object
    "no-new-wrappers": 2,       // disallows creating new instances of String, Number, and Boolean
    "no-octal": 0,              // disallow use of octal literals
    "no-octal-escape": 0,       // disallow use of octal escape sequences in string literals, such as var foo = "Copyright \251";
    "no-process-env": 0,        // disallow use of process.env (off by default)
    "no-proto": 2,              // disallow usage of __proto__ property
    "no-redeclare": 2,          // disallow declaring the same variable more then once
    "no-return-assign": 2,      // disallow use of assignment in return statement
    "no-script-url": 2,         // disallow use of javascript: urls.
    "no-self-compare": 2,       // disallow comparisons where both sides are exactly the same (off by default)
    "no-sequences": 2,          // disallow use of comma operator
    "no-unused-expressions": 0, // disallow usage of expressions in statement position
    "no-void": 0,               // disallow use of void operator (off by default)
    "no-warning-comments": 0,   // disallow usage of configurable warning terms in comments, e.g. TODO or FIXME (off by default)
    "no-with": 2,               // disallow use of the with statement
    "radix": 2,                 // require use of the second argument for parseInt() (off by default)
    "vars-on-top": 0,           // requires to declare all vars on top of their containing scope (off by default)
    "wrap-iife": 2,             // require immediate function invocation to be wrapped in parentheses (off by default)
    "yoda": 0,                  // require or disallow Yoda conditions


    ////////// Strict Mode //////////

    "global-strict": 0,   // (deprecated) require or disallow the "use strict" pragma in the global scope (off by default in the node environment)
    "strict": [2, "safe"],          // controls location of Use Strict Directives


    ////////// Variables //////////

    "no-catch-shadow": 2,             // disallow the catch clause parameter name being the same as a variable in the outer scope (off by default in the node environment)
    "no-delete-var": 2,               // disallow deletion of variables
    "no-label-var": 2,                // disallow labels that share a name with a variable
    "no-shadow": 2,                   // disallow declaration of variables already declared in the outer scope
    "no-shadow-restricted-names": 2,  // disallow shadowing of names such as arguments
    "no-undef": 2,                    // disallow use of undeclared variables unless mentioned in a /*global */ block
    "no-undef-init": 2,               // disallow use of undefined when initializing variables
    "no-undefined": 0,                // disallow use of undefined variable (off by default)
    "no-unused-vars": 2,              // disallow declaration of variables that are not used in the code
    "no-use-before-define": 0,        // disallow use of variables before they are defined


    ////////// Node.js //////////

    "handle-callback-err": 0,   // enforces error handling in callbacks (off by default) (on by default in the node environment)
    "no-mixed-requires": 0,     // disallow mixing regular variable and require declarations (off by default) (on by default in the node environment)
    "no-new-require": 0,        // disallow use of new operator with the require function (off by default) (on by default in the node environment)
    "no-path-concat": 0,        // disallow string concatenation with __dirname and __filename (off by default) (on by default in the node environment)
    "no-process-exit": 0,       // disallow process.exit() (on by default in the node environment)
    "no-restricted-modules": 0, // restrict usage of specified node modules (off by default)
    "no-sync": 0,               // disallow use of synchronous methods (off by default)


    ////////// Stylistic Issues //////////

    "brace-style": 2,               // enforce one 1 brace style (off by default)
    "camelcase": 0,                 // require camel case names
    "comma-spacing": 2,             // enforce spacing before and after comma
    "comma-style": 2,               // enforce one 1 comma style (off by default)
    "consistent-this": 2,           // enforces consistent naming when capturing the current execution context (off by default)
    "eol-last": 2,                  // enforce newline at the end of file, with no multiple empty lines
    "func-names": 0,                // require function expressions to have a name (off by default)
    "func-style": 0,                // enforces use of function declarations or expressions (off by default)
    "key-spacing": 2,               // enforces spacing between keys and values in object literal properties
    "max-nested-callbacks": 0,      // specify the maximum depth callbacks can be nested (off by default)
    "new-cap": [2, {
        "newIsCap": true,
        "capIsNew": false,
        "properties": true
    }],                   // require a capital letter for constructors
    "new-parens": 2,                // disallow the omission of parentheses when invoking a constructor with no arguments
    "no-array-constructor": 0,      // disallow use of the Array constructor
    "no-inline-comments": 0,        // disallow comments inline after code (off by default)
    "no-lonely-if": 0,              // disallow if as the only statement in an else block (off by default)
    "no-mixed-spaces-and-tabs": 2,  // disallow mixed spaces and tabs for indentation
    "no-multiple-empty-lines": 0,   // disallow multiple empty lines (off by default)
    "no-nested-ternary": 0,         // disallow nested ternary expressions (off by default)
    "no-new-object": 2,             // disallow use of the Object constructor
    "no-spaced-func": 2,            // disallow space between function identifier and application
    "no-ternary": 0,                // disallow the use of ternary operators (off by default)
    "no-trailing-spaces": 2,        // disallow trailing whitespace at the end of lines
    "no-underscore-dangle": 0,      // disallow dangling underscores in identifiers
    "no-wrap-func": 0,              // disallow wrapping of non-IIFE statements in parens
    "one-var": 0,                   // allow just one var statement per function (off by default)
    "operator-assignment": 2,       // require assignment operator shorthand where possible or prohibit it entirely (off by default)
    "padded-blocks": 0,             // enforce padding within blocks (off by default)
    "quote-props": 0,               // require quotes around object literal property names (off by default)
    "quotes": [2, "backtick"],                    // specify whether double or single quotes should be used
    "semi": [2, "always"],                      // require or disallow use of semicolons instead of ASI
    "sort-vars": 0,                 // sort variables within the same declaration block (off by default)
    "space-before-blocks": 2,       // require or disallow space before blocks (off by default)
    "space-in-brackets": 0,         // require or disallow spaces inside brackets (off by default)
    "space-in-parens": 0,           // require or disallow spaces inside parentheses (off by default)
    "space-infix-ops": 2,           // require spaces around operators
    //"space-unary-ops": 0,           // Require or disallow spaces before/after unary operators (words on by default, nonwords off by default)
    "wrap-regex": 0,                // require regex literals to be wrapped in parentheses (off by default)


    ////////// ECMAScript 6 //////////
    "class-methods-use-this": 2,
    "no-var": 2,          // require let or const instead of var (off by default)

    // Missing config

    "prefer-template": 2, //     require template literals instead of string concatenation
    "prefer-const": [2, {
        "destructuring": "any"
    }],
    "no-empty-character-class": 2,
    "space-before-function-paren": [2, {
        "anonymous": "never",
        "named": "never",
        "asyncArrow": "always"
    }], // enforce consistent spacing before function definition opening parenthesis
    "keyword-spacing": [2, {
        "overrides": {
            "function": {
                "after": false
            }
        }
    }], // enforce consistent spacing before and after keywords
    "comma-dangle": [2, "never"], // require or disallow trailing commas,
    "no-labels": [2, {
        "allowLoop": true,
        "allowSwitch": false
    }],
    "semi-spacing": [2, {
        "before": false,
        "after": true
    }],
    "spaced-comment": [2, "always"],
    "generator-star-spacing": [2, {
        "before": false,
        "after": true
    }],
    "prefer-destructuring": [2, {
        "object": true,
        "array": false
    }, {"enforceForRenamedProperties": false}],
    "prefer-rest-params": 2,
    "prefer-spread": 2,
    "prefer-numeric-literals": 2,
    "no-const-assign": 2,
    "no-mixed-operators": 0, // disallow mixed binary operators
    "no-param-reassign": 0, //  disallow reassigning function parameters
    "no-restricted-syntax": 0, // disallow specified syntax
    "no-prototype-builtins": 0, // disallow calling some Object.prototype methods directly on objects
    "no-useless-escape": 2, // disallow unnecessary escape characters
    "no-useless-concat": 2,
    "arrow-body-style": [2, "as-needed", {"requireReturnForObjectLiteral": false}],
    "arrow-parens": [2, "as-needed", {"requireForBlockBody": true}],
    "arrow-spacing": [2, {"after": true, "before": true}],
    "constructor-super": 2,
    "no-class-assign": 2,
    "no-confusing-arrow": [2, {"allowParens": true}],
    "no-dupe-class-members": 2,
    "no-duplicate-imports": 2,
    "no-new-symbol": 2,
    "no-this-before-super": 2,
    "no-useless-computed-key": 2,
    "no-useless-constructor": 2,
    "no-useless-rename": [2, {
        "ignoreDestructuring": false,
        "ignoreImport": false,
        "ignoreExport": false
    }],
    "object-shorthand": [2, "always", {"avoidQuotes": true, "ignoreConstructors": false, "avoidExplicitReturnArrows": true}],
    "prefer-arrow-callback": [2, {"allowNamedFunctions": true, "allowUnboundThis": true}],
    "require-yield": 2,
    "rest-spread-spacing": [2, "never"],
    "symbol-description": 0,
    "template-curly-spacing": [2, "never"],
    "yield-star-spacing": [2, "after"],
    "array-callback-return": 2, // enforce return statements in callbacks of array methods
    "spaced-comment": 2, //  enforce consistent spacing after the // or /* in a comment
    "object-curly-spacing": 2, // enforce consistent spacing inside braces
    "indent": 0, // enforce consistent indentation
    "one-var-declaration-per-line": 0,

    ////////// Legacy //////////

    "max-depth": 0,       // specify the maximum depth that blocks can be nested (off by default)
    "max-len": 0,         // specify the maximum length of a line in your program (off by default)
    "max-params": 0,      // limits the number of parameters that can be used in the function declaration. (off by default)
    "max-statements": 0,  // specify the maximum number of statement allowed in a function (off by default)
    "no-bitwise": 0,      // disallow use of bitwise operators (off by default)
    "no-plusplus": 0,      // disallow use of unary operators, ++ and -- (off by default)


    "no-await-in-loop": 0,
    "no-compare-neg-zero": 2,
    "no-dupe-args": 2,
    "no-duplicate-case": 2,
    "no-template-curly-in-string": 2,
    "no-unexpected-multiline": 2,
    "no-unsafe-finally": 2,
    "no-unsafe-negation": 2,
    "accessor-pairs": 2,
    "dot-location": 2,
    "no-case-declarations": 2,
    "no-empty-function": 2,
    "no-empty-pattern": 2,
    "no-extra-label": 2,
    "no-global-assign": 2,
    "no-implicit-coercion": 0,
    "no-implicit-globals": 2,
    "no-invalid-this": 2,
    "no-magic-numbers": 0,
    "no-restricted-properties": 0,
    "no-return-await": 2,
    "no-self-assign": 2,
    "no-throw-literal": 2,
    "no-unmodified-loop-condition": 2,
    "no-unused-labels": 2,
    "no-useless-call": 2,
    "no-useless-return": 2,
    "prefer-promise-reject-errors": 2,
    "require-await": 2,
    "array-bracket-spacing": [2, "never"],
    "block-spacing": [2, "always"],
    "capitalized-comments": [2, "always"],
    "computed-property-spacing": [2, "never"],
    "func-call-spacing": [2, "never"],
    "line-comment-position": [2, {"position": "above"}],
    "linebreak-style": [2, "unix"],
    "lines-around-comment": [2, {
        "beforeBlockComment": false,
        "beforeLineComment": false,
        "afterBlockComment": false,
        "afterLineComment": false,
        "allowBlockStart": true,
        "allowBlockEnd": true
    }],

    "no-negated-condition": 0,
    "no-tabs": 2,
    "no-unneeded-ternary": 2,
    "no-whitespace-before-property": 2,
    "nonblock-statement-body-position": [2, "beside"]
  }
}
