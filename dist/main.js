
;
;
var sha1 = (function() {

/*
CryptoJS v3.1.2
code.google.com/p/crypto-js
(c) 2009-2013 by Jeff Mott. All rights reserved.
code.google.com/p/crypto-js/wiki/License
*/
var CryptoJS=CryptoJS||function(e,m){var p={},j=p.lib={},l=function(){},f=j.Base={extend:function(a){l.prototype=this;var c=new l;a&&c.mixIn(a);c.hasOwnProperty("init")||(c.init=function(){c.$super.init.apply(this,arguments)});c.init.prototype=c;c.$super=this;return c},create:function(){var a=this.extend();a.init.apply(a,arguments);return a},init:function(){},mixIn:function(a){for(var c in a)a.hasOwnProperty(c)&&(this[c]=a[c]);a.hasOwnProperty("toString")&&(this.toString=a.toString)},clone:function(){return this.init.prototype.extend(this)}},
n=j.WordArray=f.extend({init:function(a,c){a=this.words=a||[];this.sigBytes=c!=m?c:4*a.length},toString:function(a){return(a||h).stringify(this)},concat:function(a){var c=this.words,q=a.words,d=this.sigBytes;a=a.sigBytes;this.clamp();if(d%4)for(var b=0;b<a;b++)c[d+b>>>2]|=(q[b>>>2]>>>24-8*(b%4)&255)<<24-8*((d+b)%4);else if(65535<q.length)for(b=0;b<a;b+=4)c[d+b>>>2]=q[b>>>2];else c.push.apply(c,q);this.sigBytes+=a;return this},clamp:function(){var a=this.words,c=this.sigBytes;a[c>>>2]&=4294967295<<
32-8*(c%4);a.length=e.ceil(c/4)},clone:function(){var a=f.clone.call(this);a.words=this.words.slice(0);return a},random:function(a){for(var c=[],b=0;b<a;b+=4)c.push(4294967296*e.random()|0);return new n.init(c,a)}}),b=p.enc={},h=b.Hex={stringify:function(a){var c=a.words;a=a.sigBytes;for(var b=[],d=0;d<a;d++){var f=c[d>>>2]>>>24-8*(d%4)&255;b.push((f>>>4).toString(16));b.push((f&15).toString(16))}return b.join("")},parse:function(a){for(var c=a.length,b=[],d=0;d<c;d+=2)b[d>>>3]|=parseInt(a.substr(d,
2),16)<<24-4*(d%8);return new n.init(b,c/2)}},g=b.Latin1={stringify:function(a){var c=a.words;a=a.sigBytes;for(var b=[],d=0;d<a;d++)b.push(String.fromCharCode(c[d>>>2]>>>24-8*(d%4)&255));return b.join("")},parse:function(a){for(var c=a.length,b=[],d=0;d<c;d++)b[d>>>2]|=(a.charCodeAt(d)&255)<<24-8*(d%4);return new n.init(b,c)}},r=b.Utf8={stringify:function(a){try{return decodeURIComponent(escape(g.stringify(a)))}catch(c){throw Error("Malformed UTF-8 data");}},parse:function(a){return g.parse(unescape(encodeURIComponent(a)))}},
k=j.BufferedBlockAlgorithm=f.extend({reset:function(){this._data=new n.init;this._nDataBytes=0},_append:function(a){"string"==typeof a&&(a=r.parse(a));this._data.concat(a);this._nDataBytes+=a.sigBytes},_process:function(a){var c=this._data,b=c.words,d=c.sigBytes,f=this.blockSize,h=d/(4*f),h=a?e.ceil(h):e.max((h|0)-this._minBufferSize,0);a=h*f;d=e.min(4*a,d);if(a){for(var g=0;g<a;g+=f)this._doProcessBlock(b,g);g=b.splice(0,a);c.sigBytes-=d}return new n.init(g,d)},clone:function(){var a=f.clone.call(this);
a._data=this._data.clone();return a},_minBufferSize:0});j.Hasher=k.extend({cfg:f.extend(),init:function(a){this.cfg=this.cfg.extend(a);this.reset()},reset:function(){k.reset.call(this);this._doReset()},update:function(a){this._append(a);this._process();return this},finalize:function(a){a&&this._append(a);return this._doFinalize()},blockSize:16,_createHelper:function(a){return function(c,b){return(new a.init(b)).finalize(c)}},_createHmacHelper:function(a){return function(b,f){return(new s.HMAC.init(a,
f)).finalize(b)}}});var s=p.algo={};return p}(Math);
(function(){var e=CryptoJS,m=e.lib,p=m.WordArray,j=m.Hasher,l=[],m=e.algo.SHA1=j.extend({_doReset:function(){this._hash=new p.init([1732584193,4023233417,2562383102,271733878,3285377520])},_doProcessBlock:function(f,n){for(var b=this._hash.words,h=b[0],g=b[1],e=b[2],k=b[3],j=b[4],a=0;80>a;a++){if(16>a)l[a]=f[n+a]|0;else{var c=l[a-3]^l[a-8]^l[a-14]^l[a-16];l[a]=c<<1|c>>>31}c=(h<<5|h>>>27)+j+l[a];c=20>a?c+((g&e|~g&k)+1518500249):40>a?c+((g^e^k)+1859775393):60>a?c+((g&e|g&k|e&k)-1894007588):c+((g^e^
k)-899497514);j=k;k=e;e=g<<30|g>>>2;g=h;h=c}b[0]=b[0]+h|0;b[1]=b[1]+g|0;b[2]=b[2]+e|0;b[3]=b[3]+k|0;b[4]=b[4]+j|0},_doFinalize:function(){var f=this._data,e=f.words,b=8*this._nDataBytes,h=8*f.sigBytes;e[h>>>5]|=128<<24-h%32;e[(h+64>>>9<<4)+14]=Math.floor(b/4294967296);e[(h+64>>>9<<4)+15]=b;f.sigBytes=4*e.length;this._process();return this._hash},clone:function(){var e=j.clone.call(this);e._hash=this._hash.clone();return e}});e.SHA1=j._createHelper(m);e.HmacSHA1=j._createHmacHelper(m)})();



return function(str) {
    var hash = CryptoJS.SHA1(str);
    return hash.words.map(function(v) {
        return (("00000000") + ((v >>> 0).toString(16))).slice(-8);
    }).join("");

};

})();

;
;
/**
 * @preserve Copyright (c) 2012 Petka Antonov
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:</p>
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
;(function $package(global) {
    "use strict";;
/* exported hasOwn, toString, isArray, uid,
    toList, toListOfTuples,
    copyProperties, setIteratorMethods, MapForEach, SetForEach, exportCtor,
    MapIteratorCheckModCount, MapEntries, MapKeys, MapValues, SetToJSON,
    SetValueOf, SetToString, MapToJSON, MapValueOf, MapToString,
    arrayCopy, arraySearch, SetIteratorCheckModCount
*/
/* jshint -W079 */
var Array = [].constructor,

    Function = function(){}.constructor,

    hasOwn = {}.hasOwnProperty,

    toString = {}.toString,

    ownNames = {}.constructor.getOwnPropertyNames || function( obj ) {
        var r = [];

        for( var key in obj ) {
            if( hasOwn.call( obj, key ) ) {
                r.push( key );
            }
        }
        return r;
    },

    isArray = [].constructor.isArray || function(arr) {
        return toString.call(arr) === "[object Array]";
    };


//Takes a constructor function and returns a function that
//can instantiate the constructor Without using
//the new- keyword.

//Also copies any properties of the constructor
//unless they are underscore prefixed
//(includes .prototype, so it can still be
//monkey-patched from outside)
/**
 * Description.
 *
 *
 */
var exportCtor = (function() {

    var rnocopy = /(?:^_|^(?:length|name|arguments|caller|callee)$)/;
    return function exportCtor( Constructor ) {
        var params = new Array( Constructor.length ),
            instantiateCode = "";

        for( var i = 0, len = params.length; i < len; ++i ) {
            params[i] = "param$" + i;
        }

        if( params.length ) {
            instantiateCode = "switch( arguments.length ) {\n";
            for( var i = params.length - 1; i >= 0; --i ) {
                instantiateCode += "case "+ (i + 1) +
                    ": return new Constructor(" + params.slice(0, i + 1)
                    .join( ", " ) + ");\n";
            }
            instantiateCode += "case 0: return new Constructor();\n}"+
                "\nthrow new Error(\"too many arguments\");\n";
        }
        else {
            instantiateCode = "return new Constructor();";
        }

        var code = "return function ConstructorProxy(" +
            params.join( ", " ) + ") { \"use strict\"; " +
            instantiateCode + "};";

        var ret = new Function( "Constructor", code )( Constructor );

        var names = ownNames( Constructor );

        for( var i = 0, len = names.length; i < len; ++i ) {
            if( !rnocopy.test( names[ i ] ) ) {
                ret[ names[ i ] ] = Constructor[ names[ i ] ];
            }
        }

        return ret;
    };
})();


/**
 * Description.
 *
 *
 */
var uid = (function() {
    var id = 0,
        key = "__uid" +
            (Math.random() + "").replace(/[^0-9]/g, "")
            .substr(5) + "__";

    return function uid( obj ) {
        if( !hasOwn.call( obj, key ) ) {
            var ret = id++;
            obj[key] = ret;
            return ret;
        }
        return obj[key];
    };
})();

/**
 * Description.
 *
 *
 */
function toList( obj ) {
    var items;
    if( isArray( obj ) ) {
        return obj;
    }
    else if( obj && typeof obj === "object" ) {
        if( "iterator" in obj && typeof obj.iterator === "function" ) {
            var it = obj.iterator();

            items = [];

            while( it.next() ) {
                items.push( it.value );
            }
            return items;
        }
        else {
            items = [];

            for( var k in obj ) {
                if( hasOwn.call( obj, k ) ) {
                    items.push( obj[k] );
                }
            }
            return items;
        }
    }
    else {
        return [];
    }
}

/**
 * Description.
 *
 *
 */
function toListOfTuples( obj ) {
    if( isArray( obj ) ) {
        return obj;
    }
    else if( obj && typeof obj === "object" ) {
        if( "iterator" in obj && typeof obj.iterator === "function" ) {
            var it = obj.iterator(),
                items = [];
            while( it.next() ) {
                items.push( [it.key, it.value] );
            }
            return items;
        }
        else {
            var items = [];
            for( var k in obj ) {
                if( hasOwn.call( obj, k ) ) {
                    items.push( [k, obj[k]] );
                }
            }
            return items;
        }

    }
    else {
        return [];
    }
}

/**
 * Description.
 *
 *
 */
function copyProperties( src, dst ) {
    for( var key in src ) {
        if( hasOwn.call( src, key ) ) {
            dst[key] = src[key];
        }
    }
}

/**
 * Description.
 *
 *
 */
function arraySearch( array, startIndex, length, value ) {
    for( var i = startIndex; i < length; ++i ) {
        if( array[i] === value ) {
            return true;
        }
    }
    return false;
}

/**
 * Description.
 *
 *
 */
function arrayCopy( src, srcIndex, dst, dstIndex, len ) {
    for( var j = 0; j < len; ++j ) {
        dst[j + dstIndex ] = src[j + srcIndex];
    }
}

var setIteratorMethods = {
    /**
     * Description.
     *
     *
     */
    next: function next() {
        var ret = this._iterator.next();
        this.value = this._iterator.key;
        this.index = this._iterator.index;
        return ret;
    },

    /**
     * Description.
     *
     *
     */
    prev: function prev() {
        var ret = this._iterator.prev();
        this.value = this._iterator.key;
        this.index = this._iterator.index;
        return ret;
    },

    /**
     * Description.
     *
     *
     */
    moveToStart: function moveToStart() {
        this._iterator.moveToStart();
        this.value = this._iterator.key;
        this.index = this._iterator.index;
        return this;
    },

    /**
     * Description.
     *
     *
     */
    moveToEnd: function moveToEnd() {
        this._iterator.moveToEnd();
        this.value = this._iterator.key;
        this.index = this._iterator.index;
        return this;
    },

    /**
     * Description.
     *
     *
     */
    "delete": function $delete() {
        var ret = this._iterator.remove();
        this.value = this._iterator.key;
        this.index = this._iterator.index;
        return ret;
    },

    /**
     * Description.
     *
     *
     */
    remove: function remove() {
        var ret = this._iterator.remove();
        this.value = this._iterator.key;
        this.index = this._iterator.index;
        return ret;
    }
};

/**
 * Description.
 *
 *
 */
function MapForEach( fn, ctx ) {
    var it = this.iterator();
    if( ctx ) {
        while( it.next() ) {
            if( fn.call( ctx, it.value, it.key, it.index ) === false ) {
                return;
            }
        }
    }
    else {
        while( it.next() ) {
            if( fn( it.value, it.key, it.index ) === false ) {
                return;
            }
        }
    }
}

/**
 * Description.
 *
 *
 */
function SetForEach( fn, ctx ) {
    var it = this.iterator();
    if( ctx ) {
        while( it.next() ) {
            if( fn.call( ctx, it.value, it.index ) === false ) {
                return;
            }
        }
    }
    else {
        while( it.next() ) {
            if( fn( it.value, it.index ) === false ) {
                return;
            }
        }
    }
}

/**
 * Description.
 *
 *
 */
function MapToString() {
    var ret = [],
        it = this.iterator();

    while( it.next() ) {
        ret.push( [
            it.key === this ? null : it.key,
            it.value === this ? null : it.value
        ]);
    }

    return JSON.stringify( ret );
}

/**
 * Description.
 *
 *
 */
function MapValueOf() {
    return 1;
}

/**
 * Description.
 *
 *
 */
function MapToJSON() {
    return this.entries();
}

/**
 * Description.
 *
 *
 */
function SetToString() {
    var ret = [],
        it = this.iterator();

    while( it.next() ) {
        ret.push( it.value === this ? null : it.value );
    }

    return JSON.stringify( ret );
}

/**
 * Description.
 *
 *
 */
function SetValueOf() {
    return 1;
}

/**
 * Description.
 *
 *
 */
function SetToJSON() {
    return this.values();
}

/**
 * Description.
 *
 *
 */
function MapKeys() {
    var keys = [],
        it = this.iterator();

    while( it.next() ) {
        keys.push( it.key );
    }
    return keys;
}

/**
 * Description.
 *
 *
 */
function MapValues() {
    var values = [],
        it = this.iterator();

    while( it.next() ) {
        values.push( it.value );
    }
    return values;
}

/**
 * Description.
 *
 *
 */
function MapEntries() {
    var entries = [],
    it = this.iterator();

    while( it.next() ) {
        entries.push( [it.key, it.value] );
    }
    return entries;
}

/**
 * Description.
 *
 *
 */
function MapIteratorCheckModCount() {
    if( this._modCount !== this._map._modCount ) {
        throw new Error( "map cannot be mutated while iterating" );
    }
}

/**
 * Description.
 *
 *
 */
function SetIteratorCheckModCount() {
    if( this._modCount !== this._set._modCount ) {
        throw new Error( "set cannot be mutated while iterating" );
    }
}
;
/* jshint -W079 */
/* exported Object */
var Object = (function( Object ) {

    return {
        /* For inheritance without invoking the parent constructor */
        create: Object.create || function( proto ) {
            if( proto === null ) {
                return {};
            }
            function Type(){}
            Type.prototype = proto;
            return new Type();
        },

        defineProperties: Object.defineProperties,
        defineProperty: Object.defineProperty,
        freeze: Object.freeze,
        getOwnPropertyDescriptor: Object.getOwnPropertyDescriptor,
        getOwnPropertyNames: Object.getOwnPropertyNames,
        getPrototypeOf: Object.getPrototypeOf,
        is: Object.is,
        isExtensible: Object.isExtensible,
        isFrozen: Object.isFrozen,
        isSealed: Object.isSealed,
        keys: Object.keys,
        preventExtensions: Object.preventExtensions,
        seal: Object.seal,
        prototype: Object.prototype
    };


})( ({}.constructor) );
;
/* exported RED, BLACK, arePrimitive, defaultComparer, composeComparators,
    comparePosition, invertedComparator, True, Null */
/* global uid, arrayCopy */
var BLACK = true,
    RED = false,
    OBJ = {}.constructor;


function arePrimitive( a, b ) {
    return OBJ(a) !== a &&
           OBJ(b) !== b;
}


function defaultComparer( a,b ) {
    //primitive or obj with .valueOf() returning primitive
    if( a < b ) {
        return -1;
    }
    if( a > b ) {
        return 1;
    }

    //equal primitives or uncomparable objects for which
    //.valueOf() returns just the object itself
    a = a.valueOf();
    b = b.valueOf();

    if( arePrimitive(a, b ) ) {
        return 0; //Since they were primitive, and < > compares
                  //primitives, they must be equal
    }
    else { //uncomparable objects
        //the expando property is enumerable in ie <9
        a = uid(a);
        b = uid(b);
        return a < b ? -1 : a > b ? 1 : 0;
    }
}


function composeComparators( arg ) {
    if( !Array.isArray(arg) ) {
        arg = arrayCopy(arguments, 0, [], 0, arguments.length);
    }
    return function( a, b ) {
        for( var i = 0; i < arg.length; ++i ) {
            var result = arg[i](a, b);
            if( result !== 0 ) {
                return result;
            }
        }
    };
}

// Compare Position - MIT Licensed, John Resig
function comparePosition(a, b){
    return a.compareDocumentPosition ?
        a.compareDocumentPosition(b) :
        a.contains ?
            (a !== b && a.contains(b) && 16) +
                (a !== b && b.contains(a) && 8) +
                (a.sourceIndex >= 0 && b.sourceIndex >= 0 ?
                    (a.sourceIndex < b.sourceIndex && 4) +
                        (a.sourceIndex > b.sourceIndex && 2) :
                    1) +
            0 :
            0;
}

function invertedComparator( arg ) {
    return function( a, b ) {
        return -1 * arg( a, b );
    };
}

function True() {
    return true;
}

function NULL() {}

var NIL = new NULL();

NIL.left = NIL.right = NIL.parent =
    NIL.key = NIL.contents = void 0;

NIL.subtreeCount = 0;
NIL.color = BLACK;;
/* global RED, NIL */
/* exported RedBlackNode */
var RedBlackNode = (function() {

/**
 * Description.
 *
 *
 */
function RedBlackNode( key, value, parent ) {
    this.left = NIL;
    this.right = NIL;
    this.parent = parent;
    this.key = key;
    this.value = value;
    this.color = RED;
    this.subtreeCount = 1;
}
var method = RedBlackNode.prototype;

/**
 * Description.
 *
 *
 */
method.setValue = function( value ) {
    this.value = value;
};

/**
 * Description.
 *
 *
 */
method.getValue = function() {
    return this.value;
};

/**
 * Description.
 *
 *
 */
method.getUncle = function() {
    var gp = this.getGrandparent();

    if( !gp ) {
        return NIL;
    }

    if( gp.left === this.parent ) {
        return gp.right;
    }
    else if( gp.right === this.parent ) {
        return gp.left;
    }
    else {
        return NIL;
    }
};

/**
 * Description.
 *
 *
 */
method.getGrandparent = function() {
    if( this.parent && this.parent.parent ) {
        return this.parent.parent;
    }
    return null;
};

/**
 * Description.
 *
 *
 */
method.isRightChild = function() {
    return !!(this.parent && this.parent.right === this);
};

/**
 * Description.
 *
 *
 */
method.isLeftChild = function() {
    return !!(this.parent && this.parent.left === this);
};

/**
 * Description.
 *
 *
 */
method.setLeftChild = function( node ) {
    this.left = node;
    if( node && node !== NIL ) {
        node.parent = this;
    }
};

/**
 * Description.
 *
 *
 */
method.setRightChild = function( node ) {
    this.right = node;
    if( node && node !== NIL ) {
        node.parent = this;
    }
};

/**
 * Description.
 *
 *
 */
method.getSuccessor = function() {
    if( this.right !== NIL ) {
        var node = this.right;
        while( node.left !== NIL ) {
            node = node.left;
        }
        return node;
    }
    else {
        var parent = this.parent;
        var firstLeft = this;

        while (firstLeft.isRightChild()) {
            firstLeft = parent;
            parent = parent.parent;
        }

        return parent || null;
    }
};

/**
 * Description.
 *
 *
 */
method.getPrecedessor = function() {
    if( this.left !== NIL ) {
        var node = this.left;
        while( node.right !== NIL ) {
            node = node.right;
        }
        return node;
    }
    else {
        var parent = this.parent;
        var firstRight = this;

        while (firstRight.isLeftChild()) {
            firstRight = parent;
            parent = parent.parent;
        }

        return parent || null;
    }
};

/**
 * Description.
 *
 *
 */
method.rotateLeft = function() {
    var right = this.right,
        parent = this.parent;


    this.setRightChild(right.left);

    if( this.isRightChild() ) {
        parent.setRightChild(right);
    }
    else if( this.isLeftChild() ) {
        parent.setLeftChild(right);
    }
    else {
        right.parent = null;
    }

    right.setLeftChild(this);

    this.subtreeCount =
        1 + this.left.subtreeCount + this.right.subtreeCount;
    right.subtreeCount =
        1 + right.left.subtreeCount + right.right.subtreeCount;
};

/**
 * Description.
 *
 *
 */
method.rotateRight = function() {
    var left = this.left,
        parent = this.parent;

    this.setLeftChild(left.right);

    if( this.isRightChild()) {
        parent.setRightChild(left);
    }
    else if( this.isLeftChild() ) {
        parent.setLeftChild(left);
    }
    else {
        left.parent = null;
    }

    left.setRightChild(this);

    this.subtreeCount =
        1 + this.left.subtreeCount + this.right.subtreeCount;
    left.subtreeCount =
        1 + left.left.subtreeCount + left.right.subtreeCount;
};

return RedBlackNode;})();;
/* global RED, BLACK, NIL, defaultComparer, RedBlackNode */
/* exported RedBlackTree */
var RedBlackTree = (function() {

/**
 * Description.
 *
 *
 */
function RedBlackTree( comparator ) {
    this.root = null;
    this.length = 0;
    this.comparator = typeof comparator === "function" ?
        comparator :
        defaultComparer;
    this.modCount = 0;
}
var method = RedBlackTree.prototype;

/**
 * Description.
 *
 *
 */
method.size = method.length = function length() {
    return this.length;
};

//The root reference might point to wrong node after insertion/deletion
//simply find the node without parent is the new root
//The cost is often 0 or 1-2 operations in worst case because
//the root only changes when the rotations are happening near it
method.updateRootReference = function updateRootReference() {
    var cur = this.root;
    if( cur && cur.parent ) {
        while( ( cur = cur.parent ) ) {
            if( !cur.parent ) {
                this.root = cur;
                break;
            }
        }
    }
};

/**
 * Description.
 *
 *
 */
method.getComparator = function getComparator() {
    return this.comparator;
};

/**
 * Description.
 *
 *
 */
method.modified = function modified() {
    this.modCount++;
};

/**
 * Description.
 *
 *
 */
method.clear = function clear() {
    this.modified();
    this.root = null;
    this.length = 0;
};

/**
 * Description.
 *
 *
 */
method.set = function set( key, value ) {
    if( key == null ) {
        return void 0;
    }
    if( value === void 0 ) {
        return void 0;
    }
    this.modified();

    var node = key instanceof RedBlackNode ? key : this.nodeByKey( key ),
        ret = void 0;

    if( node ) {
        ret = node.value;
        node.setValue( value );
    }
    else {
        insert.call( this, key, value );
    }
    return ret;
};

/**
 * Description.
 *
 *
 */
method.setAt = function setAt( index, value ) {
    if( value === void 0 ) {
        return;
    }
    var node = this.nodeByIndex( index );

    if( node ) {
        return this.set( node, value );
    }
};

/**
 * Description.
 *
 *
 */
method.unsetAt = function unsetAt( index ) {
    var node = this.nodeByIndex( index );

    if( node ) {
        return this.unset( node );
    }
};

/**
 * Description.
 *
 *
 */
method.unset = function unset( key ) {
    if( key == null ) {
        return void 0;
    }
    this.modified();
    var node = key instanceof RedBlackNode ? key : this.nodeByKey( key );

    if( node ) {

        var newRoot = treeRemove( this.root, node );
        this.length--;
        if( newRoot !== void 0 ) {
            this.root = newRoot;
        }
        else {
            this.updateRootReference();
        }
        return node;
    }
    else {
        return void 0;
    }
};



//node with key >= inputKey
/**
 * Description.
 *
 *
 */
method.nodeByKeyAtLeast = function nodeByKeyAtLeast( key ) {
    return greaterKeys.call( this, key, true );
};

//node with key > inputKey
/**
 * Description.
 *
 *
 */
method.nodeByGreaterKey = function nodeByGreaterKey( key ) {
    return greaterKeys.call( this, key, false );
};

//node with key <= inputKey
/**
 * Description.
 *
 *
 */
method.nodeByKeyAtMost = function nodeByKeyAtMost( key ) {
    return lesserKeys.call( this, key, true );
};

//node with key < inputKey
/**
 * Description.
 *
 *
 */
method.nodeByLesserKey = function nodeByLesserKey( key ) {
    return lesserKeys.call( this, key, false );

};

/**
 * Description.
 *
 *
 */
method.nodeByKey = function nodeByKey( key ) {
    if( key == null ) {
        return void 0;
    }
    var node = this.root;

    if( !node ) {
        return void 0;
    }

    while( node !== NIL ) {
        var comp = this.comparator( node.key, key );
        if( comp === 0 ) {
            return node;
        }
        else {
            node = comp > 0 ? node.left : node.right;
        }
    }
    return void 0;
};

/**
 * Description.
 *
 *
 */
method.indexOfNode = function indexOfNode( node ) {
    if( !node ) {
        return -1;
    }

    var ret = rank( this.root, node );
    if( ret ) {
        return ret - 1;
    }
    return -1;
};

/**
 * Description.
 *
 *
 */
method.indexOfKey = function indexOfKey( key ) {
    if( key == null ) {
        return void 0;
    }

    return this.indexOfNode( this.nodeByKey( key ) );
};

/**
 * Description.
 *
 *
 */
method.nodeByIndex = function nodeByIndex( index ) {
    index = +index;
    if( !isFinite( index ) ) {
        return void 0;
    }
    if( index < 0 ) {
        index = index + this.length;
    }
    if( index < 0 ) {
        return this.firstNode();
    }
    if( index >= this.length ) {
        return this.lastNode();
    }

                           //OS-Select indexing is 1-based
    return nthNode( this.root, index + 1 );
};

/**
 * Description.
 *
 *
 */
method.firstNode = function firstNode() {
    var cur = this.root,
        prev;

    if( !cur ) {
        return void 0;
    }

    while( cur !== NIL ) {
        prev = cur;
        cur = cur.left;
    }
    return prev;
};

/**
 * Description.
 *
 *
 */
method.lastNode = function lastNode() {
    var cur = this.root,
        prev;

    if( !cur ) {
        return void 0;
    }

    while( cur !== NIL ) {
        prev = cur;
        cur = cur.right;
    }
    return prev;
};

/**
 * Description.
 *
 *
 */
method.iterator = function iterator() {
    return new Iterator( this );
};



var rotateWords = {
    left: "rotateLeft",
    right: "rotateRight"
};

var LEFT = "left",
    RIGHT = "right";

function treeRemoveFix( root, node ) {

    while( node.color === BLACK && node !== root) {
        var isLeft = node.isLeftChild(),
            dir = isLeft ? LEFT : RIGHT, //Avoid duplicating the symmetry
            rotateDir = rotateWords[dir],
            oppositeDir = isLeft ? RIGHT : LEFT,
            rotateOppositeDir = rotateWords[oppositeDir];

        var parent = node.parent,
            sibling = parent[oppositeDir];

        if( sibling.color === RED ) {
            sibling.color = BLACK;
            parent.color = RED;
            parent[rotateDir]();
            sibling = parent[oppositeDir];
        }

        if( sibling[dir].color === BLACK &&
            sibling[oppositeDir].color === BLACK ) {
            sibling.color = RED;
            node = node.parent;
        }
        else {
            if( sibling[oppositeDir].color === BLACK ) {
                sibling[dir].color = BLACK;
                sibling.color = RED;
                sibling[rotateOppositeDir]();
                sibling = node.parent[oppositeDir];
            }

            sibling.color = node.parent.color;
            node.parent.color = BLACK;
            sibling[oppositeDir].color = BLACK;
            node.parent[rotateDir]();
            node = root;
        }
    }
    node.color = BLACK;
}

//Return new value for root, undefined otherwise
function treeRemove( root, node ) {
    var current, successor;

    if( node.left !== NIL &&
        node.right !== NIL ) {
        successor = node.getSuccessor();
        node.key = successor.key;
        node.value = successor.value;
        node = successor;
    }

    if( node.left !== NIL ) {
        current = node.left;
    }
    else {
        current = node.right;
    }

    if( current !== NIL ) {
        var parent = node.parent;

        if( node.isLeftChild() ) {
            parent.setLeftChild(current);
        }
        else if( node.isRightChild() ) {
            parent.setRightChild(current);
        }

        node.left = node.right = NIL;

        var upd = current;
        while( upd ) {
            upd.subtreeCount =
                upd.left.subtreeCount + upd.right.subtreeCount + 1;
            upd = upd.parent;
        }

        if( node.color === BLACK ) {
            treeRemoveFix(parent ? root : current, current);
        }

        if( !parent ) {
            current.parent = null;
            return current;
        }
    }
    else if( !node.parent ) {
        return null;
    }
    else {
        if( node.color === BLACK ) {
            treeRemoveFix( root, node );
        }

        if( node.isLeftChild() ) {
            node.parent.setLeftChild(NIL);
        }
        else if( node.isRightChild() ) {
            node.parent.setRightChild(NIL);
        }

        var upd = node;
        while( upd ) {
            upd.subtreeCount =
                upd.left.subtreeCount + upd.right.subtreeCount + 1;
            upd = upd.parent;
        }
    }
}



//Return true if the node was inserted into the tree, false otherwise
function treeInsert( fn, root, node ) {

    while( root && root !== NIL ) {
        var comp = fn( root.key, node.key );

        if( comp === 0 ) {
            return false;
        }
        root.subtreeCount++;
        if( comp > 0 ) {

            if( root.left === NIL ) {
                root.setLeftChild(node);
                return true;
            }
            else {
                root = root.left;
            }
        }
        else {
            if( root.right === NIL ) {
                root.setRightChild(node);
                return true;
            }
            else {
                root = root.right;
            }
        }

    }
    return false;
}

function insert( key, value ) {
    var node = new RedBlackNode(key, value, null);
    if( !this.root ) {
        this.root = node;
        this.length = 1;
        node.color = BLACK;
    }
    else if( treeInsert( this.comparator, this.root, node ) ) {
        this.length++;
        while( node.parent && node.parent.color === RED ) {

            var uncle = node.getUncle(),
                grandparent = node.getGrandparent(),
                parent = node.parent;

            if( uncle.color === RED ) {
                parent.color = BLACK;
                uncle.color = BLACK;
                grandparent.color = RED;
                node = grandparent;
                continue;
            }

            if( parent.isLeftChild() ) {
                if( node.isRightChild() ) {
                    node = node.parent;
                    node.rotateLeft();
                }

                node.parent.color = BLACK;
                grandparent = node.getGrandparent();
                grandparent.color = RED;
                grandparent.rotateRight();

            }
            else if( parent.isRightChild() ) {
                if( node.isLeftChild() ) {
                    node = node.parent;
                    node.rotateRight();
                }
                node.parent.color = BLACK;
                grandparent = node.getGrandparent();
                grandparent.color = RED;
                grandparent.rotateLeft();
            }
        }
        this.updateRootReference();
        this.root.color = BLACK;
    }
}
//1-based indexing
function nthNode( root, n ) {
    while( root && root !== NIL ) {
        var r = root.left.subtreeCount + 1;
        if( n === r ) {
            return root;
        }

        if( n < r ) {
            root = root.left;
        }
        else {
            n -= r;
            root = root.right;
        }
    }
    return void 0;
}

function rank( root, node ) {
    if( !root || root === NIL ) {
        return void 0;
    }
    if( !node || node === NIL ) {
        return void 0;
    }
    var i = node.left.subtreeCount + 1;

    while( node !== root ) {
        if( node.isRightChild() ) {
            i += (node.parent.left.subtreeCount + 1);
        }
        node = node.parent;
    }
    return i;
}

                        //true = less-than-or-equal
                        //false = less-than
function lesserKeys( key, open ) {
    if( key == null ) {
        return void 0;
    }

    var node = this.root;

    while( node && node !== NIL ) {
        var comp = this.comparator( node.key, key );


        if( open && comp === 0 ) {
            return node;
        }//node's key is less than input key
        else if( comp < 0 ) {
            //there is also no greater keys
            if( node.right === NIL ) {
                return node;
            }
            else {
                node = node.right;
            }
        }
        else { //node's key is equal or greater, go for backingNode
            if( node.left !== NIL ) {
                node = node.left;
            }
            else {
                //second least node in the tree
                //return least or undefined
                return node.getPrecedessor() || void 0;
            }
        }
    }
    return void 0;
}

                        //true = less-than-or-equal
                        //false = less-than
function greaterKeys( key, open ) {
    if( key == null ) {
        return void 0;
    }

    var node = this.root;

    while( node && node !== NIL ) {
        var comp = this.comparator( node.key, key );

        if( open && comp === 0 ) {
            return node;
        }   //node's key is greater than input key
        else if( comp > 0 ) {
            //there is also no lesser keys

            if( node.left === NIL ) {
                return node;
            }
            else {
                node = node.left;
            }
        }
        else { //node's key is less, try to find a greater key
            if( node.right !== NIL ) {
                node = node.right;
            }
            else {
                //second greatest node in the tree
                //return greatest or undefined
                return node.getSuccessor() || void 0;
            }
        }
    }
    return void 0;
}

var Iterator = (function() {


    /**
     * Description.
     *
     *
     */
    function Iterator( tree ) {
        this.key = this.value = void 0;
        this.index = -1;
        this._modCount = tree.modCount;

        this._index = -1;
        this._tree = tree;
        this._backingNode = null;
        this._currentNode = null;
    }
    var method = Iterator.prototype;

    /**
     * Description.
     *
     *
     */
    method._checkModCount = function _checkModCount() {
        if( this._modCount !== this._tree.modCount ) {
            throw new Error( "map cannot be mutated while iterating" );
        }
    };

    /**
     * Description.
     *
     *
     */
    method._getPrevNode = function _getPrevNode() {
        var ret;
        if( this._currentNode === null ) {
            if( this._backingNode !== null ) {
                ret = this._backingNode;
                this._backingNode = null;
                return ret.getPrecedessor();

            }
            else {
                ret = this._tree.lastNode();
            }
        }
        else {
            ret = this._currentNode.getPrecedessor();
        }
        return ret;
    };

    /**
     * Description.
     *
     *
     */
    method._getNextNode = function _getNextNode() {

        var ret;
        if( this._currentNode === null ) {
            if( this._backingNode !== null ) {
                ret = this._backingNode;
                this._backingNode = null;
                this._index--;
            }
            else {

                ret = this._tree.firstNode();
            }
        }
        else {
            ret = this._currentNode.getSuccessor();
        }
        return ret;
    };

    /**
     * Description.
     *
     *
     */
    method.next = function next() {
        this._checkModCount();

        this._index++;

        if( this._backingNode === null &&
            this._index >= this._tree.size()
        ) {
            this.moveToEnd();
            return false;
        }

        this._currentNode = this._getNextNode();
        this.key = this._currentNode.key;
        this.value = this._currentNode.value;
        this.index = this._index;

        return true;
    };

    /**
     * Description.
     *
     *
     */
    method.prev = function prev() {
        this._checkModCount();

        this._index--;

        if( this._index < 0 ||
            this._tree.size() === 0 ) {
            this.moveToStart();
            return false;
        }

        this._currentNode = this._getPrevNode();

        this.key = this._currentNode.key;
        this.value = this._currentNode.value;
        this.index = this._index;

        return true;

    };

    /**
     * Description.
     *
     *
     */
    method.moveToStart = function moveToStart() {
        this._checkModCount();

        this._index = -1;
        this.key = this.value = void 0;
        this.index = -1;
        this._currentNode = null;

        return this;
    };

    /**
     * Description.
     *
     *
     */
    method.moveToEnd = function moveToEnd() {
        this._checkModCount();

        this._index = this._tree.size();
        this.key = this.value = void 0;
        this.index = -1;
        this._currentNode = null;

        return this;
    };

    /**
     * Description.
     *
     *
     */
    method.set = method.put = function put( value ) {
        this._checkModCount();

        if( this._currentNode === null ) {
            return;
        }

        var ret = this.value;
        this._currentNode.value = this.value = value;
        return ret;
    };

    /**
     * Description.
     *
     *
     */
    method["delete"] = method.remove = function remove() {
        this._checkModCount();

        if( this._currentNode === null ) {
            return;
        }

        var ret = this._currentNode.value,
            backingNode,
            parent;

        this._backingNode = backingNode = this._currentNode.getSuccessor();

        this._tree.unset( this._currentNode );

        this.key = this.value = void 0;
        this.index = -1;
        this._currentNode = null;
        this._modCount = this._tree.modCount;


        if( backingNode === null ) {
            this.moveToEnd();
        }
        else if( ( parent = backingNode.parent ) !== null &&
            this._tree.comparator( parent.key, backingNode.key ) === 0 ) {
            this._backingNode = parent;
        }

        return ret;
    };


    return Iterator;
})();

method._Iterator = Iterator;

return RedBlackTree;})();

;
/*
  I've wrapped Makoto Matsumoto and Takuji Nishimura's code in a namespace
  so it's better encapsulated. Now you can have multiple random number generators
  and they won't stomp all over eachother's state.

  If you want to use this as a substitute for Math.random(), use the random()
  method like so:

  var m = new MersenneTwister();
  var randomNumber = m.random();

  You can also call the other genrand_{foo}() methods on the instance.

  If you want to use a specific seed in order to get a repeatable random
  sequence, pass an integer into the constructor:

  var m = new MersenneTwister(123);

  and that will always produce the same random sequence.

  Sean McCullough (banksean@gmail.com)
*/

/*
   A C-program for MT19937, with initialization improved 2002/1/26.
   Coded by Takuji Nishimura and Makoto Matsumoto.

   Before using, initialize the state by using init_genrand(seed)
   or init_by_array(init_key, key_length).

   Copyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,
   All rights reserved.

   Redistribution and use in source and binary forms, with or without
   modification, are permitted provided that the following conditions
   are met:

     1. Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.

     2. Redistributions in binary form must reproduce the above copyright
        notice, this list of conditions and the following disclaimer in the
        documentation and/or other materials provided with the distribution.

     3. The names of its contributors may not be used to endorse or promote
        products derived from this software without specific prior written
        permission.

   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
   A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
   EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
   PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


   Any feedback is very welcome.
   http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html
   email: m-mat @ math.sci.hiroshima-u.ac.jp (remove space)
*/
var MersenneTwister = (function() {
var MersenneTwister = function(seed) {
  if (seed == undefined) {
    seed = new Date().getTime();
  }
  /* Period parameters */
  this.N = 624;
  this.M = 397;
  this.MATRIX_A = 0x9908b0df;   /* constant vector a */
  this.UPPER_MASK = 0x80000000; /* most significant w-r bits */
  this.LOWER_MASK = 0x7fffffff; /* least significant r bits */

  this.mt = new Array(this.N); /* the array for the state vector */
  this.mti=this.N+1; /* mti==N+1 means mt[N] is not initialized */

  this.init_genrand(seed);
}

/* initializes mt[N] with a seed */
MersenneTwister.prototype.init_genrand = function(s) {
  this.mt[0] = s >>> 0;
  for (this.mti=1; this.mti<this.N; this.mti++) {
      var s = this.mt[this.mti-1] ^ (this.mt[this.mti-1] >>> 30);
   this.mt[this.mti] = (((((s & 0xffff0000) >>> 16) * 1812433253) << 16) + (s & 0x0000ffff) * 1812433253)
  + this.mti;
      /* See Knuth TAOCP Vol2. 3rd Ed. P.106 for multiplier. */
      /* In the previous versions, MSBs of the seed affect   */
      /* only MSBs of the array mt[].                        */
      /* 2002/01/09 modified by Makoto Matsumoto             */
      this.mt[this.mti] >>>= 0;
      /* for >32 bit machines */
  }
}

/* initialize by an array with array-length */
/* init_key is the array for initializing keys */
/* key_length is its length */
/* slight change for C++, 2004/2/26 */
MersenneTwister.prototype.init_by_array = function(init_key, key_length) {
  var i, j, k;
  this.init_genrand(19650218);
  i=1; j=0;
  k = (this.N>key_length ? this.N : key_length);
  for (; k; k--) {
    var s = this.mt[i-1] ^ (this.mt[i-1] >>> 30)
    this.mt[i] = (this.mt[i] ^ (((((s & 0xffff0000) >>> 16) * 1664525) << 16) + ((s & 0x0000ffff) * 1664525)))
      + init_key[j] + j; /* non linear */
    this.mt[i] >>>= 0; /* for WORDSIZE > 32 machines */
    i++; j++;
    if (i>=this.N) { this.mt[0] = this.mt[this.N-1]; i=1; }
    if (j>=key_length) j=0;
  }
  for (k=this.N-1; k; k--) {
    var s = this.mt[i-1] ^ (this.mt[i-1] >>> 30);
    this.mt[i] = (this.mt[i] ^ (((((s & 0xffff0000) >>> 16) * 1566083941) << 16) + (s & 0x0000ffff) * 1566083941))
      - i; /* non linear */
    this.mt[i] >>>= 0; /* for WORDSIZE > 32 machines */
    i++;
    if (i>=this.N) { this.mt[0] = this.mt[this.N-1]; i=1; }
  }

  this.mt[0] = 0x80000000; /* MSB is 1; assuring non-zero initial array */
}

/* generates a random number on [0,0xffffffff]-interval */
MersenneTwister.prototype.genrand_int32 = function() {
  var y;
  var mag01 = new Array(0x0, this.MATRIX_A);
  /* mag01[x] = x * MATRIX_A  for x=0,1 */

  if (this.mti >= this.N) { /* generate N words at one time */
    var kk;

    if (this.mti == this.N+1)   /* if init_genrand() has not been called, */
      this.init_genrand(5489); /* a default initial seed is used */

    for (kk=0;kk<this.N-this.M;kk++) {
      y = (this.mt[kk]&this.UPPER_MASK)|(this.mt[kk+1]&this.LOWER_MASK);
      this.mt[kk] = this.mt[kk+this.M] ^ (y >>> 1) ^ mag01[y & 0x1];
    }
    for (;kk<this.N-1;kk++) {
      y = (this.mt[kk]&this.UPPER_MASK)|(this.mt[kk+1]&this.LOWER_MASK);
      this.mt[kk] = this.mt[kk+(this.M-this.N)] ^ (y >>> 1) ^ mag01[y & 0x1];
    }
    y = (this.mt[this.N-1]&this.UPPER_MASK)|(this.mt[0]&this.LOWER_MASK);
    this.mt[this.N-1] = this.mt[this.M-1] ^ (y >>> 1) ^ mag01[y & 0x1];

    this.mti = 0;
  }

  y = this.mt[this.mti++];

  /* Tempering */
  y ^= (y >>> 11);
  y ^= (y << 7) & 0x9d2c5680;
  y ^= (y << 15) & 0xefc60000;
  y ^= (y >>> 18);

  return y >>> 0;
}

/* generates a random number on [0,0x7fffffff]-interval */
MersenneTwister.prototype.genrand_int31 = function() {
  return (this.genrand_int32()>>>1);
}



/* generates a random number on [0,1]-real-interval */
MersenneTwister.prototype.genrand_real1 = function() {
  return this.genrand_int32()*(1.0/4294967295.0);
  /* divided by 2^32-1 */
}

/* generates a random number on [0,1)-real-interval */
MersenneTwister.prototype.random = function() {
  return this.genrand_int32()*(1.0/4294967296.0);
  /* divided by 2^32 */
}

/* generates a random number on (0,1)-real-interval */
MersenneTwister.prototype.genrand_real3 = function() {
  return (this.genrand_int32() + 0.5)*(1.0/4294967296.0);
  /* divided by 2^32 */
}

/* generates a random number on [0,1) with 53-bit resolution*/
MersenneTwister.prototype.genrand_res53 = function() {
  var a=this.genrand_int32()>>>5, b=this.genrand_int32()>>>6;
  return(a*67108864.0+b)*(1.0/9007199254740992.0);
}
MersenneTwister.prototype.genrandInt32 = MersenneTwister.prototype.genrand_int32;
/* These real versions are due to Isaku Wada, 2002/01/09 added */

return MersenneTwister;
})();;
/* exported DEFAULT_CAPACITY, LOAD_FACTOR, MAX_CAPACITY, pow2AtLeast,
    clampCapacity */
/**
 * Get the closest next power of two of the given integer
 * or the number itself if it is a power of two.
 *
 * @param {number} n Must be greater than zero.
 * @return {number} The power of two integer.
 *
 */
function pow2AtLeast( n ) {
    n = n >>> 0;
    n = n - 1;
    n = n | (n >> 1);
    n = n | (n >> 2);
    n = n | (n >> 4);
    n = n | (n >> 8);
    n = n | (n >> 16);
    return n + 1;
}

/**
 * Forces the capacity integer to be in the sane range.
 *
 * @param {int} capacity The capacity integer to sanitize.
 * @return {int} The sanitized capacity.
 *
 */
function clampCapacity( capacity ) {
    return Math.max( DEFAULT_CAPACITY, Math.min( MAX_CAPACITY, capacity ) );
}

var DEFAULT_CAPACITY = 1 << 4;
var MAX_CAPACITY = 1 << 30;
var LOAD_FACTOR = 0.67;;
/* exported equality */
/* global isArray */
var equality = (function() {

/**
 * See if two values are equal. Considers -0 and +0 equal as
 * those are hashed by hashInt and there is only one 0 as
 * integer.
 *
 * Doesn't support arrays. If array checks are needed, the hash
 * table should transition into using the slower equals()
 * function.
 *
 * @param {dynamic} key1 Description of key1 parameter.
 * @param {dynamic} key2 Description of key2 parameter.
 * @return {boolean}
 *
 */
function simpleEquals( key1, key2 ) {
                            //fast NaN equality
    return key1 === key2 || (key1 !== key1 && key2 !== key2);
}


/**
 * See if two values are equal. Considers -0 and +0 equal as
 * those are hashed by hashInt and there is only one 0 as
 * integer.
 *
 * Supports non-circular arrays with deep comparison.
 *
 * @param {dynamic} key1 The first key.
 * @param {dynamic} key2 The second key.
 * @return {boolean}
 *
 */
function equals( key1, key2 ) {
    if( isArray( key1 ) &&
        isArray( key2 ) ) {
        if( key1.length === key2.length ) {
            for( var i = 0, len = key1.length; i < len; ++i ) {
                var val1 = key1[i],
                    val2 = key2[i];

                if( !simpleEquals( val1, val2 ) ) {
                    //Skip infinite recursion
                    if( !( val1 === key1 || val1 === key2 ||
                        val2 === key1 || val2 === key1 ) ) {
                        if( !equals( val1, val2 ) ) {
                            return false;
                        }
                    }
                    else {
                        return false;
                    }
                }
            }
            return true;
        }
        return false;
    }
    return simpleEquals( key1, key2 );
}

return {
    simpleEquals: simpleEquals,
    equals: equals
};
})();
;
/* global isArray, uid, MersenneTwister */
/* exported hash */
var hash = (function() {

var haveTypedArrays = typeof ArrayBuffer !== "undefined" &&
        typeof Uint32Array !== "undefined" &&
        typeof Float64Array !== "undefined";

var seeds = [
    5610204, 986201666, 907942159, 902349351, 797161895, 789759260,
    711023356, 576887056, 554056888, 546816461, 546185508, 524085435,
    459334166, 456527883, 383222467, 301138872, 147250593, 103672245,
    44482651, 874080556, 634220932, 600693396, 598579635, 575448586,
    450435477, 320251763, 315455317, 171499680, 164922379, 113615305,
    891544618, 787150959, 781424867, 692252409, 681534962, 600000618,
    507066596, 449273102, 169958990, 878159962, 794651257, 696691070,
    575407780, 567682439, 533628822, 458239955, 387357286, 373364136,
    345493840, 312464221, 303942867, 53740513, 874713788, 737200732,
    689774193, 557290539, 491474729, 463844961, 381345944, 235288247,
    146111809, 952752630, 870989848, 850671622, 818854957, 579958572,
    376499176, 93332135, 24878659, 969563338, 876939429, 863026139,
    877798289, 409188290, 382588822, 170007484, 456227876, 95501317,
    577863864, 559755423, 972015729, 582556160, 543151278, 451276979,
    401520780, 285701754, 101224795
];


var seed = seeds[ ( Math.random() * seeds.length ) | 0 ];

var seedTable = (function(){
    var ArrayConstructor = typeof Int32Array !== "undefined" ?
            Int32Array :
            Array;
    var r = new ArrayConstructor( 8192 );

    var m = new MersenneTwister( seed );

    for( var i = 0; i < r.length; ++i ) {
        r[i] = ( m.genrandInt32() & 0xFFFFFFFF );
    }
    return r;

})();


/**
 * Calculates a hash integer value for the given boolean.
 *
 * @param {boolean} b The input boolean.
 * @return {int} The hash.
 *
 */
function hashBoolean( b ) {
    var x = seedTable[0];
    var a = (b ? 7 : 3 );
    x = (seedTable[a] ^ x);
    return x;
}

/**
 * Calculates a hash integer value for the given string.
 * Strings with .length > 8191 will have a simple hash
 * based on the length only.
 *
 * @param {string} str The input string.
 * @return {int} The hash.
 *
 */
function hashString( str ) {
    var x = seedTable[0],
        len = str.length & 0x3FFFFFFF;

    if( len > 8191 ) {
        return hashInt( len );
    }

    for( var i = 0; i < len; ++i ) {
        x = ( ( str.charCodeAt( i ) & 0xFF ) * seedTable[ i ] + x ) | 0;
    }

    return x & 0x3FFFFFFF;
}

/**
 * Calculates a hash integer value for the given integer.
 * Using the integer itself would cause a lot of probing.
 *
 * @param {int} i The input integer.
 * @return {int} The hash.
 *
 */
function hashInt( i ) {
    var r = ( ( seedTable[ ( i & 0xFF) ] ) ^
        ( ( seedTable[ ( ( i >> 8 ) & 0xFF ) | 0x100 ] >> 1) ^
        ( ( seedTable[ ( ( i >> 16 ) & 0xFF ) | 0x200 ] >> 2) ^
        ( ( seedTable[ ( ( i >> 24 ) & 0xFF) | 0x300 ] >> 3) ^
        seedTable[ 0 ] ) ) ) );
    return r & 0x3FFFFFFF;
}

if( haveTypedArrays ) {
    var FLOAT_BUFFER = new ArrayBuffer( 8 ),
        FLOAT_BUFFER_FLOAT_VIEW = new Float64Array( FLOAT_BUFFER ),
        FLOAT_BUFFER_INT_VIEW = new Int32Array( FLOAT_BUFFER );

    /**
     * Calculates a hash integer value for the given floating
     * point number. Relies on the ability to read binary
     * representation of the float for a good hash.
     *
     * @param {float} f The input float.
     * @return {int} The hash.
     *
     */
    var hashFloat = function hashFloat( f ) {
        var x = seedTable[0];
        FLOAT_BUFFER_FLOAT_VIEW[0] = f;
        var i = FLOAT_BUFFER_INT_VIEW[0];
        var a = ((i >> 24) & 0xFF) | 0x700;
        x = (seedTable[a] >> 7) ^ x;
        a = ((i >> 16) & 0xFF) | 0x600;
        x = (seedTable[a] >> 6) ^ x;
        a = ((i >> 8) & 0xFF) | 0x500;
        x = (seedTable[a] >> 5) ^ x;
        a = (i & 0xFF) | 0x400;
        x = (seedTable[a] >> 4) ^ x;
        i = FLOAT_BUFFER_INT_VIEW[1];
        a = ((i >> 24) & 0xFF) | 0x300;
        x = (seedTable[a] >> 3) ^ x;
        a = ((i >> 16) & 0xFF) | 0x200;
        x = (seedTable[a] >> 2) ^ x;
        a = ((i >> 8) & 0xFF) | 0x100;
        x = (seedTable[a] >> 1) ^ x;
        a = (i & 0xFF);
        x = (seedTable[a]) ^ x;
        return x & 0x3FFFFFFF;
    };
}
else {
    var hashFloat = hashInt;
}

/**
 * Calculates a int hash value for the given input
 * array.
 *
 * @param {Array.<dynamic>} array The input array.
 * @return {int} The hash.
 *
 */
function hashArray( array ) {
    var x = seedTable[0],
        len = array.length & 0x3FFFFFFF;

    for( var i = 0; i < len; ++i ) {
        var val = array[i];
        if( val === array ) {//Skip infinite recursion
            continue;
        }
        x = ( ( hash( array[i], 0x40000000 ) +
            seedTable[ i & 8191 ] ) ^ x ) | 0;
    }

    return x & 0x3FFFFFFF;
}

/**
 * Returns a hash integer value for the given object. Calls
 * .valueOf() of the object which should return an integer.
 * However, by default it will return the object itself, in
 * which case identity hash is used.
 *
 * @param {Object|null} obj The object to hash. Can be null.
 * @return {int} The hash.
 *
 */
function hashObject( obj ) {
    if( obj == null ) {
        return seedTable[134];
    }
    var ret;
    //valueOf returned a number
    if( ( ret = obj.valueOf() ) !== obj ) {
        return ret;
    }
    return uid( obj );
}

/**
 * Returns an integer hash of the given value. Supported
 * types are:
 *
 * Strings, integers, floats, objects and arrays of
 * them.
 *
 * @param {dynamic} val The value to hash.
 * @param {int} tableSize The amount of buckets in the hash table.
 * Must be a power of two.
 * @return {int}
 *
 */
function hash( val, tableSize ) {
    var t = typeof val,
        bitAnd = tableSize - 1;
    if( t === "string" ) {
        return hashString( val ) & bitAnd;
    }
    else if( t === "number" ) {
        if( ( val | 0 ) === val ) {
            return hashInt( val & 0x3FFFFFFF ) & bitAnd;
        }
        return hashFloat( val ) & bitAnd;
    }
    else if( t === "boolean" ) {
        return hashBoolean( val ) & bitAnd;
    }
    else {
        if( isArray( val ) ) {
            return hashArray( val ) & bitAnd;
        }
        return hashObject( val ) & bitAnd;
    }
}

return hash;})();
;
/* global MapForEach, toListOfTuples,
    MapIteratorCheckModCount, MapEntries, MapKeys, MapValues, MapValueOf,
    MapToJSON, MapToString, DEFAULT_CAPACITY, hash,
    isArray, pow2AtLeast, clampCapacity, equality, LOAD_FACTOR,
    global */
/* exported Map */
/* jshint -W079 */
var Map = (function() {
var Error = global.Error;
/**
 * Constructor for Maps. Map is a simple lookup structure without
 * any ordering. Fast lookup, slow iteration. Memory
 * efficient.
 *
 * The undefined value is not supported as a key nor as a value. Use
 * null instead.
 *
 * If ordering is needed consider OrderedMap or SortedMap.
 *
 * Array of tuples initialization:
 *
 * var map = new Map([
 *      [0, "zero"],
 *      [5, "five"],
 *      [10, "ten"],
 *      [13, "thirteen"]
 * ]);
 *
 * @param {int=|Object=|Array.<Tuple>|Map} capacity The initial capacity.
 * Can also be a object, array of tuples or another map to initialize
 * the map.
 * @constructor
 */
function Map( capacity ) {
    this._buckets = null;
    this._size = 0;
    this._modCount = 0;
    this._capacity = DEFAULT_CAPACITY;
    this._equality = equality.simpleEquals;
    this._usingSimpleEquals = true;
    this._init( capacity );
}
var method = Map.prototype;

/**
 * Internal.
 *
 * @param {int=} capacity Description of capacity parameter.
 * @return {void}
 *
 */
method._init = function _init( capacity ) {
    if( capacity == null ) {
        this._makeBuckets();
        return;
    }

    switch( typeof capacity ) {
    case "number":
        this._capacity = clampCapacity( pow2AtLeast( capacity / LOAD_FACTOR ) );
        this._makeBuckets();
        break;
    case "object":
        var tuples = toListOfTuples( capacity );
        var size = tuples.length;
        this._capacity = pow2AtLeast( size / LOAD_FACTOR );
        this._makeBuckets();
        this._setAll( tuples );
        break;
    default:
        this._makeBuckets();
    }
};

/**
 * Internal.
 *
 * @return {void}
 *
 */
method._checkEquals = function _checkEquals() {
    if( this._usingSimpleEquals === true ) {
        this._usingSimpleEquals = false;
        this._equality = equality.equals;
    }
};

/**
 * Internal.
 *
 * @return {void}
 *
 */
method._makeBuckets = function _makeBuckets() {
    var length = this._capacity << 1;

    var b = this._buckets = new Array( length < 100000 ? length : 0 );

    for( var i = 0; i < length; ++i ) {
        b[i] = void 0;
    }

};

/**
 * Internal.
 *
 * @param {Array.<dynamic>} oldBuckets Description of oldBuckets parameter.
 * @return {void}
 *
 */
method._resized = function _resized( oldBuckets ) {
    var newBuckets = this._buckets,
        oldLength = oldBuckets.length;

    for( var i = 0; i < oldLength; i+=2 ) {

        var key = oldBuckets[i];
        if( key !== void 0) {
            var newIndex = hash( key, this._capacity );

            while( newBuckets[ newIndex << 1 ] !== void 0 ) {
                newIndex = ( this._capacity - 1 ) & ( newIndex + 1 );
            }
            newBuckets[ newIndex << 1 ] = oldBuckets[ i ];
            newBuckets[ ( newIndex << 1 ) + 1 ] = oldBuckets[ i + 1 ];

            oldBuckets[i] = oldBuckets[i+1] = void 0;
        }
    }
};

/**
 * Internal.
 *
 * @param {int} capacity Description of capacity parameter.
 * @return {void}
 *
 */
method._resizeTo = function _resizeTo( capacity ) {
    capacity = clampCapacity( capacity );
    if( this._capacity >= capacity ) {
        return;
    }
    var oldBuckets = this._buckets;
    this._capacity = capacity;
    this._makeBuckets();

    if( oldBuckets !== null ) {
        this._resized( oldBuckets );
    }
};

/**
 * Internal.
 *
 * @return {int}
 *
 */
method._getNextCapacity = function _getNextCapacity() {
    return (this._capacity < 200000 ?
        this._capacity << 2 :
        this._capacity << 1);
};

/**
 * Internal.
 *
 * @param {int} size Description of size parameter.
 * @return {boolean}
 *
 */
method._isOverCapacity = function _isOverCapacity( size ) {
    return ( ( size << 2 ) - size ) >= ( this._capacity << 1 );
}; //Load factor of 0.67

/**
 * Internal.
 *
 * @return {void}
 *
 */
method._checkResize = function _checkResize() {
    if( this._isOverCapacity( this._size ) ) {
        this._resizeTo( this._getNextCapacity() );
    }
};

/**
 * Internal.
 *
 * @param {Array.<Tuple>} obj Description of obj parameter.
 * @return {void}
 *
 */
method._setAll = function _setAll( obj ) {
    if( !obj.length ) {
        return;
    }
    var newSize = obj.length + this._size;

    if( this._isOverCapacity( newSize ) ) {
        var capacity = pow2AtLeast( newSize );
        if( ( ( newSize << 2 ) - newSize ) >= ( capacity << 1 ) ) {
            capacity <<= 1;
            if( capacity < 100000 ) {
                capacity <<= 1;
            }
        }
        this._resizeTo( capacity );
    }

    for( var i = 0; i < obj.length; ++i ) {
        this.set( obj[ i ][ 0 ], obj[ i ][ 1 ] );
    }

};

//API

/**
 * Simple way to iterate the map. The callback fn receives arguments:
 *
 * {dynamic} value, {dynamic} key, {integer} index
 *
 * Iteration can be very slow in an unordered map.
 *
 * @param {function} fn Description of fn parameter.
 * @param {Object=} ctx Description of ctx parameter.
 * @return {void}
 *
 */
method.forEach = MapForEach;

/**
 * Returns a shallow clone of the map.
 *
 * @return {Map}
 *
 */
method.clone = function clone() {
    return new this.constructor( this.entries() );
};

/**
 * See if the value is contained in the map.
 *
 * Iteration can be very slow in an unordered map.
 *
 * @param {dynamic} value The value to lookup.
 * @return {boolean}
 *
 */
method.containsValue = method.hasValue = function hasValue( value ) {
    if( value === void 0 ) {
        return false;
    }
    var it = this.iterator();
    while( it.next() ) {
        if( it.value === value ) {
            return true;
        }
    }
    return false;
};

/**
 * See if the key is contained in the map.
 *
 * @param {dynamic} key The key to lookup.
 * @return {boolean}
 *
 */
method.containsKey = method.hasKey = function hasKey( key ) {
    return this.get( key ) !== void 0;
};

/**
 * Get the value associated with the given key in this map.
 *
 * Returns undefined if not found. Key cannot be undefined.
 *
 * @param {dynamic} key The key to lookup value for.
 * @return {dynamic}
 * @return {void}
 *
 */
method.get = function get( key ) {
    var capacity = this._capacity,
        buckets = this._buckets,
        bucketIndex = hash( key, capacity );

    while( true ) {
        var k = buckets[ bucketIndex << 1 ];

        if( k === void 0 ) {
            return void 0;
        }
        else if( this._equality( k, key ) ) {
            return buckets[ ( bucketIndex << 1 ) + 1 ];
        }
        bucketIndex = ( 1 + bucketIndex ) & ( capacity - 1 );

    }
};

/**
 * Associate a value with a key. If the key is already in the
 * map, that key is updated with the given value. Otherwise a
 * new entry is added.
 *
 * If a value was updated, returns the old value. If the key was
 * inserted into the map, returns undefined.
 *
 * The undefined value is not supported as a key nor as a value. Use
 * null instead.
 *
 * @param {dynamic} key The key to associate with value.
 * @param {dynamic} value The value to associate with key.
 * @return {dynamic}
 * @return {void}
 * @throws {Error} When key or value is undefined
 *
 */
method.put = method.set = function set( key, value ) {
    if( key === void 0 || value === void 0 ) {
        throw new Error( "Cannot use undefined as a key or value" );
    }
    if( isArray( key ) ) {
        this._checkEquals();
    }

    var bucketIndex = hash( key, this._capacity ),
        capacity = this._capacity - 1,
        buckets = this._buckets;
    while( true ) {
        var k = buckets[ bucketIndex << 1 ];

        if( k === void 0 ) {
            //Insertion
            buckets[ bucketIndex << 1 ] = key;
            buckets[ ( bucketIndex << 1 ) + 1 ] = value;
            this._size++;
            this._checkResize();
            this._modCount++;
            return void 0;
        }
        else if( this._equality( k, key ) === true ) {

            //update
            var ret = buckets[ ( bucketIndex << 1 ) + 1 ];
            buckets[ ( bucketIndex << 1 ) + 1 ] = value;
            this._modCount++;
            return ret;
        }

        bucketIndex = ( 1 + bucketIndex ) & capacity;
    }
};

/**
 * Removes a value associated with the given key in the map. If the
 * key is not in the map, returns undefined. If the key is in the map,
 * returns the value associated with the key.
 *
 * You can check if the removal was successful by checking
 *
 * map.remove( myKey ) !== void 0
 *
 * The undefined value as a key or value is not supported. Use null instead.
 *
 * @param {dynamic} key The key to remove from the map.
 * @return {dynamic}
 * @return {void}
 *
 */
//Linear probing with step of 1 can use
//the instant clean-up algorithm from
//http://en.wikipedia.org/wiki/Open_addressing
//instead of marking slots as deleted.
method["delete"] = method.unset = method.remove = function remove( key ) {
    var bucketIndex = hash( key, this._capacity ),
        capacity = this._capacity - 1,
        buckets = this._buckets;
    while( true ) {
        var k = buckets[ bucketIndex << 1 ];

        if( k === void 0 ) {
            //key is not in table
            return void 0;
        }
        else if( this._equality( k, key ) ) {
            break;
        }

        bucketIndex = ( 1 + bucketIndex ) & capacity;
    }

    var entryIndex = bucketIndex;
    var ret = buckets[ ( bucketIndex << 1 ) + 1 ];

    buckets[ ( bucketIndex << 1 ) ] =
        buckets[ ( bucketIndex << 1 ) + 1 ] = void 0;

    this._modCount++;

    while( true ) {
        entryIndex = ( 1 + entryIndex ) & capacity;

        var slotKey = buckets[ entryIndex << 1 ];

        if( slotKey === void 0 ) {
            break;
        }

        var k = hash( slotKey, capacity + 1 );

        if ( ( bucketIndex <= entryIndex ) ?
            ( ( bucketIndex < k ) && ( k <= entryIndex ) ) :
            ( ( bucketIndex < k ) || ( k <= entryIndex ) ) ) {
            continue;
        }

        buckets[ ( bucketIndex << 1 ) ] = buckets[ ( entryIndex << 1 ) ];
        buckets[ ( bucketIndex << 1 ) + 1 ] =
            buckets[ ( entryIndex << 1 ) + 1 ];

        bucketIndex = entryIndex;

        buckets[ ( bucketIndex << 1 ) ] =
            buckets[ ( bucketIndex << 1 ) + 1 ] = void 0;
    }

    this._size--;
    return ret;
};

/**
 * Insert the given key-value pairs into the map. Can be given in the form
 * of an array of tuples, another Map, or an Object which will be
 * reflectively iterated over for string keys.
 *
 * Array of tuples example:
 *
 * map.setAll([
 *      [0, "zero"],
 *      [5, "five"],
 *      [10, "ten"],
 *      [13, "thirteen"]
 * ]);
 *
 * The array of tuples syntax supports all types of keys, not just strings.
 *
 * @param {Array.<Tuple>|Map|Object} obj Description of obj parameter.
 * @return {void}
 *
 */
method.putAll = method.setAll = function setAll( obj ) {
    this._modCount++;
    var listOfTuples = toListOfTuples( obj );
    this._setAll( listOfTuples );
};

/**
 * Remove everything in the map.
 *
 * @return {void}
 *
 */
method.clear = function clear() {
    this._modCount++;
    this._capacity = DEFAULT_CAPACITY;
    this._size = 0;
    this._makeBuckets();
};

/**
 * Returns the amount of items in the map.
 *
 * @return {int}
 *
 */
method.length = method.size = function size() {
    return this._size;
};

/**
 * See if the map doesn't contain anything.
 *
 * @return {boolean}
 *
 */
method.isEmpty = function isEmpty() {
    return this._size === 0;
};

/**
 * Automatically called by JSON.stringify. If you later parse the JSON
 * you can pass the array of tuples to a map constructor.
 *
 * @return {Array.<Tuple>}
 *
 */
method.toJSON = MapToJSON;

/**
 * Returns a string representation of the map.
 *
 * @return {String}
 *
 */
method.toString = MapToString;

/**
 * Returns a hash code for the map.
 *
 * @return {int}
 *
 */
method.valueOf = MapValueOf;

/**
 * Returns the keys in the map as an array.
 *
 * Iteration can be very slow in an unordered map.
 *
 * @return {Array.<dynamic>}
 *
 */
method.keys = MapKeys;

/**
 * Returns the values in the map as an array.
 *
 * Iteration can be very slow in an unordered map.
 *
 * @return {Array.<dynamic>}
 *
 */
method.values = MapValues;

/**
 * Returns the key-value pairs in the map as an array of tuples.
 *
 * Iteration can be very slow in an unordered map.
 *
 * @return {Array.<Tuple>}
 *
 */
method.entries = MapEntries;

/**
 * Returns an Iterator for the map. The iterator will become invalid
 * if the map is modified outside that iterator.
 *
 * Iteration can be very slow in an unordered map.
 *
 * @return {MapIterator}
 *
 */
method.iterator = function iterator() {
    return new Iterator( this );
};

var Iterator = (function() {
    /**
     * Iterator constructor for the unordered map.
     *
     * If the iterator cursor is currently pointing at a valid
     * entry, you can retrieve the entry's key, value and index
     * from the iterator .key, .value and .index properties
     * respectively.
     *
     * For performance, they are just simple properties but
     * they are meant to be read-only.
     *
     * You may reset the cursor at no cost to the beginning (
     * .moveToStart()) or to the end (.moveToEnd()).
     *
     * You may move the cursor one item forward (.next())
     * or backward (.prev()).
     *
     * Example:
     *
     * var it = map.iterator();
     *
     * while( it.next() ) {
     *      console.log( it.key, it.value, it.index );
     * }
     * //Cursor is now *after* the last entry
     * while( it.prev() ) { //Iterate backwards
     *      console.log( it.key, it.value, it.index );
     * }
     * //Cursor is now *before*the first entry
     *
     * Iteration can be very slow in an unordered map.
     *
     * @param {Map} map Description of map parameter.
     * @constructor
     */
    function Iterator( map ) {
        this.key = this.value = void 0;
        this.index = -1;
        this._modCount = map._modCount;

        this._indexDelta = 1;
        this._index = -1;
        this._map = map;
        this._bucketIndex = -1;
    }
    var method = Iterator.prototype;

    /**
     * Internal
     *
     * @return {void}
     *
     */
    method._checkModCount = MapIteratorCheckModCount;

    /**
     * Internal.
     *
     * @return {void}
     *
     */
    method._moveToNextBucketIndex = function _moveToNextBucketIndex() {
        var i = ( this._bucketIndex << 1 ) + ( this._indexDelta << 1 ),
            b = this._map._buckets,
            l = b.length;

        for( ; i < l; i += 2 ) {
            if( b[i] !== void 0 ) {
                this.key = b[i];
                this.value = b[i+1];
                this._bucketIndex = i >> 1;
                break;
            }
        }
    };

    /**
     * Internal.
     *
     * @return {void}
     *
     */
    method._moveToPrevBucketIndex = function _moveToPrevBucketIndex() {
        var i = ( this._bucketIndex << 1 ) - 2,
            b = this._map._buckets;

        for( ; i >= 0; i -= 2 ) {
            if( b[i] !== void 0 ) {
                this.key = b[i];
                this.value = b[i+1];
                this._bucketIndex = i >> 1;
                break;
            }
        }
    };

    //API

    /**
     * Move the cursor forward by one position. Returns true if the cursor is
     * pointing at a valid entry. Returns false otherwise.
     *
     * @return {boolean}
     *
     */
    method.next = function next() {
        this._checkModCount();
        this._index += this._indexDelta;

        if( this._index >= this._map._size ) {
            this.moveToEnd();
            return false;
        }

        this._moveToNextBucketIndex();
        this.index = this._index;
        this._indexDelta = 1;

        return true;
    };

    /**
     * Move the cursor backward by one position. Returns true if the cursor is
     * pointing at a valid entry. Returns false otherwise.
     *
     * @return {boolean}
     *
     */
    method.prev = function prev() {
        this._checkModCount();
        this._index--;

        if( this._index < 0 ||
            this._map._size === 0 ) {
            this.moveToStart();
            return false;
        }

        this._moveToPrevBucketIndex();
        this.index = this._index;

        this._indexDelta = 1;

        return true;
    };

    /**
     * Move the cursor before the first entry. The cursor is not
     * pointing at a valid entry, you may move to the first entry after
     * calling this method by calling .next().
     *
     * This method operates in constant time.
     *
     * @return {MapIterator}
     *
     */
    method.moveToStart = function moveToStart() {
        this._checkModCount();
        this.key = this.value = void 0;
        this.index = -1;
        this._index = -1;
        this._bucketIndex = -1;
        this._indexDelta = 1;

        return this;
    };

    /**
     * Move the cursor after the last entry. The cursor is not pointing at
     * a valid entry, you may move to the last entry after calling this
     * method by calling .prev().
     *
     * This method operates in constant time.
     *
     * @return {MapIterator}
     *
     */
    method.moveToEnd = function moveToEnd() {
        this._checkModCount();
        this.key = this.value = void 0;
        this._index = this._map._size;
        this.index = -1;
        this._bucketIndex = this._map._capacity;
        this._indexDelta = 1;

        return this;
    };

    /**
     * If the cursor is pointing at a valid entry, you may update
     * the entry's value with this method without invalidating
     * the iterator.
     *
     * An iterator becomes invalid if the map is modified behind
     * its back.
     *
     * You may call this method multiple times while the cursor
     * is pointing at the same entry, with each call replacing the
     * last call's value for the key.
     *
     * Returns the previous value that was associated with the key.
     * Returns undefined if the cursor was not pointing at an entry.
     *
     * @param {dynamic} value The value to associate
     * with the current cursor's key in the map.
     * @return {dynamic}
     * @return {void}
     *
     */
    method.set = method.put = function put( value ) {
        this._checkModCount();
        var i = this._bucketIndex;

        if( i < 0 || i >= this._map._capacity ) {
            return;
        }

        var ret = this.value;
        this._map._buckets[ ( i << 1 ) + 1 ] = this.value = value;
        return ret;
    };

    /**
     * If the cursor is pointing at a valid entry, you may delete
     * the entry's associated key-value mapping from the map with
     * this method without invalidating the iterator.
     *
     * An iterator becomes invalid if the map is modified behind
     * its back.
     *
     * After successfully calling this method (deletion happend),
     * the cursor does not point at anything. After deletion, you
     * may move the cursor normally with the cursor traversal
     * methods.
     *
     * If deletion happened, returns the value that was associated
     * with the deleted key. Returns undefined otherwise.
     *
     * @return {dynamic}
     * @return {void}
     *
     */
    method["delete"] = method.remove = method.unset = function remove() {
        this._checkModCount();

        var i = this._bucketIndex;

        if( i < 0 || i >= this._map._capacity ||
            this.key === void 0 ) {
            return;
        }

        var ret = this._map.remove( this.key );
        this._modCount = this._map._modCount;
        this.key = this.value = void 0;
        this.index = -1;

        this._indexDelta = 0;

        return ret;
    };

    return Iterator;
})();

method._Iterator = Iterator;


return Map;})();;
/* global MapIteratorCheckModCount, DEFAULT_CAPACITY, isArray,
    pow2AtLeast, hash, equality */
/* exported OrderedMap */
var OrderedMap = (function() {

var INSERTION_ORDER = OrderedMap._INSERTION_ORDER = {};
var ACCESS_ORDER = OrderedMap._ACCESS_ORDER = {};

/**
 * Constructor for ordered maps. Ordered map is like map except
 * it has an inherent order. The inherent order is by default
 * the order entries are inserted into the map.
 *
 * You may use OrderedMap.inAccessOrder() constructor to construct
 * an ordered map that is ordered according to access order. Any
 * access will bump the target entry at the end of the map.
 *
 * Compared to Map, OrderedMap is less memory efficient,
 * lookup is slightly slower but iteration is faster.
 *
 * The undefined value is not supported as a key nor as a value. Use
 * null instead.
 *
 * Ordering gives a meaning to operations like firstKey, firstValue,
 * lastKey, lastValue, nthKey, nthValue, indexOfKey, indexOfValue and so on.
 *
 * Deletion of an entry doesn't affect order of other entries
 * in either ordering mode.
 *
 * Array of tuples initialization:
 *
 * var map = OrderedMap([
 *      [0, "zero"],
 *      [5, "five"],
 *      [10, "ten"],
 *      [13, "thirteen"]
 * ]);
 *
 * @param {int=|Object=|Array.<Tuple>|Map} capacity The initial capacity.
 * Can also be a object, array of tuples or another map to initialize
 * the ordered map.
 * @constructor
 */
function OrderedMap( capacity ) {
    this._buckets = null;
    this._size = 0;
    this._modCount = 0;
    this._capacity = DEFAULT_CAPACITY;
    this._equality = equality.simpleEquals;
    this._usingSimpleEquals = true;
    this._ordering = INSERTION_ORDER;
    this._firstEntry = this._lastEntry = null;
    this._init( capacity );
}
var method = OrderedMap.prototype;

/**
 * Constructs an ordered map that is ordered according
 * to accesses.
 * @param {int=|Object=|Array.<Tuple>|Map} capacity The initial capacity.
 * Can also be a object, array of tuples or another map to initialize
 * the ordered map.
 */
OrderedMap.inAccessOrder = function inAccessOrder( capacity ) {
    var ret = new OrderedMap( capacity );
    ret._ordering = ACCESS_ORDER;
    return ret;
};

/**
 * Internal.
 *
 *
 */
method._init = Map.prototype._init;

/**
 * Internal.
 *
 *
 */
method._checkEquals = Map.prototype._checkEquals;

/**
 * Internal.
 *
 *
 */
method._resizeTo = Map.prototype._resizeTo;

/**
 * Internal.
 *
 *
 */
method._getNextCapacity = Map.prototype._getNextCapacity;

/**
 * Internal.
 *
 *
 */
method._isOverCapacity = Map.prototype._isOverCapacity;

/**
 * Internal.
 *
 *
 */
method._checkResize = Map.prototype._checkResize;

/**
 * Internal.
 *
 *
 */
method._resized = function _resized() {
    var newBuckets = this._buckets,
        entry = this._firstEntry;

    while( entry !== null ) {
        var bucketIndex = this._keyAsBucketIndex( entry.key );

        entry.next = newBuckets[bucketIndex];
        newBuckets[bucketIndex] = entry;

        entry = entry.nextEntry;
    }
};

/**
 * Internal.
 *
 *
 */
method._makeBuckets = function _makeBuckets() {
    var capacity = this._capacity;
    var b = this._buckets = new Array( capacity < 10000 ? capacity : 0 );

    for( var i = 0; i < capacity; ++i ) {
        b[i] = null;
    }
};

/**
 * Internal.
 *
 *
 */
method._keyAsBucketIndex = function _keyAsBucketIndex( key ) {
    if( this._buckets === null ) {
        this._makeBuckets();
    }
    return hash( key, this._capacity );
};

/**
 * Internal.
 *
 *
 */
method._getEntryWithKey = function _getEntryWithKey( entry, key ) {
    var eq = this._equality;
    while( entry !== null ) {
        if( eq( entry.key, key ) ) {
            return entry;
        }
        entry = entry.next;
    }
    return null;
};

/**
 * Internal.
 *
 *
 */
                        //Used by OrderedSet
method._setAll = function _setAll( obj, __value ) {
    if( !obj.length ) {
        return;
    }
    var newSize = obj.length + this._size;

    if( this._isOverCapacity( newSize ) ) {
        var capacity = pow2AtLeast( newSize );
        if( ( ( newSize << 2 ) - newSize ) >= ( capacity << 1 ) ) {
            capacity = capacity << 1;
        }
        this._resizeTo( capacity );
    }

    if( arguments.length > 1 ) {
        for( var i = 0; i < obj.length; ++i ) {
            this.set( obj[i], __value );
        }
    }
    else {
        for( var i = 0; i < obj.length; ++i ) {
            this.set( obj[i][0], obj[i][1] );
        }
    }
};

//API

/**
 * Simple way to iterate the map. The callback fn receives arguments:
 *
 * {dynamic} value, {dynamic} key, {integer} index
 *
 * @param {function} fn Description of fn parameter.
 * @param {Object=} ctx Description of ctx parameter.
 * @return {void}
 *
 */
method.forEach = Map.prototype.forEach;

/**
 * Returns the amount of items in the map.
 *
 * @return {int}
 *
 */
method.length = method.size = Map.prototype.size;

/**
 * See if the map doesn't contain anything.
 *
 * @return {boolean}
 *
 */
method.isEmpty = Map.prototype.isEmpty;

/**
 * Automatically called by JSON.stringify. If you later parse the JSON
 * you can pass the array of tuples to a map constructor.
 *
 * @return {Array.<Tuple>}
 *
 */
method.toJSON = Map.prototype.toJSON;

/**
 * Returns a string representation of the map.
 *
 * @return {String}
 *
 */
method.toString = Map.prototype.toString;

/**
 * Returns a hash code for the map.
 *
 * @return {int}
 *
 */
method.valueOf = Map.prototype.valueOf;

/**
 * Returns the keys in the map as an array.
 *
 * @return {Array.<dynamic>}
 *
 */
method.keys = Map.prototype.keys;

/**
 * Returns the values in the map as an array.
 *
 * @return {Array.<dynamic>}
 *
 */
method.values = Map.prototype.values;

/**
 * Returns the key-value pairs in the map as an array of tuples.
 *
 * Iteration can be very slow in an unordered map.
 *
 * @return {Array.<Tuple>}
 *
 */
method.entries = Map.prototype.entries;

/**
 * Insert the given key-value pairs into the map. Can be given in the form
 * of an array of tuples, another Map, or an Object which will be
 * reflectively iterated over for string keys.
 *
 * Array of tuples example:
 *
 * map.setAll([
 *      [0, "zero"],
 *      [5, "five"],
 *      [10, "ten"],
 *      [13, "thirteen"]
 * ]);
 *
 * The array of tuples syntax supports all types of keys, not just strings.
 *
 * @param {Array.<Tuple>|Map|Object} obj Description of obj parameter.
 * @return {void}
 *
 */
method.putAll = method.setAll = Map.prototype.putAll;

/**
 * See if the key is contained in the map.
 *
 * @param {dynamic} key The key to lookup.
 * @return {boolean}
 *
 */
method.containsKey = method.hasKey = Map.prototype.hasKey;

/**
 * Returns a shallow clone of the ordered map.
 *
 * @return {OrderedMap}
 *
 */
method.clone = function clone() {
    if( this._ordering === ACCESS_ORDER ) {
        return OrderedMap.inAccessOrder( this.entries() );
    }
    else {
        return new OrderedMap( this.entries() );
    }
};

/**
 * Associate a value with a key. If the key is already in the
 * map, that key is updated with the given value. Otherwise a
 * new entry is added.
 *
 * If a value was updated, returns the old value. If the key was
 * inserted into the map, returns undefined.
 *
 * The undefined value is not supported as a key nor as a value. Use
 * null instead.
 *
 * @param {dynamic} key The key to associate with value.
 * @param {dynamic} value The value to associate with key.
 * @return {dynamic}
 * @return {void}
 * @throws {Error} When key or value is undefined
 *
 */
method.put = method.set = function put( key, value ) {
    if( key === void 0 || value === void 0) {
        throw new Error( "Cannot use undefined as a key or value" );
    }
    if( isArray( key ) ) {
        this._checkEquals();
    }
    var bucketIndex = this._keyAsBucketIndex( key ),
        ret = void 0,
        oldEntry = this._buckets[bucketIndex],
        entry = this._getEntryWithKey( oldEntry, key );

    this._modCount++;
    if( entry === null ) {
        this._size++;
        this._buckets[ bucketIndex ] = entry =
            new Entry( key, value, oldEntry );

        entry.inserted( this );
        this._checkResize();
    }
    else {
        ret = entry.value;
        entry.value = value;
        entry.accessed( this );
    }

    return ret;
};

/**
 * Removes a value associated with the given key in the map. If the
 * key is not in the map, returns undefined. If the key is in the map,
 * returns the value associated with the key.
 *
 * You can check if the removal was successful by checking
 *
 * map.remove( myKey ) !== void 0
 *
 * The undefined value as a key or value is not supported. Use null instead.
 *
 * @param {dynamic} key The key to remove from the map.
 * @return {dynamic}
 * @return {void}
 *
 */
method["delete"] = method.unset = method.remove = function remove( key ) {
    if( key === void 0 ) {
        return void 0;
    }
    var bucketIndex = this._keyAsBucketIndex( key ),
        ret = void 0,
        entry = this._buckets[bucketIndex],
        eq = this._equality,
        prevEntry = null;

    var eq = this._equality;

    //Find the entry in the bucket
    while( entry !== null ) {
        if( eq( entry.key, key ) ) {
            break;
        }
        prevEntry = entry;
        entry = entry.next;
    }

    //It was found in the bucket, remove
    if( entry !== null ) {
        this._modCount++;
        ret = entry.value;
        if( prevEntry === null) { //It was the first entry in the bucket
            this._buckets[bucketIndex] = entry.next;
        }
        else {
            prevEntry.next = entry.next;
        }
        this._size--;
        entry.removed( this );
    }
    return ret;
};

/**
 * Get the value associated with the given key in this map.
 *
 * Returns undefined if not found.
 *
 * Key cannot be undefined. Use null instead.
 *
 * @param {dynamic} key The key to lookup value for.
 * @return {dynamic}
 * @return {void}
 *
 */
method.get = function get( key ) {
    if( key === void 0 ) {
        return void 0;
    }
    var bucketIndex = this._keyAsBucketIndex( key ),
        entry = this._getEntryWithKey( this._buckets[bucketIndex], key );

    if( entry !== null ) {
        entry.accessed( this );
        return entry.value;
    }
    return void 0;
};

/**
 * See if the value is contained in the map.
 *
 * @param {dynamic} value The value to lookup.
 * @return {boolean}
 *
 */
method.containsValue = method.hasValue = function hasValue( value ) {
    return this.indexOfValue( value ) !== -1;
};

/**
 * Find the zero-based index of the key in the map. O(n).
 *
 * Returns -1 if the key is not in the map.
 *
 * Key cannot be undefined. Use null instead.
 *
 * @param {dynamic} key The key to lookup index for.
 * @return {int}
 *
 */
method.indexOfKey = function indexOfKey( key ) {
    if( this._firstEntry === null ) {
        return -1;
    }
    var eq = this._equality,
        entry = this._firstEntry,
        i = 0;

    while( entry !== null ) {
        if( eq( entry.key, key ) ) {
            return i;
        }
        i++;
        entry = entry.nextEntry;
    }
    return -1;
};

/**
 * Find the zero-based index of the value in the map. O(n).
 *
 * Returns -1 if the value is not in the map.
 *
 * @param {dynamic} value The value to lookup index for.
 * @return {int}
 *
 */
method.indexOfValue = function indexOfValue( value ) {
    if( this._firstEntry === null ) {
        return -1;
    }
    var entry = this._firstEntry,
        i = 0;

    while( entry !== null ) {
        if( entry.value === value ) {
            return i;
        }
        i++;
        entry = entry.nextEntry;
    }
    return -1;
};

/**
 * Returns the first key in the map. Returns
 * undefined if the map is empty. O(1).
 *
 * @return {dynamic}
 *
 */
method.firstKey = function firstKey() {
    if( this._firstEntry === null ) {
        return void 0;
    }
    return this._firstEntry.key;
};

/**
 * Returns the first value in the map. Returns
 * undefined if the map is empty. O(1).
 *
 * @return {dynamic}
 *
 */
method.first = function first() {
    return this.get( this.firstKey() );
};

/**
 * Returns the last key in the map. Returns
 * undefined if the map is empty. O(1).
 *
 * @return {dynamic}
 *
 */
method.lastKey = function lastKey( ) {
    if( this._firstEntry === null ) {
        return void 0;
    }

    return this._lastEntry.key;
};

/**
 * Returns the last value in the map. Returns
 * undefined if the map is empty. O(1).
 *
 * @return {dynamic}
 *
 */
method.last = function last() {
    return this.get( this.lastKey() );
};

/**
 * Returns the nth key (0-based) in the map. Returns
 * undefined if the index is out of bounds. O(N).
 *
 * @return {dynamic}
 *
 */
method.nthKey = function nthKey( index ) {
    if( index < 0 || index >= this._size ) {
        return void 0;
    }
    var entry = this._firstEntry;
    var i = 0;
    while( i < index ) {
        entry = entry.nextEntry;
        i++;
    }
    return entry.key;
};

/**
 * Returns the nth value (0-based) in the map. Returns
 * undefined if the index is out of bounds. O(N).
 *
 * @return {dynamic}
 *
 */
method.nth = method.nthValue = function nth( index ) {
    return this.get( this.nthKey( index ) );
};


/**
 * Remove everything in the map.
 *
 * @return {void}
 *
 */
method.clear = function clear() {
    this._modCount++;
    this._capacity = DEFAULT_CAPACITY;
    this._size = 0;
    this._firstEntry = this._lastEntry = null;
    this._makeBuckets();
};

/**
 * Returns an Iterator for the map. The iterator will become invalid
 * if the map is modified outside the iterator's methods.
 *
 * @return {MapIterator}
 *
 */
method.iterator = function iterator() {
    return new Iterator( this );
};

var Iterator = (function() {


    /**
     * Iterator constructor for the ordered map.
     *
     * If the iterator cursor is currently pointing at a valid
     * entry, you can retrieve the entry's key, value and index
     * from the iterator .key, .value and .index properties
     * respectively.
     *
     * For performance, they are just simple properties but
     * they are meant to be read-only.
     *
     * You may reset the cursor at no cost to the beginning (
     * .moveToStart()) or to the end (.moveToEnd()).
     *
     * You may move the cursor one item forward (.next())
     * or backward (.prev()).
     *
     * Example:
     *
     * var it = map.iterator();
     *
     * while( it.next() ) {
     *      console.log( it.key, it.value, it.index );
     * }
     * //Cursor is now *after* the last entry
     * while( it.prev() ) { //Iterate backwards
     *      console.log( it.key, it.value, it.index );
     * }
     * //Cursor is now *before*the first entry
     *
     *
     * @param {OrderedMap} map Description of map parameter.
     * @constructor
     */
    function Iterator( map ) {
        this.key = this.value = void 0;
        this.index = -1;
        this._modCount = map._modCount;

        this._index = -1;
        this._map = map;
        this._backingEntry = null;
        this._currentEntry = null;
    }
    var method = Iterator.prototype;

    /**
     * Internal.
     *
     *
     */
    method._checkModCount = MapIteratorCheckModCount;

    /**
     * Internal.
     *
     *
     */
    method._getNextEntry = function _getNextEntry() {
        if( this._backingEntry !== null ) {
            var ret = this._backingEntry;
            this._backingEntry = null;
            this._index--;
            return ret;
        }
        if( this._currentEntry === null ) {
            return this._map._firstEntry;
        }
        else {
            return this._currentEntry.nextEntry;
        }
    };

    /**
     * Internal.
     *
     *
     */
    method._getPrevEntry = function _getPrevEntry() {
        if( this._backingEntry !== null ) {
            var ret = this._backingEntry;
            this._backingEntry = null;
            return ret.prevEntry;
        }
        if( this._currentEntry === null ) {
            return this._map._lastEntry;
        }
        else {
            return this._currentEntry.prevEntry;
        }
    };

    /**
     * Move the cursor forward by one position. Returns true if the cursor is
     * pointing at a valid entry. Returns false otherwise.
     *
     * @return {boolean}
     *
     */
    method.next = function next() {
        this._checkModCount();
        this._index++;

        if( this._backingEntry === null &&
            this._index >= this._map._size ) {
            this.moveToEnd();
            return false;
        }

        var entry = this._currentEntry = this._getNextEntry();

        this.key = entry.key;
        this.value = entry.value;
        this.index = this._index;

        return true;
    };

    /**
     * Move the cursor backward by one position. Returns true if the cursor is
     * pointing at a valid entry. Returns false otherwise.
     *
     * @return {boolean}
     *
     */
    method.prev = function prev() {
        this._checkModCount();
        this._index--;

        if( this._index < 0 ||
            this._map._size === 0 ) {
            this.moveToStart();
            return false;
        }
        var entry = this._currentEntry = this._getPrevEntry();

        this.key = entry.key;
        this.value = entry.value;
        this.index = this._index;


        return true;
    };

    /**
     * Move the cursor before the first entry. The cursor is not
     * pointing at a valid entry, you may move to the first entry after
     * calling this method by calling .next().
     *
     * This method operates in constant time.
     *
     * @return {MapIterator}
     *
     */
    method.moveToStart = function moveToStart() {
        this._checkModCount();
        this.key = this.value = void 0;
        this.index = -1;
        this._index = -1;
        this._backingEntry = this._currentEntry = null;

        return this;
    };

    /**
     * Move the cursor after the last entry. The cursor is not pointing at
     * a valid entry, you may move to the last entry after calling this
     * method by calling .prev().
     *
     * This method operates in constant time.
     *
     * @return {MapIterator}
     *
     */
    method.moveToEnd = function moveToEnd() {
        this._checkModCount();
        this.key = this.value = void 0;
        this._index = this._map._size;
        this.index = -1;
        this._backingEntry = this._currentEntry = null;

        return this;
    };

    /**
     * If the cursor is pointing at a valid entry, you may update
     * the entry's value with this method without invalidating
     * the iterator.
     *
     * An iterator becomes invalid if the map is modified behind
     * its back.
     *
     * You may call this method multiple times while the cursor
     * is pointing at the same entry, with each call replacing the
     * last call's value for the key.
     *
     * Returns the previous value that was associated with the key.
     * Returns undefined if the cursor was not pointing at an entry.
     *
     * @param {dynamic} value The value to associate
     * with the current cursor's key in the map.
     * @return {dynamic}
     * @return {void}
     *
     */
    method.set = method.put = function put( value ) {
        this._checkModCount();

        if( this._currentEntry === null ) {
            return;
        }

        var ret = this.value;
        this._currentEntry.value = this.value = value;
        return ret;
    };

    /**
     * If the cursor is pointing at a valid entry, you may delete
     * the entry's associated key-value mapping from the map with
     * this method without invalidating the iterator.
     *
     * An iterator becomes invalid if the map is modified behind
     * its back.
     *
     * After successfully calling this method (deletion happend),
     * the cursor does not point at anything. After deletion, you
     * may move the cursor normally with the cursor traversal
     * methods.
     *
     * If deletion happened, returns the value that was associated
     * with the deleted key. Returns undefined otherwise.
     *
     * @return {dynamic}
     * @return {void}
     *
     */
    method["delete"] = method.remove = function remove() {
        this._checkModCount();

        if( this._currentEntry === null ) {
            return;
        }
        var entry = this._currentEntry,
            backingEntry,
            ret = entry.value;

        backingEntry = this._backingEntry = entry.nextEntry;

        this._map.remove( this.key );
        this._modCount = this._map._modCount;
        this.key = this.value = void 0;
        this.index = -1;

        if( backingEntry === null ) {
            this.moveToEnd();
        }

        return ret;
    };


    return Iterator;
})();

method._Iterator = Iterator;

var Entry = (function() {

    /**
     * Ordered maps use separate chaining with linked lists
     * to maintain reasonable performance.
     *
     * @constructor
     *
     */
    function Entry( key, value, next ) {
        this.key = key;
        this.value = value;
        this.next = next;

        this.prevEntry = this.nextEntry = null;
    }
    var method = Entry.prototype;

    /**
     * When an entry is inserted, it should be placed
     * at the end for both access order and insert orderd
     * maps.
     *
     * @param {OrderedMap} map The map this entry was inserted
     * into.
     * @return {void}
     *
     */
    method.inserted = function inserted( map ) {
        if( map._firstEntry === null ) {
            map._firstEntry = map._lastEntry = this;
        }
        else if( map._firstEntry === map._lastEntry ) {
            map._lastEntry = this;
            map._firstEntry.nextEntry = this;
            this.prevEntry = map._firstEntry;
        }
        else {
            var last = map._lastEntry;
            map._lastEntry = this;
            last.nextEntry = this;
            this.prevEntry = last;
        }
    };

    /**
     * When an entry is removed, bookkeeping within the map's
     * backing linked list needs to be performed.
     *
     * @param {OrderedMap} map The map this entry was removed
     * from.
     * @return {void}
     */
    method.removed = function removed( map ) {
        var prev = this.prevEntry,
            next = this.nextEntry,
            prevIsNull = prev === null,
            nextIsNull = next === null;

        this.prevEntry = this.nextEntry =
            this.key = this.value = this.next = null;

        if( prevIsNull && nextIsNull ) {
            map._firstEntry = map._lastEntry = null;
        }
        else if( nextIsNull ) {
            map._lastEntry = prev;
            map._lastEntry.nextEntry = null;
        }
        else if( prevIsNull ) {
            map._firstEntry = next;
            map._firstEntry.prevEntry = null;
        }
        else {
            next.prevEntry = prev;
            prev.nextEntry = next;
        }
    };

    /**
     * When an entry is accessed (get or value update), ordered maps
     * using access order have to move the entry to the back.
     *
     * @param {OrderedMap} map The map this entry was accessed in.
     * @return {void}
     */
    method.accessed = function accessed( map ) {
        if( map._ordering === ACCESS_ORDER &&
            map._firstEntry !== null &&
            map._firstEntry !== map._lastEntry &&
            map._lastEntry !== this ) {
            var prev = this.prevEntry,
                next = this.nextEntry;

            if( prev !== null ) {
                prev.nextEntry = next;
            }
            else {
                map._firstEntry = next;
            }
            next.prevEntry = prev;

            var last = map._lastEntry;

            this.nextEntry = null;
            this.prevEntry = last;
            last.nextEntry = this;
            map._lastEntry = this;
        }
    };

    return Entry;
})();

return OrderedMap;})();;
/* global toListOfTuples, MapForEach, RedBlackTree, defaultComparer,
    MapValueOf, MapEntries, MapKeys, MapValues, MapToString, MapToJSON */
var SortedMap = (function() {
    var method = SortedMap.prototype;

    function SortedMap( keyValues, comparator ) {
        this._tree = null;
        this._init( keyValues, comparator );
    }

    method._init = function _init( keyValues, comparator ) {
        if( typeof keyValues === "function" ) {
            var tmp = comparator;
            comparator = keyValues;
            keyValues = tmp;
        }

        if( typeof comparator !== "function" ) {
            comparator = defaultComparer;
        }

        this._tree = new RedBlackTree( comparator );

        if( typeof keyValues === "object" ) {
            this._setAll( toListOfTuples( keyValues ) );
        }
    };

    method._setAll = function _setAll( items ) {
        for( var i = 0, l = items.length; i < l; ++i ) {
            this.set( items[i][0], items[i][1] );
        }
    };
    //API
    method.forEach = MapForEach;

    method.getComparator = function getComparator() {
        return this._tree.getComparator();
    };

    method.clone = function clone() {
        return new SortedMap( this.entries(), this.comparator );
    };

    method.clear = function clear() {
        this._tree.clear();
        return this;
    };

    method.put = method.set = function set( key, value ) {
        return this._tree.set( key, value );
    };

    method.putAll = method.setAll = function setAll( arr ) {
        var items = toListOfTuples( arr );
        this._setAll( items );
        return this;
    };

    method["delete"] = method.remove = method.unset = function unset( key ) {
        var ret = this._tree.unset( key );
        return ret ? ret.getValue() : ret;
    };

    method.get = function get( key ) {
        var node = this._tree.nodeByKey(key);
        if( !node ) {
            return void 0;
        }
        return node.getValue();
    };

    method.containsKey = method.hasKey = function hasKey( key ) {
        return !!this._tree.nodeByKey( key );
    };

    method.containsValue = method.hasValue = function hasValue( value ) {
        var it = this.iterator();

        while( it.next() ) {
            if( it.value === value ) {
                return true;
            }
        }
        return false;
    };

    method.first = function first() {
        return this.get( this.firstKey() );
    };

    method.last = function last() {
        return this.get( this.lastKey() );
    };

    method.nth = function nth( index ) {
        return this.get( this.nthKey( index ) );
    };

    method.nthKey = function nthKey( index ) {
        var node = this._tree.nodeByIndex(index);
        if( !node ) {
            return void 0;
        }
        return node.key;
    };

    method.firstKey = function firstKey() {
        var first = this._tree.firstNode();

        if( !first ) {
            return void 0;
        }
        return first.key;
    };

    method.lastKey = function lastKey() {
        var last = this._tree.lastNode();

        if( !last) {
            return void 0;
        }
        return last.key;
    };

    method.size = method.length = function length() {
        return this._tree.size();
    };

    method.isEmpty = function isEmpty() {
        return this._tree.size() === 0;
    };

    method.keys = MapKeys;

    method.values = MapValues;

    method.entries = MapEntries;

    method.iterator = function iterator() {
        return this._tree.iterator();
    };

    method.toJSON = MapToJSON;

    method.toString = MapToString;

    method.valueOf = MapValueOf;

    return SortedMap;
})();;
/* global toList, SetForEach,
    SetToJSON, SetToString, SetValueOf, SetIteratorCheckModCount,
    hash, MapValues, isArray, pow2AtLeast,
    clampCapacity, equality, DEFAULT_CAPACITY, LOAD_FACTOR */
/* exported Set */
/* jshint -W079 */
var Set = (function() {
/**
 * Constructor for sets. Set is a unique collection of values, without
 * any ordering. It is not backed by a map and the memory usage is thus
 * incredibly low.
 *
 * The undefined value is not supported as a value. Use
 * null instead.
 *
 * If ordering is needed consider OrderedSet or SortedSet.
 *
 * @param {int=|Array.<dynamic>|Set} capacity The initial capacity.
 * Can also be an array or another set to initialize the set.
 * @constructor
 */
function Set( capacity ) {
    this._buckets = null;
    this._size = 0;
    this._modCount = 0;
    this._capacity = DEFAULT_CAPACITY;
    this._equality = equality.simpleEquals;
    this._usingSimpleEquals = true;
    this._init( capacity );
}
var method = Set.prototype;

/**
 * Internal.
 *
 * @param {int=} capacity Description of capacity parameter.
 * @return {void}
 *
 */
method._init = function _init( capacity ) {
    if( capacity == null ) {
        this._makeBuckets();
        return;
    }

    switch( typeof capacity ) {
    case "number":
        this._capacity =
            clampCapacity( pow2AtLeast( capacity / LOAD_FACTOR ) );
        this._makeBuckets();
        break;
    case "object":
        var items = toList( capacity );
        var size = items.length;
        this._capacity = pow2AtLeast( size / LOAD_FACTOR );
        this._makeBuckets();
        this._addAll( items );
        break;
    default:
        this._makeBuckets();
    }
};

/**
 * Internal.
 *
 * @return {void}
 *
 */
method._checkEquals = Map.prototype._checkEquals;

/**
 * Internal.
 *
 * @return {void}
 *
 */
method._resizeTo = Map.prototype._resizeTo;

/**
 * Internal.
 *
 * @return {void}
 *
 */
method._getNextCapacity = Map.prototype._getNextCapacity;

/**
 * Internal.
 *
 * @return {void}
 *
 */
method._isOverCapacity = Map.prototype._isOverCapacity;

/**
 * Internal.
 *
 * @return {void}
 *
 */
method._checkResize = Map.prototype._checkResize;

/**
 * Internal.
 *
 * @return {void}
 *
 */
method._makeBuckets = function _makeBuckets() {
    var length = this._capacity << 0;

    var b = this._buckets = new Array( length < 100000 ? length : 0 );

    for( var i = 0; i < length; ++i ) {
        b[i] = void 0;
    }

};

/**
 * Internal.
 *
 * @param {Array.<dynamic>} oldBuckets Description of oldBuckets parameter.
 * @return {void}
 *
 */
method._resized = function _resized( oldBuckets ) {
    var newBuckets = this._buckets,
        oldLength = oldBuckets.length;

    for( var i = 0; i < oldLength; i++ ) {

        var value = oldBuckets[i];
        if( value !== void 0) {
            var newIndex = hash( value, this._capacity );

            while( newBuckets[ newIndex ] !== void 0 ) {
                newIndex = ( this._capacity - 1 ) & ( newIndex + 1 );
            }
            newBuckets[ newIndex ] = oldBuckets[ i ];
            oldBuckets[ i ] = void 0;
        }
    }
};


/**
 * Internal.
 *
 * @param {Array.<dynamic>} obj Description of obj parameter.
 * @return {void}
 *
 */
method._addAll = function _addAll( obj ) {
    if( !obj.length ) {
        return;
    }
    var newSize = obj.length + this._size;

    if( this._isOverCapacity( newSize ) ) {
        var capacity = pow2AtLeast( newSize );
        if( ( ( newSize << 2 ) - newSize ) >= ( capacity << 1 ) ) {
            capacity <<= 1;
            if( capacity < 100000 ) {
                capacity <<= 1;
            }
        }
        this._resizeTo( capacity );
    }

    for( var i = 0; i < obj.length; ++i ) {
        this.add( obj[i] );
    }

};

//API
/**
 * Simple way to iterate the set. The callback fn receives arguments:
 *
 * {dynamic} value, {integer} index
 *
 * Iteration can be very slow in an unordered set.
 *
 * @param {function} fn Description of fn parameter.
 * @param {Object=} ctx Description of ctx parameter.
 * @return {void}
 *
 */
method.forEach = SetForEach;

/**
 * Returns a shallow clone of the set.
 *
 * @return {Set}
 *
 */
method.clone = function clone() {
    return new this.constructor(
        this.toArray()
    );
};

/**
 * Add a value into the set. If the value is already in the
 * set, returns false. Returns true otherwise.
 *
 * The undefined value is not supported as a value. Use
 * null instead.
 *
 * @param {dynamic} value The value to add into the set.
 * @return {boolean}
 * @throws {Error} When value is undefined
 *
 */
method.add = function add( value ) {
    if( value === void 0 ) {
        throw new Error( "Cannot use undefined as a value" );
    }
    if( isArray( value ) ) {
        this._checkEquals();
    }
    var bucketIndex = hash( value, this._capacity ),
        capacity = this._capacity - 1,
        buckets = this._buckets;
    while( true ) {
        var k = buckets[ bucketIndex ];

        if( k === void 0 ) {
            buckets[ bucketIndex ] = value;
            this._size++;
            this._checkResize();
            this._modCount++;
            return true;
        }
        else if( this._equality( k, value ) === true ) {
            return false;
        }

        bucketIndex = ( 1 + bucketIndex ) & capacity;
    }
};

/**
 * Removes the given value from the set. If the
 * value is not in the set, returns false. If the value is in the
 * set, the value is removed and true is returned;
 *
 * You can check if the removal was successful by checking
 *
 * set.remove( value ) === true
 *
 * The undefined value as a value is not supported. Use null instead.
 *
 * @param {dynamic} value The value to remove from the set.
 * @return {boolean}
 *
 */
//Linear probing with step of 1 can use
//the instant clean-up algorithm from
//http://en.wikipedia.org/wiki/Open_addressing
//instead of marking slots as deleted.
method["delete"] = method.remove = function remove( value ) {
    var bucketIndex = hash( value, this._capacity ),
        capacity = this._capacity - 1,
        buckets = this._buckets;
    while( true ) {
        var k = buckets[ bucketIndex ];

        if( k === void 0 ) {
            //value is not in table
            return false;
        }
        else if( this._equality( k, value ) ) {
            break;
        }

        bucketIndex = ( 1 + bucketIndex ) & capacity;
    }

    var entryIndex = bucketIndex;
    buckets[ bucketIndex ] = void 0;
    this._modCount++;

    while( true ) {
        entryIndex = ( 1 + entryIndex ) & capacity;

        var slotValue = buckets[ entryIndex ];

        if( slotValue === void 0 ) {
            break;
        }

        var k = hash( slotValue, capacity + 1 );

        if ( ( bucketIndex <= entryIndex ) ?
            ( ( bucketIndex < k ) && ( k <= entryIndex ) ) :
            ( ( bucketIndex < k ) || ( k <= entryIndex ) ) ) {
            continue;
        }

        buckets[ bucketIndex  ] = buckets[ entryIndex ];
        bucketIndex = entryIndex;
        buckets[ bucketIndex ] = void 0;
    }

    this._size--;
    return true;
};

/**
 * Insert the given values into the set. Can be given in the form
 * of an array or another Set.
 *
 *
 * @param {Array.<dynamic>|Set} items Description of items parameter.
 * @return {void}
 *
 */
method.addAll = function addAll( items ) {
    this._addAll( toList( items ) );
};

/**
 * Remove everything in the set.
 *
 * @return {void}
 *
 */
method.clear = Map.prototype.clear;

/**
 * Returns the set as an array.
 *
 * Iteration can be very slow in an unordered set.
 *
 * @return {Array.<dynamic>}
 *
 */
method.values = method.toArray = MapValues;

/**
 * See if the value is contained in this set.
 *
 * Value cannot be undefined.
 *
 * @param {dynamic} value The value to look up.
 * @return {boolean}
 *
 */
method.contains = function contains( value ) {
    var capacity = this._capacity,
        buckets = this._buckets,
        bucketIndex = hash( value, capacity );

    while( true ) {
        var k = buckets[ bucketIndex ];

        if( k === void 0 ) {
            return false;
        }
        else if( this._equality( k, value ) ) {
            return true;
        }
        bucketIndex = ( 1 + bucketIndex ) & ( capacity - 1 );
    }
};

/**
 * Returns the amount of items in the set.
 *
 * @return {int}
 *
 */
method.size = method.length = Map.prototype.size;

/**
 * See if the set doesn't contain anything.
 *
 * @return {boolean}
 *
 */
method.isEmpty = Map.prototype.isEmpty;

/**
 * See if this set is a proper subset of the argument set.
 *
 * @param {Set} set The argument set.
 * @return {boolean}
 *
 */
method.subsetOf = function subsetOf( set ) {
    var it = this.iterator();
    while( it.next() ) {
        if( !set.contains( it.value ) ) {
            return false;
        }
    }
    return this.size() !== set.size();
};

/**
 * See if this set is a proper superset of the argument set.
 *
 * @param {Set} set The argument set.
 * @return {boolean}
 *
 */
method.supersetOf = function supersetOf( set ) {
    return set.subsetOf( this );
};

/**
 * See if this set is fully contained in the argument set.
 *
 * @param {Set} set The argument set.
 * @return {boolean}
 *
 */
method.allContainedIn = function allContainedIn( set ) {
    var it = this.iterator();
    while( it.next() ) {
        if( !set.contains( it.value ) ) {
            return false;
        }
    }
    return true;
};

/**
 * See if this set is fully contains the argument set.
 *
 * @param {Set} set The argument set.
 * @return {boolean}
 *
 */
method.containsAll = function containsAll( set ) {
    return set.allContainedIn( this );
};

/**
 * Returns a hash code for the set.
 *
 * @return {int}
 *
 */
method.valueOf = SetValueOf;

/**
 * Returns a string representation of the set.
 *
 * @return {String}
 *
 */
method.toString = SetToString;

/**
 * Automatically called by JSON.stringify. If you later parse the JSON
 * you can pass the array to a set constructor.
 *
 * @return {Array.<dynamic>}
 *
 */
method.toJSON = SetToJSON;

/**
 * Returns the union of the argument set and this set. The returned
 * set will have all the members that appear in this set, the second
 * set or both.
 *
 * @param {Set} a The set to union this set with.
 * @return {Set}
 *
 */
method.union = function union( a ) {
    var ret = new this.constructor( ( this.size() + a.size() ) / 0.67 );

    var aHas, bHas,
        itA = this.iterator(),
        itB = a.iterator();

    while( true ) {
        if( aHas = itA.next() ) {
            ret.add( itA.value );
        }
        if( bHas = itB.next() ) {
            ret.add( itB.value );
        }

        if( !aHas && !bHas ) {
            break;
        }
    }

    return ret;
};

/**
 * Returns the intersection of the argument set and this set. The returned
 * set will have all the members that appear in both this set and the
 * argument set.
 *
 * @param {Set} a The set to intersect this set with.
 * @return {Set}
 *
 */
method.intersection = function intersection( a ) {
    var ret = new this.constructor( Math.max( this.size(), a.size() ) / 0.67 );

    var src = this.size() < a.size() ? this : a,
        dst = src === a ? this : a,
        it = src.iterator();

    while( it.next() ) {
        if( dst.contains( it.value ) ) {
            ret.add( it.value );
        }
    }

    return ret;
};

/**
 * Returns the relative complement of this set in relation to the argument
 * set. The returned set will have all the members that are in this set
 * but were not in the argument set.
 *
 * Note that set1.complement(set2) is different from set2.complement(set1)
 *
 * @param {Set} a The set to complement this set with.
 * @return {Set}
 *
 */
method.complement = function complement( a ) {
    var ret = new this.constructor( Math.max( this.size(), a.size() ) / 0.67 );

    var it = this.iterator();

    while( it.next() ) {
        if( !a.contains( it.value ) ) {
            ret.add( it.value );
        }
    }
    return ret;
};

/**
 * Returns the symmetrict difference of this set and the argument set.
 * set. The returned set will have all the members that are in this set
 * and the argument set, but not those that are in both sets.
 *
 * This is relatively expensive operation, requiring iteration of both
 * sets currently.
 *
 * @param {Set} a The argument set.
 * @return {Set}
 *
 */
method.difference = function difference( a ) {
    var ret = new this.constructor( Math.max( this.size(), a.size() ) / 0.67 );

    var it = this.iterator();

    while( it.next() ) {
        if( !a.contains( it.value ) ) {
            ret.add( it.value );
        }
    }

    it = a.iterator();

    while( it.next() ) {
        if( !this.contains( it.value ) ) {
            ret.add( it.value );
        }
    }
    return ret;
};

/**
 * Returns an Iterator for the set. The iterator will become invalid
 * if the set is modified outside that iterator.
 *
 * Iteration can be very slow in an unordered set.
 *
 * @return {MapIterator}
 *
 */
method.iterator = function iterator() {
    return new Iterator( this );
};

var Iterator = (function() {
    /**
     * Iterator constructor for the unordered set.
     *
     * If the iterator cursor is currently pointing at a valid
     * entry, you can retrieve the entry's value and index
     * from the iterator .value and .index properties
     * respectively.
     *
     * For performance, they are just simple properties but
     * they are meant to be read-only.
     *
     * You may reset the cursor at no cost to the beginning (
     * .moveToStart()) or to the end (.moveToEnd()).
     *
     * You may move the cursor one item forward (.next())
     * or backward (.prev()).
     *
     * Example:
     *
     * var it = set.iterator();
     *
     * while( it.next() ) {
     *      console.log( it.value, it.index );
     * }
     * //Cursor is now *after* the last entry
     * while( it.prev() ) { //Iterate backwards
     *      console.log(  it.value, it.index );
     * }
     * //Cursor is now *before*the first entry
     *
     * Iteration can be very slow in an unordered set.
     *
     * @param {Set} set Description of set parameter.
     * @constructor
     */
    function Iterator( set ) {
        this.value = void 0;
        this.index = -1;
        this._modCount = set._modCount;

        this._indexDelta = 1;
        this._index = -1;
        this._set = set;
        this._bucketIndex = -1;
    }
    var method = Iterator.prototype;

    /**
     * Internal
     *
     * @return {void}
     *
     */
    method._checkModCount = SetIteratorCheckModCount;

    /**
     * Internal.
     *
     * @return {void}
     *
     */
    method._moveToNextBucketIndex = function _moveToNextBucketIndex() {
        var i = this._bucketIndex + this._indexDelta,
            b = this._set._buckets,
            l = b.length;
        for( ; i < l; i ++ ) {
            if( b[i] !== void 0 ) {
                this.value = b[i];
                this._bucketIndex = i;
                break;
            }
        }
    };

    /**
     * Internal.
     *
     * @return {void}
     *
     */
    method._moveToPrevBucketIndex = function _moveToPrevBucketIndex() {
        var i = this._bucketIndex - 1,
            b = this._set._buckets;
        for( ; i >= 0; i -- ) {
            if( b[i] !== void 0 ) {
                this.value = b[i];
                this._bucketIndex = i;
                break;
            }
        }
    };

    //API

    /**
     * Move the cursor forward by one position. Returns true if the cursor is
     * pointing at a valid entry. Returns false otherwise.
     *
     * @return {boolean}
     *
     */
    method.next = function next() {
        this._checkModCount();
        this._index += this._indexDelta;

        if( this._index >= this._set._size ) {
            this.moveToEnd();
            return false;
        }

        this._moveToNextBucketIndex();
        this.index = this._index;
        this._indexDelta = 1;

        return true;
    };

    /**
     * Move the cursor backward by one position. Returns true if the cursor is
     * pointing at a valid entry. Returns false otherwise.
     *
     * @return {boolean}
     *
     */
    method.prev = function prev() {
        this._checkModCount();
        this._index--;

        if( this._index < 0 ||
            this._set._size === 0 ) {
            this.moveToStart();
            return false;
        }

        this._moveToPrevBucketIndex();
        this.index = this._index;

        this._indexDelta = 1;

        return true;
    };

    /**
     * Move the cursor before the first entry. The cursor is not
     * pointing at a valid entry, you may move to the first entry after
     * calling this method by calling .next().
     *
     * This method operates in constant time.
     *
     * @return {SetIterator}
     *
     */
    method.moveToStart = function moveToStart() {
        this._checkModCount();
        this.value = void 0;
        this.index = -1;
        this._index = -1;
        this._bucketIndex = -1;
        this._indexDelta = 1;

        return this;
    };

    /**
     * Move the cursor after the last entry. The cursor is not pointing at
     * a valid entry, you may move to the last entry after calling this
     * method by calling .prev().
     *
     * This method operates in constant time.
     *
     * @return {SetIterator}
     *
     */
    method.moveToEnd = function moveToEnd() {
        this._checkModCount();
        this.value = void 0;
        this._index = this._set._size;
        this.index = -1;
        this._bucketIndex = this._set._capacity;
        this._indexDelta = 1;

        return this;
    };


    /**
     * If the cursor is pointing at a valid entry, you may delete
     * the value from the iterated set without invalidating this
     * iterator.
     *
     * An iterator becomes invalid if the set is modified behind
     * its back.
     *
     * After successfully calling this method (deletion happend),
     * the cursor does not point at anything. After deletion, you
     * may move the cursor normally with the cursor traversal
     * methods.
     *
     * If deletion happened, returns true. Returns false otherwise.
     *
     * @return {boolean}
     * @return {void}
     *
     */
    method["delete"] = method.remove = function remove() {
        this._checkModCount();

        var i = this._bucketIndex;

        if( i < 0 || i >= this._set._capacity ||
            this.value === void 0 ) {
            return false;
        }

        this._set.remove( this.value );
        this._modCount = this._set._modCount;
        this.value = void 0;
        this.index = -1;

        this._indexDelta = 0;

        return true;
    };


    return Iterator;
})();

method._Iterator = Iterator;


return Set;})();
;
/* global OrderedMap, setIteratorMethods, copyProperties,
    toList, SetForEach, toList */
/* exported OrderedSet */
var OrderedSet = (function() {
var __value = true;

/**
 * Constructor for ordered sets. Ordered set is like set except
 * it has an inherent order. The inherent order is the order
 * the values are inserted into the set in.
 *
 * Compared to Set, OrderedSet is extremely memory inefficient,
 * has slightly slower lookup but iteration is faster.
 *
 * The undefined value is not supported as a value. Use
 * null instead.
 *
 * Ordering gives a meaning to operations like first,
 * last, nth, indexOf and so on.
 *
 * Deletion of an entry doesn't affect order of other values.
 *
 * @param {int=|Array.<dynamic>|Set} capacity The initial capacity.
 * Can also be an array or another set to initialize the set.
 * @constructor
 */
function OrderedSet( capacity ) {
    this._map = null;
    this._init( capacity );
}
var method = OrderedSet.prototype;


/**
 * Internal.
 *
 *
 */

method._addAll = function _addAll( items ) {
    this._map._setAll( items, __value );
};

/**
 * Internal.
 *
 *
 */
method._init = function _init( capacity ) {
    if( typeof capacity === "object" &&
        capacity !== null ) {
        capacity = toList( capacity );
        this._map = new OrderedMap( capacity.length | 0 );
        this._addAll( capacity );
    }
    else if( typeof capacity === "number" ) {
        this._map = new OrderedMap( capacity );
    }
    else {
        this._map = new OrderedMap();
    }
};

//API

/**
 * Simple way to iterate the set. The callback fn receives arguments:
 *
 * {dynamic} value, {integer} index
 *
 * @param {function} fn Description of fn parameter.
 * @param {Object=} ctx Description of ctx parameter.
 * @return {void}
 *
 */
method.forEach = SetForEach;

/**
 * Returns a shallow clone of the set.
 *
 * @return {OrderedSet}
 *
 */
method.clone = function clone() {
    return new OrderedSet( this.toArray() );
};

/**
 * Add a value into the set. If the value is already in the
 * set, returns false. Returns true otherwise.
 *
 * The undefined value is not supported as a value. Use
 * null instead.
 *
 * @param {dynamic} value The value to add into the set.
 * @return {boolean}
 * @throws {Error} When value is undefined
 *
 */
method.add = function add( value ) {
    if( value === void 0) {
        throw new Error( "Cannot use undefined as a value" );
    }
    return this._map.put( value, __value ) === void 0;
};

/**
 * Removes the given value from the set. If the
 * value is not in the set, returns false. If the value is in the
 * set, the value is removed and true is returned;
 *
 * You can check if the removal was successful by checking
 *
 * set.remove( value ) === true
 *
 * The undefined value as a value is not supported. Use null instead.
 *
 * @param {dynamic} value The value to remove from the set.
 * @return {boolean}
 *
 */
method["delete"] = method.remove = function remove( value ) {
    return this._map.remove( value ) !== void 0;
};

/**
 * See if the value is contained in this set.
 *
 * Value cannot be undefined.
 *
 * @param {dynamic} value The value to look up.
 * @return {boolean}
 *
 */
method.contains = function contains( value ) {
    return this._map.hasKey( value );
};

/**
 * Insert the given values into the set. Can be given in the form
 * of an array or another Set.
 *
 *
 * @param {Array.<dynamic>|Set} items Description of items parameter.
 * @return {void}
 *
 */
method.addAll = function addAll( items ) {
    this._addAll( toList( items ) );
};

/**
 * Remove everything in the set.
 *
 * @return {void}
 *
 */
method.clear = function clear() {
    return this._map.clear();
};

/**
 * Description.
 *
 *
 */
method.toArray = method.values = function toArray() {
    return this._map.keys();
};

/**
 * Returns the amount of items in the set.
 *
 * @return {int}
 *
 */
method.size = method.length = function size() {
    return this._map.size();
};

/**
 * See if the set doesn't contain anything.
 *
 * @return {boolean}
 *
 */
method.isEmpty = function isEmpty() {
    return this._map.isEmpty();
};

/**
 * See if this set is a proper superset of the argument set.
 *
 * @param {Set} set The argument set.
 * @return {boolean}
 *
 */
method.supersetOf = Set.prototype.supersetOf;

/**
 * See if this set is a proper subset of the argument set.
 *
 * @param {Set} set The argument set.
 * @return {boolean}
 *
 */
method.subsetOf = Set.prototype.subsetOf;

/**
 * See if this set is fully contained in the argument set.
 *
 * @param {Set} set The argument set.
 * @return {boolean}
 *
 */
method.allContainedIn = Set.prototype.allContainedIn;

/**
 * See if this set is fully contains the argument set.
 *
 * @param {Set} set The argument set.
 * @return {boolean}
 *
 */
method.containsAll = Set.prototype.containsAll;

/**
 * Returns a hash code for the set.
 *
 * @return {int}
 *
 */
method.valueOf = Set.prototype.valueOf;

/**
 * Returns a string representation of the set.
 *
 * @return {String}
 *
 */
method.toString = Set.prototype.toString;

/**
 * Automatically called by JSON.stringify. If you later parse the JSON
 * you can pass the array to a set constructor.
 *
 * @return {Array.<dynamic>}
 *
 */
method.toJSON = Set.prototype.toJSON;

/**
 * Returns the union of the argument set and this set. The returned
 * set will have all the members that appear in this set, the second
 * set or both.
 *
 * @param {Set} a The set to union this set with.
 * @return {Set}
 *
 */
method.union = Set.prototype.union;

/**
 * Returns the intersection of the argument set and this set. The returned
 * set will have all the members that appear in both this set and the
 * argument set.
 *
 * @param {Set} a The set to intersect this set with.
 * @return {Set}
 *
 */
method.intersection = Set.prototype.intersection;

/**
 * Returns the relative complement of this set in relation to the argument
 * set. The returned set will have all the members that are in this set
 * but were not in the argument set.
 *
 * Note that set1.complement(set2) is different from set2.complement(set1)
 *
 * @param {Set} a The set to complement this set with.
 * @return {Set}
 *
 */
method.complement = Set.prototype.complement;

/**
 * Returns the symmetrict difference of this set and the argument set.
 * set. The returned set will have all the members that are in this set
 * and the argument set, but not those that are in both sets.
 *
 * This is relatively expensive operation, requiring iteration of both
 * sets currently.
 *
 * @param {Set} a The argument set.
 * @return {Set}
 *
 */
method.difference = Set.prototype.difference;

/**
 * Find the zero-based index of the value in the set. O(n).
 *
 * Returns -1 if the value is not in the set.
 *
 * Value cannot be undefined. Use null instead.
 *
 * @param {dynamic} value The value to lookup index for.
 * @return {int}
 *
 */
method.indexOf = function indexOf( value ) {
    return this._map.indexOfKey( value );
};

/**
 * Returns the first value in the set. Returns
 * undefined if the set is empty. O(1).
 *
 * @return {dynamic}
 *
 */
method.first = function first() {
    return this._map.firstKey();
};

/**
 * Returns the last value in the set. Returns
 * undefined if the set is empty. O(1).
 *
 * @return {dynamic}
 *
 */
method.last = function last() {
    return this._map.lastKey();
};

/**
 * Returns the nth value (0-based) in the set. Returns
 * undefined if the index is out of bounds. O(N).
 *
 * @return {dynamic}
 *
 */
method.get = method.nth = function nth( index ) {
    return this._map.nthKey( index );
};

/**
 * Returns an Iterator for the set. The iterator will become invalid
 * if the set is modified outside the iterator's methods.
 *
 * @return {SetIterator}
 *
 */
method.iterator = function iterator() {
    return new Iterator( this );
};

var Iterator = (function() {
    /**
     * Iterator constructor for the ordered set.
     *
     * If the iterator cursor is currently pointing at a valid
     * entry, you can retrieve the entry's value and index
     * from the iterator .value and .index properties
     * respectively.
     *
     * For performance, they are just simple properties but
     * they are meant to be read-only.
     *
     * You may reset the cursor at no cost to the beginning (
     * .moveToStart()) or to the end (.moveToEnd()).
     *
     * You may move the cursor one item forward (.next())
     * or backward (.prev()).
     *
     * Example:
     *
     * var it = set.iterator();
     *
     * while( it.next() ) {
     *      console.log( it.value, it.index );
     * }
     * //Cursor is now *after* the last entry
     * while( it.prev() ) { //Iterate backwards
     *      console.log( it.value, it.index );
     * }
     * //Cursor is now *before*the first entry
     *
     *
     * @param {OrderedSet} set Description of set parameter.
     * @constructor
     */
    function Iterator( set ) {
        this._iterator = set._map.iterator();
        this.value = void 0;
        this.index = -1;
    }
    var method = Iterator.prototype;

    copyProperties( setIteratorMethods, method );

    return Iterator;
})();



return OrderedSet;})();
;
/* global defaultComparer, SortedMap, SetForEach, setIteratorMethods,
    copyProperties, toList, RedBlackTree,
    SetValueOf, SetToString, SetToJSON */
var SortedSet = (function() {

    var method = SortedSet.prototype;

    function SortedSet( values, comparator ) {
        this._tree = null;
        this._init( values, comparator );
    }

    method._init = function _init( values, comparator ) {
        if( typeof values === "function" ) {
            var tmp = comparator;
            comparator = values;
            values = tmp;
        }

        if( typeof comparator !== "function" ) {
            comparator = defaultComparer;
        }

        this._tree = new RedBlackTree( comparator );

        if( typeof values === "object" && values != null ) {
            this._addAll( toList(values) );
        }
    };

    //API
    method.forEach = SetForEach;

    method.getComparator = SortedMap.prototype.getComparator;

    method.clear = SortedMap.prototype.clear;


    method.values = method.toArray = function toArray() {
        var values = [],
            it = this.iterator();

        while( it.next() ) {
            values.push( it.value );
        }
        return values;
    };

    method.contains = SortedMap.prototype.containsKey;
    method.get = method.nth = SortedMap.prototype.nthKey;
    method.first = SortedMap.prototype.firstKey;
    method.last = SortedMap.prototype.lastKey;
    method.size = method.length = SortedMap.prototype.size;
    method.isEmpty = SortedMap.prototype.isEmpty;

    method.add = function add( value ) {
        this._tree.set( value, true );
        return this;
    };

    method._addAll = function _addAll( values ) {
        for( var i = 0, l = values.length; i < l; ++i ) {
            this.add( values[i] );
        }
    };

    method.addAll = function addAll( arr ) {
        var values = toList(arr);
        this._addAll( values );
        return this;
    };

    method.clone = function clone() {
        return new SortedSet( this.values() );
    };

    method.remove = function remove( value ) {
        var ret = this._tree.unset( value );
        return ret ? ret.key : ret;
    };

    method.subsetOf = function subsetOf( set ) {
        var it = this.iterator();

        while( it.next() ) {
            if( !set.contains( it.key ) ) {
                return false;
            }
        }
        return this.size() !== set.size();
    };

    method.supersetOf = function supersetOf( set ) {
        return set.subsetOf(this);
    };

    method.allContainedIn = function allContainedIn( set ) {
        var it = this.iterator();

        while( it.next() ) {
            if( !set.contains( it.key ) ) {
                return false;
            }
        }
        return true;
    };

    method.containsAll = function containsAll( set ) {
        return set.allContainedIn( this );
    };

    method.valueOf = SetValueOf;

    method.toString = SetToString;

    method.toJSON = SetToJSON;

    method.union = function union(a) {
        var ret = new SortedSet( this.getComparator() ),

            aHas, bHas,

            itA = this.iterator(),
            itB = a.iterator();

        while( true ) {
            if( aHas = itA.next() ) {
                ret.add( itA.key );
            }
            if( bHas = itB.next() ) {
                ret.add( itB.key );
            }

            if( !aHas && !bHas ) {
                break;
            }
        }

        return ret;
    };


    method.intersection = function intersection(a) {
        var ret = new SortedSet( this.getComparator() ),
            src = this.size() < a.size() ? this : a,
            dst = src === a ? this : a,
            it = src.iterator();

        while( it.next() ) {
            if( dst.contains( it.key ) ) {
                ret.add( it.key );
            }
        }

        return ret;
    };

    method.complement = function complement( a ) {
        var ret = new SortedSet( this.getComparator() ),
            it = this.iterator();

        while( it.next() ) {
            if( !a.contains( it.key ) ) {
                ret.add( it.key );
            }
        }

        return ret;
    };


    method.difference = function difference( a ) {
        var ret = this.union( a ),
            tmp = this.intersection( a ),
            it = tmp.iterator();

        while( it.next() ) {
            ret.remove( it.key );
        }

        return ret;
    };

    method.iterator = function iterator() {
        return new Iterator( this );
    };

    var Iterator = (function() {
        var method = Iterator.prototype;

        function Iterator( set ) {
            this._iterator = set._tree.iterator();
            this.value = void 0;
            this.index = -1;
            this.moveToStart();
        }

        copyProperties( setIteratorMethods, method );


        return Iterator;
    })();

    method._Iterator = Iterator;

    return SortedSet;
})();;
/* global toList, arraySearch, arrayCopy, SetForEach, SetValueOf */
/* exported Queue */
var Queue = (function() {
var DEFAULT_CAPACITY = 16;
var MAX_CAPACITY = 536870912;

/**
 * Description.
 *
 *
 */
function clampCapacity( capacity ) {
    return Math.max(
            Math.min( MAX_CAPACITY, capacity ),
            DEFAULT_CAPACITY
    );
}

/**
 * Description.
 *
 *
 */
function nextPowerOfTwo( num ) {
    num = ((num >>> 0) - 1);
    num |= (num >>> 1);
    num |= (num >>> 2);
    num |= (num >>> 4);
    num |= (num >>> 8);
    num |= (num >>> 16);
    return (num + 1)>>>0;
}

/**
 * This is efficient array implementation that provides O(1) for random
 * access, removing at front, removing at back (deque only), adding at
 * front, adding at back( deque only)
 *
 * It resizes itself automatically and uses power of two physical sizes to
 * take advantage of bitwise wizardry in wrapping to avoid modulo
 * operations and if blocks.
 *
 * It should perform much better than the native Javascript array when
 * using the unshift/shift methods which need to do full move of all
 * indices every time. Random access etc is slower, but much faster than
 * would be in a linked list O(N).
 *
 * I didn't use this implementation because of random access though but to
 * avoid creating a ton of objects and have better spatial locality of
 * reference. I implemented the random access methods just because it was
 * possible to do so efficiently. Could be useful if you need queue/deque
 * but also random access...
 */
function Queue( capacity, maxSize, _arrayImpl ) {
    var items = null;

    this._maxSize = (maxSize = maxSize >>> 0) > 0 ?
        Math.min( maxSize, MAX_CAPACITY ) :
        MAX_CAPACITY;

    switch( typeof capacity ) {
    case "number":
        capacity = nextPowerOfTwo( capacity );
        break;
    case "object":
        if( capacity ) {
            items = toList( capacity );
            capacity = nextPowerOfTwo( items.length );
        }
        break;
    default:
        capacity = DEFAULT_CAPACITY;
    }

    this._capacity = clampCapacity( capacity );

    this._size = 0;
    this._queue = null;
    this._front = 0;
    this._modCount = 0;

    if( _arrayImpl != null ) {
        this._arrayImpl = _arrayImpl;
        this._fillValue = 0;
    }
    else {
        this._arrayImpl = Array;
        this._fillValue = null;
    }

    if( items ) {
        this._makeCapacity();
        this._addAll( items );
    }
}
var method = Queue.prototype;

/**
 * Description.
 *
 *
 */
method._checkCapacity = function( size ) {
    if( this._capacity < size && size < this._maxSize ) {
        this._resizeTo( this._capacity * 2 );
    }
};

/**
 * Description.
 *
 *
 */
method._makeCapacity = function() {
    var capacity = this._capacity,
        items = this._queue = new this._arrayImpl( capacity ),
        fill = this._fillValue;


    for( var i = 0; i < capacity; ++i ) {
        items[i] = fill;
    }
    this._front = 0;
};

/**
 * Description.
 *
 *
 */
method._resizeTo = function( capacity ) {
    var oldQueue = this._queue,
        newQueue,
        oldFront = this._front,
        oldCapacity = this._capacity,
        size = this._size;

    this._capacity = capacity;

    this._makeCapacity();

    newQueue = this._queue;

    //Can perform direct linear copy
    if( oldFront + size <= oldCapacity ) {
        arrayCopy( oldQueue, oldFront, newQueue, 0, size );
    }
    else {//Cannot perform copy directly, perform as much as possible
            //at the end, and then copy the rest to the beginning of the buffer
        var lengthBeforeWrapping =
            size - ( ( oldFront + size ) & ( oldCapacity - 1 ) );

        arrayCopy( oldQueue, oldFront, newQueue, 0, lengthBeforeWrapping );
        arrayCopy(
            oldQueue,
            0,
            newQueue,
            lengthBeforeWrapping,
            size - lengthBeforeWrapping
        );
    }

};

/**
 * Description.
 *
 *
 */
method._addAll = function( items ) {
    this._modCount++;
    var size = this._size;

    var len = items.length;
    if( len <= 0 ) {
        return;
    }
    this._checkCapacity( len + size );

    if( this._queue === null ) {
        this._makeCapacity();
    }

    var queue = this._queue,
        capacity = this._capacity,
        insertionPoint = ( this._front + size) & ( capacity - 1 );

     //Can perform direct linear copy
    if( insertionPoint + len < capacity ) {
        arrayCopy( items, 0, queue, insertionPoint, len );
    }
    else {
        //Cannot perform copy directly, perform as much as possible
        //at the end, and then copy the rest to the beginning of the buffer
        var lengthBeforeWrapping = capacity - insertionPoint;
        arrayCopy( items, 0, queue, insertionPoint, lengthBeforeWrapping );
        arrayCopy(
            items,
            lengthBeforeWrapping,
            queue,
            0,
            len - lengthBeforeWrapping
        );
    }

    this._size = Math.min( size + len, this._maxSize );


};

//API

/**
 * Description.
 *
 *
 */
method.forEach = SetForEach;

/**
 * Description.
 *
 *
 */
method.get = function( index ) {
    var i = (index >>> 0);
    if( i < 0 || i >= this._size ) {
        return void 0;
    }
    i = ( this._front + i ) & ( this._capacity - 1 );
    return this._queue[i];
};

/**
 * Description.
 *
 *
 */
method.set = function( index, value ) {
    this._modCount++;
    var i = (index >>> 0);
    if( i < 0 || i >= this._size ) {
        return void 0;
    }
    i = ( this._front + i ) & ( this._capacity - 1 );
    var ret = this._queue[i];
    this._queue[i] = value;
    return ret;
};

/**
 * Description.
 *
 *
 */
method.addAll = function( items ) {
    this._modCount++;
    return this._addAll( toList( items ) );
};

/**
 * Description.
 *
 *
 */
method.add = method.enqueue = function( item ) {
    this._modCount++;
    var size = this._size;
    if( this._queue === null ) {
        this._makeCapacity();
    }
    this._checkCapacity( size + 1 );
    var i = ( this._front + size ) & ( this._capacity - 1 );
    this._queue[i] = item;
    this._size = Math.min( size + 1, this._maxSize );
};

/**
 * Description.
 *
 *
 */
method.remove = method.dequeue = function() {
    this._modCount++;
    if( this._size === 0 ){
        return void 0;
    }
    var front = this._front,
        ret = this._queue[front];

    this._queue[front] = this._fillValue;
    this._front = ( front + 1 ) & ( this._capacity - 1);
    this._size--;
    return ret;
};

/**
 * Description.
 *
 *
 */
method.peek = function() {
    if( this._size === 0 ){
        return void 0;
    }
    return this._queue[this._front];
};

/**
 * Description.
 *
 *
 */
method.clear = function() {
    this._modCount++;
    var queue = this._queue,
        fill = this._fillValue;
    for( var i = 0, len = queue.length; i < len; ++i ) {
        queue[i] = fill;
    }
    this._size = 0;
    this._front = 0;
};

/**
 * Description.
 *
 *
 */
method.size = function() {
    return this._size;
};

/**
 * Description.
 *
 *
 */
method.isEmpty = function() {
    return this._size === 0;
};

/**
 * Description.
 *
 *
 */
method.toArray = method.toJSON = method.values = function() {
    if( this._size === 0 ) {
        return [];
    }
    var size = this._size,
        queue = this._queue,
        front = this._front,
        capacity = this._capacity,
        ret = new Array( size );

    if( front + size <= capacity ) {
        arrayCopy( queue, front, ret, 0, size );
    }
    else {
        var lengthBeforeWrapping =
            size - ( ( front + size ) & ( capacity - 1 ) );
        arrayCopy( queue, front, ret, 0, lengthBeforeWrapping );
        arrayCopy(
            queue,
            0,
            ret,
            lengthBeforeWrapping,
            size - lengthBeforeWrapping
        );
    }

    return ret;
};

/**
 * Description.
 *
 *
 */
method.contains = function( value ) {
    var size = this._size;

    if( size === 0 ) {
        return false;
    }

    var queue = this._queue,
        front = this._front,
        capacity = this._capacity;

    if( front + size <= capacity ) {
        return arraySearch( queue, front, size, value );
    }
    else {
        var lengthBeforeWrapping =
            size - ( ( front + size ) & ( capacity - 1 ) );
        return  arraySearch( queue, front, lengthBeforeWrapping, value ) ?
                true :
                arraySearch( queue, 0, size - lengthBeforeWrapping, value );
    }
};

/**
 * Description.
 *
 *
 */
method.valueOf = SetValueOf;

/**
 * Description.
 *
 *
 */
method.toString = function() {
    return JSON.stringify( this.values() );
};

/**
 * Description.
 *
 *
 */
method.iterator = function() {
    return new Iterator( this );
};

var Iterator = (function() {


    /**
     * Description.
     *
     *
     */
    function Iterator( queue ) {
        this._queue = queue;
        this._modCount = this._queue._modCount;
        this._items = this._queue._queue;
        this.moveToStart();
    }
    var method = Iterator.prototype;

    /**
     * Description.
     *
     *
     */
    method._checkModCount = function() {
        if( this._modCount !== this._queue._modCount ) {
            throw new Error( "Cannot mutate queue while iterating" );
        }
    };

    /**
     * Description.
     *
     *
     */
    method.next = function() {
        this._checkModCount();

        var i = ++this._index;

        if( i >= this._queue._size ) {
            this.moveToEnd();
            return false;
        }

        var item = this._items[
                ( this._queue._front + i ) &
                ( this._queue._capacity - 1 )
        ];

        this.value = item;
        this.index = i;

        return true;
    };

    /**
     * Description.
     *
     *
     */
    method.prev = function() {
        this._checkModCount();

        var i = --this._index;

        if( i < 0 || this._queue._size === 0 ) {
            this.moveToStart();
            return false;
        }

        var item = this._items[
            ( this._queue._front + i ) &
            ( this._queue._capacity - 1 )
        ];

        this.value = item;
        this.index = i;

        return true;
    };

    /**
     * Description.
     *
     *
     */
    method.moveToStart = function() {
        this._checkModCount();

        this.index = -1;
        this._index = -1;
        this.value = void 0;

        return this;
    };

    /**
     * Description.
     *
     *
     */
    method.moveToEnd = function() {
        this._checkModCount();

        this.index = -1;
        this._index = this._queue._size;
        this.value = void 0;

        return this;
    };

    return Iterator;
})();

return Queue;})();;
/* global Queue */
/* exported Deque */
var Deque = (function() {

/**
 * Description.
 *
 *
 */
function Deque( capacity, maxSize, arrayImpl ) {
    _super.constructor.call( this, capacity, maxSize, arrayImpl );
}

var _super = Queue.prototype,
    method = Deque.prototype = Object.create( _super );

method.constructor = Deque;


/**
 * Description.
 *
 *
 */
method.unshift = method.insertFront = function( item ) {
    this._modCount++;
    if( this._queue === null ) {
        this._makeCapacity();
    }
    var size = this._size;

    this._checkCapacity( size + 1 );
    var capacity = this._capacity;

    //Need this._front - 1, but if it is 0, that simply returns 0.
    //It would need to be capacity - 1, I.E. wrap to end, when front is 0
    //Because capacity is a power of two, capacity-bit 2's complement
    //integers can be emulated like this which returns capacity - 1
    //if this._front === 0

    var i = (((( this._front - 1 ) &
        ( capacity - 1) ) ^ capacity ) - capacity );
    this._queue[i] = item;
    this._size = Math.min( size + 1, this._maxSize );
    this._front = i;
};

/**
 * Description.
 *
 *
 */
method.pop = method.removeBack = function() {
    this._modCount++;
    var size = this._size;
    if( size === 0 ){
        return void 0;
    }
    var i = ( this._front + size - 1 ) & ( this._capacity - 1 );

    var ret = this._queue[i];
    this._queue[i] = this._fillValue;

    this._size--;
    return ret;
};

/**
 * Description.
 *
 *
 */
method.peekBack = function() {
    var size = this._size;
    if( size === 0 ) {
        return void 0;
    }
    return this._queue[
        ( this._front + size - 1 ) &
        ( this._capacity - 1 )
    ];
};

method.shift = method.removeFront = method.remove;
method.push = method.insertBack = method.add;
method.peekFront = method.peek;

//Meaningless semantics here
method.peek = method.remove =
    method.add = method.enqueue = method.dequeue = null;


return Deque;})();;
/* global Set, OrderedSet, SortedSet, Map, OrderedMap, SortedMap,
    defaultComparer, invertedComparator, arePrimitive, composeComparators,
    comparePosition, global, exportCtor, Queue, Deque */

var DS = {

    Set: exportCtor( Set ),
    OrderedSet: exportCtor( OrderedSet ),
    SortedSet: exportCtor( SortedSet ),

    Map: exportCtor( Map ),
    OrderedMap: exportCtor( OrderedMap ),
    SortedMap: exportCtor( SortedMap ),

    Queue: exportCtor( Queue ),
    Deque: exportCtor( Deque ),

    compare: {
        NATURAL_ASC: defaultComparer,

        NATURAL_DESC: invertedComparator(defaultComparer),

        NUMERIC_ASC: function( a, b ) {
            return a-b;
        },

        NUMERIC_DESC: function( a, b ) {
            return b-a;
        },

        LOCALE: function( a, b ) {
            if( !arePrimitive( a, b ) ) {
                a = a.toString();
                b = b.toString();
            }
            return a.localeCompare(b);
        },

        DOM: function( a, b ) {
            if( a === b ) {
                return 0;
            }
            return (3 - (comparePosition(a, b) & 6));
        },

        invertedComparator: invertedComparator,

        composeComparators: composeComparators
    }
};




if( typeof module !== "undefined" && module.exports ) {
    module.exports = DS;
}
else if ( typeof define === "function" && define.amd && define.amd.DS ) {
    define( "DS", [], function () { return DS; } );
}
else if ( global ) {
    global.DS = DS;
};
})( ( function(){}.constructor( "return this" )() ) );



;
;
(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.EventEmitter = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      }
      throw TypeError('Uncaught, unspecified "error" event.');
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        args = Array.prototype.slice.call(arguments, 1);
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    args = Array.prototype.slice.call(arguments, 1);
    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else if (listeners) {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.prototype.listenerCount = function(type) {
  if (this._events) {
    var evlistener = this._events[type];

    if (isFunction(evlistener))
      return 1;
    else if (evlistener)
      return evlistener.length;
  }
  return 0;
};

EventEmitter.listenerCount = function(emitter, type) {
  return emitter.listenerCount(type);
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}

},{}],2:[function(require,module,exports){
var EventEmitter = require("events");
module.exports = EventEmitter;

},{"events":1}]},{},[2])(2)
});
;
;
/*!
 * jQuery JavaScript Library v1.11.3
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright 2005, 2014 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2015-04-28T16:19Z
 */

(function( global, factory ) {

    if ( typeof module === "object" && typeof module.exports === "object" ) {
        // For CommonJS and CommonJS-like environments where a proper window is present,
        // execute the factory and get jQuery
        // For environments that do not inherently posses a window with a document
        // (such as Node.js), expose a jQuery-making factory as module.exports
        // This accentuates the need for the creation of a real window
        // e.g. var jQuery = require("jquery")(window);
        // See ticket #14549 for more info
        module.exports = global.document ?
            factory( global, true ) :
            function( w ) {
                if ( !w.document ) {
                    throw new Error( "jQuery requires a window with a document" );
                }
                return factory( w );
            };
    } else {
        factory( global );
    }

// Pass this if window is not defined yet
}(typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Can't do this because several apps including ASP.NET trace
// the stack via arguments.caller.callee and Firefox dies if
// you try to trace through "use strict" call chains. (#13335)
// Support: Firefox 18+
//

var deletedIds = [];

var slice = deletedIds.slice;

var concat = deletedIds.concat;

var push = deletedIds.push;

var indexOf = deletedIds.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var support = {};



var
    version = "1.11.3",

    // Define a local copy of jQuery
    jQuery = function( selector, context ) {
        // The jQuery object is actually just the init constructor 'enhanced'
        // Need init if jQuery is called (just allow error to be thrown if not included)
        return new jQuery.fn.init( selector, context );
    },

    // Support: Android<4.1, IE<9
    // Make sure we trim BOM and NBSP
    rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

    // Matches dashed string for camelizing
    rmsPrefix = /^-ms-/,
    rdashAlpha = /-([\da-z])/gi,

    // Used by jQuery.camelCase as callback to replace()
    fcamelCase = function( all, letter ) {
        return letter.toUpperCase();
    };

jQuery.fn = jQuery.prototype = {
    // The current version of jQuery being used
    jquery: version,

    constructor: jQuery,

    // Start with an empty selector
    selector: "",

    // The default length of a jQuery object is 0
    length: 0,

    toArray: function() {
        return slice.call( this );
    },

    // Get the Nth element in the matched element set OR
    // Get the whole matched element set as a clean array
    get: function( num ) {
        return num != null ?

            // Return just the one element from the set
            ( num < 0 ? this[ num + this.length ] : this[ num ] ) :

            // Return all the elements in a clean array
            slice.call( this );
    },

    // Take an array of elements and push it onto the stack
    // (returning the new matched element set)
    pushStack: function( elems ) {

        // Build a new jQuery matched element set
        var ret = jQuery.merge( this.constructor(), elems );

        // Add the old object onto the stack (as a reference)
        ret.prevObject = this;
        ret.context = this.context;

        // Return the newly-formed element set
        return ret;
    },

    // Execute a callback for every element in the matched set.
    // (You can seed the arguments with an array of args, but this is
    // only used internally.)
    each: function( callback, args ) {
        return jQuery.each( this, callback, args );
    },

    map: function( callback ) {
        return this.pushStack( jQuery.map(this, function( elem, i ) {
            return callback.call( elem, i, elem );
        }));
    },

    slice: function() {
        return this.pushStack( slice.apply( this, arguments ) );
    },

    first: function() {
        return this.eq( 0 );
    },

    last: function() {
        return this.eq( -1 );
    },

    eq: function( i ) {
        var len = this.length,
            j = +i + ( i < 0 ? len : 0 );
        return this.pushStack( j >= 0 && j < len ? [ this[j] ] : [] );
    },

    end: function() {
        return this.prevObject || this.constructor(null);
    },

    // For internal use only.
    // Behaves like an Array's method, not like a jQuery method.
    push: push,
    sort: deletedIds.sort,
    splice: deletedIds.splice
};

jQuery.extend = jQuery.fn.extend = function() {
    var src, copyIsArray, copy, name, options, clone,
        target = arguments[0] || {},
        i = 1,
        length = arguments.length,
        deep = false;

    // Handle a deep copy situation
    if ( typeof target === "boolean" ) {
        deep = target;

        // skip the boolean and the target
        target = arguments[ i ] || {};
        i++;
    }

    // Handle case when target is a string or something (possible in deep copy)
    if ( typeof target !== "object" && !jQuery.isFunction(target) ) {
        target = {};
    }

    // extend jQuery itself if only one argument is passed
    if ( i === length ) {
        target = this;
        i--;
    }

    for ( ; i < length; i++ ) {
        // Only deal with non-null/undefined values
        if ( (options = arguments[ i ]) != null ) {
            // Extend the base object
            for ( name in options ) {
                src = target[ name ];
                copy = options[ name ];

                // Prevent never-ending loop
                if ( target === copy ) {
                    continue;
                }

                // Recurse if we're merging plain objects or arrays
                if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {
                    if ( copyIsArray ) {
                        copyIsArray = false;
                        clone = src && jQuery.isArray(src) ? src : [];

                    } else {
                        clone = src && jQuery.isPlainObject(src) ? src : {};
                    }

                    // Never move original objects, clone them
                    target[ name ] = jQuery.extend( deep, clone, copy );

                // Don't bring in undefined values
                } else if ( copy !== undefined ) {
                    target[ name ] = copy;
                }
            }
        }
    }

    // Return the modified object
    return target;
};

jQuery.extend({
    // Unique for each copy of jQuery on the page
    expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

    // Assume jQuery is ready without the ready module
    isReady: true,

    error: function( msg ) {
        throw new Error( msg );
    },

    noop: function() {},

    // See test/unit/core.js for details concerning isFunction.
    // Since version 1.3, DOM methods and functions like alert
    // aren't supported. They return false on IE (#2968).
    isFunction: function( obj ) {
        return jQuery.type(obj) === "function";
    },

    isArray: Array.isArray || function( obj ) {
        return jQuery.type(obj) === "array";
    },

    isWindow: function( obj ) {
        /* jshint eqeqeq: false */
        return obj != null && obj == obj.window;
    },

    isNumeric: function( obj ) {
        // parseFloat NaNs numeric-cast false positives (null|true|false|"")
        // ...but misinterprets leading-number strings, particularly hex literals ("0x...")
        // subtraction forces infinities to NaN
        // adding 1 corrects loss of precision from parseFloat (#15100)
        return !jQuery.isArray( obj ) && (obj - parseFloat( obj ) + 1) >= 0;
    },

    isEmptyObject: function( obj ) {
        var name;
        for ( name in obj ) {
            return false;
        }
        return true;
    },

    isPlainObject: function( obj ) {
        var key;

        // Must be an Object.
        // Because of IE, we also have to check the presence of the constructor property.
        // Make sure that DOM nodes and window objects don't pass through, as well
        if ( !obj || jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
            return false;
        }

        try {
            // Not own constructor property must be Object
            if ( obj.constructor &&
                !hasOwn.call(obj, "constructor") &&
                !hasOwn.call(obj.constructor.prototype, "isPrototypeOf") ) {
                return false;
            }
        } catch ( e ) {
            // IE8,9 Will throw exceptions on certain host objects #9897
            return false;
        }

        // Support: IE<9
        // Handle iteration over inherited properties before own properties.
        if ( support.ownLast ) {
            for ( key in obj ) {
                return hasOwn.call( obj, key );
            }
        }

        // Own properties are enumerated firstly, so to speed up,
        // if last one is own, then all properties are own.
        for ( key in obj ) {}

        return key === undefined || hasOwn.call( obj, key );
    },

    type: function( obj ) {
        if ( obj == null ) {
            return obj + "";
        }
        return typeof obj === "object" || typeof obj === "function" ?
            class2type[ toString.call(obj) ] || "object" :
            typeof obj;
    },

    // Evaluates a script in a global context
    // Workarounds based on findings by Jim Driscoll
    // http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context
    globalEval: function( data ) {
        if ( data && jQuery.trim( data ) ) {
            // We use execScript on Internet Explorer
            // We use an anonymous function so that context is window
            // rather than jQuery in Firefox
            ( window.execScript || function( data ) {
                window[ "eval" ].call( window, data );
            } )( data );
        }
    },

    // Convert dashed to camelCase; used by the css and data modules
    // Microsoft forgot to hump their vendor prefix (#9572)
    camelCase: function( string ) {
        return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
    },

    nodeName: function( elem, name ) {
        return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
    },

    // args is for internal usage only
    each: function( obj, callback, args ) {
        var value,
            i = 0,
            length = obj.length,
            isArray = isArraylike( obj );

        if ( args ) {
            if ( isArray ) {
                for ( ; i < length; i++ ) {
                    value = callback.apply( obj[ i ], args );

                    if ( value === false ) {
                        break;
                    }
                }
            } else {
                for ( i in obj ) {
                    value = callback.apply( obj[ i ], args );

                    if ( value === false ) {
                        break;
                    }
                }
            }

        // A special, fast, case for the most common use of each
        } else {
            if ( isArray ) {
                for ( ; i < length; i++ ) {
                    value = callback.call( obj[ i ], i, obj[ i ] );

                    if ( value === false ) {
                        break;
                    }
                }
            } else {
                for ( i in obj ) {
                    value = callback.call( obj[ i ], i, obj[ i ] );

                    if ( value === false ) {
                        break;
                    }
                }
            }
        }

        return obj;
    },

    // Support: Android<4.1, IE<9
    trim: function( text ) {
        return text == null ?
            "" :
            ( text + "" ).replace( rtrim, "" );
    },

    // results is for internal usage only
    makeArray: function( arr, results ) {
        var ret = results || [];

        if ( arr != null ) {
            if ( isArraylike( Object(arr) ) ) {
                jQuery.merge( ret,
                    typeof arr === "string" ?
                    [ arr ] : arr
                );
            } else {
                push.call( ret, arr );
            }
        }

        return ret;
    },

    inArray: function( elem, arr, i ) {
        var len;

        if ( arr ) {
            if ( indexOf ) {
                return indexOf.call( arr, elem, i );
            }

            len = arr.length;
            i = i ? i < 0 ? Math.max( 0, len + i ) : i : 0;

            for ( ; i < len; i++ ) {
                // Skip accessing in sparse arrays
                if ( i in arr && arr[ i ] === elem ) {
                    return i;
                }
            }
        }

        return -1;
    },

    merge: function( first, second ) {
        var len = +second.length,
            j = 0,
            i = first.length;

        while ( j < len ) {
            first[ i++ ] = second[ j++ ];
        }

        // Support: IE<9
        // Workaround casting of .length to NaN on otherwise arraylike objects (e.g., NodeLists)
        if ( len !== len ) {
            while ( second[j] !== undefined ) {
                first[ i++ ] = second[ j++ ];
            }
        }

        first.length = i;

        return first;
    },

    grep: function( elems, callback, invert ) {
        var callbackInverse,
            matches = [],
            i = 0,
            length = elems.length,
            callbackExpect = !invert;

        // Go through the array, only saving the items
        // that pass the validator function
        for ( ; i < length; i++ ) {
            callbackInverse = !callback( elems[ i ], i );
            if ( callbackInverse !== callbackExpect ) {
                matches.push( elems[ i ] );
            }
        }

        return matches;
    },

    // arg is for internal usage only
    map: function( elems, callback, arg ) {
        var value,
            i = 0,
            length = elems.length,
            isArray = isArraylike( elems ),
            ret = [];

        // Go through the array, translating each of the items to their new values
        if ( isArray ) {
            for ( ; i < length; i++ ) {
                value = callback( elems[ i ], i, arg );

                if ( value != null ) {
                    ret.push( value );
                }
            }

        // Go through every key on the object,
        } else {
            for ( i in elems ) {
                value = callback( elems[ i ], i, arg );

                if ( value != null ) {
                    ret.push( value );
                }
            }
        }

        // Flatten any nested arrays
        return concat.apply( [], ret );
    },

    // A global GUID counter for objects
    guid: 1,

    // Bind a function to a context, optionally partially applying any
    // arguments.
    proxy: function( fn, context ) {
        var args, proxy, tmp;

        if ( typeof context === "string" ) {
            tmp = fn[ context ];
            context = fn;
            fn = tmp;
        }

        // Quick check to determine if target is callable, in the spec
        // this throws a TypeError, but we will just return undefined.
        if ( !jQuery.isFunction( fn ) ) {
            return undefined;
        }

        // Simulated bind
        args = slice.call( arguments, 2 );
        proxy = function() {
            return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
        };

        // Set the guid of unique handler to the same of original handler, so it can be removed
        proxy.guid = fn.guid = fn.guid || jQuery.guid++;

        return proxy;
    },

    now: function() {
        return +( new Date() );
    },

    // jQuery.support is not used in Core but other projects attach their
    // properties to it so it needs to exist.
    support: support
});

// Populate the class2type map
jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {
    class2type[ "[object " + name + "]" ] = name.toLowerCase();
});

function isArraylike( obj ) {

    // Support: iOS 8.2 (not reproducible in simulator)
    // `in` check used to prevent JIT error (gh-2145)
    // hasOwn isn't used here due to false negatives
    // regarding Nodelist length in IE
    var length = "length" in obj && obj.length,
        type = jQuery.type( obj );

    if ( type === "function" || jQuery.isWindow( obj ) ) {
        return false;
    }

    if ( obj.nodeType === 1 && length ) {
        return true;
    }

    return type === "array" || length === 0 ||
        typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.2.0-pre
 * http://sizzlejs.com/
 *
 * Copyright 2008, 2014 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2014-12-16
 */
(function( window ) {

var i,
    support,
    Expr,
    getText,
    isXML,
    tokenize,
    compile,
    select,
    outermostContext,
    sortInput,
    hasDuplicate,

    // Local document vars
    setDocument,
    document,
    docElem,
    documentIsHTML,
    rbuggyQSA,
    rbuggyMatches,
    matches,
    contains,

    // Instance-specific data
    expando = "sizzle" + 1 * new Date(),
    preferredDoc = window.document,
    dirruns = 0,
    done = 0,
    classCache = createCache(),
    tokenCache = createCache(),
    compilerCache = createCache(),
    sortOrder = function( a, b ) {
        if ( a === b ) {
            hasDuplicate = true;
        }
        return 0;
    },

    // General-purpose constants
    MAX_NEGATIVE = 1 << 31,

    // Instance methods
    hasOwn = ({}).hasOwnProperty,
    arr = [],
    pop = arr.pop,
    push_native = arr.push,
    push = arr.push,
    slice = arr.slice,
    // Use a stripped-down indexOf as it's faster than native
    // http://jsperf.com/thor-indexof-vs-for/5
    indexOf = function( list, elem ) {
        var i = 0,
            len = list.length;
        for ( ; i < len; i++ ) {
            if ( list[i] === elem ) {
                return i;
            }
        }
        return -1;
    },

    booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

    // Regular expressions

    // Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
    whitespace = "[\\x20\\t\\r\\n\\f]",
    // http://www.w3.org/TR/css3-syntax/#characters
    characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

    // Loosely modeled on CSS identifier characters
    // An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors
    // Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
    identifier = characterEncoding.replace( "w", "w#" ),

    // Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
    attributes = "\\[" + whitespace + "*(" + characterEncoding + ")(?:" + whitespace +
        // Operator (capture 2)
        "*([*^$|!~]?=)" + whitespace +
        // "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
        "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
        "*\\]",

    pseudos = ":(" + characterEncoding + ")(?:\\((" +
        // To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
        // 1. quoted (capture 3; capture 4 or capture 5)
        "('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
        // 2. simple (capture 6)
        "((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
        // 3. anything else (capture 2)
        ".*" +
        ")\\)|)",

    // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
    rwhitespace = new RegExp( whitespace + "+", "g" ),
    rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

    rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
    rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

    rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

    rpseudo = new RegExp( pseudos ),
    ridentifier = new RegExp( "^" + identifier + "$" ),

    matchExpr = {
        "ID": new RegExp( "^#(" + characterEncoding + ")" ),
        "CLASS": new RegExp( "^\\.(" + characterEncoding + ")" ),
        "TAG": new RegExp( "^(" + characterEncoding.replace( "w", "w*" ) + ")" ),
        "ATTR": new RegExp( "^" + attributes ),
        "PSEUDO": new RegExp( "^" + pseudos ),
        "CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
            "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
            "*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
        "bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
        // For use in libraries implementing .is()
        // We use this for POS matching in `select`
        "needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
            whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
    },

    rinputs = /^(?:input|select|textarea|button)$/i,
    rheader = /^h\d$/i,

    rnative = /^[^{]+\{\s*\[native \w/,

    // Easily-parseable/retrievable ID or TAG or CLASS selectors
    rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

    rsibling = /[+~]/,
    rescape = /'|\\/g,

    // CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
    runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
    funescape = function( _, escaped, escapedWhitespace ) {
        var high = "0x" + escaped - 0x10000;
        // NaN means non-codepoint
        // Support: Firefox<24
        // Workaround erroneous numeric interpretation of +"0x"
        return high !== high || escapedWhitespace ?
            escaped :
            high < 0 ?
                // BMP codepoint
                String.fromCharCode( high + 0x10000 ) :
                // Supplemental Plane codepoint (surrogate pair)
                String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
    },

    // Used for iframes
    // See setDocument()
    // Removing the function wrapper causes a "Permission Denied"
    // error in IE
    unloadHandler = function() {
        setDocument();
    };

// Optimize for push.apply( _, NodeList )
try {
    push.apply(
        (arr = slice.call( preferredDoc.childNodes )),
        preferredDoc.childNodes
    );
    // Support: Android<4.0
    // Detect silently failing push.apply
    arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
    push = { apply: arr.length ?

        // Leverage slice if possible
        function( target, els ) {
            push_native.apply( target, slice.call(els) );
        } :

        // Support: IE<9
        // Otherwise append directly
        function( target, els ) {
            var j = target.length,
                i = 0;
            // Can't trust NodeList.length
            while ( (target[j++] = els[i++]) ) {}
            target.length = j - 1;
        }
    };
}

function Sizzle( selector, context, results, seed ) {
    var match, elem, m, nodeType,
        // QSA vars
        i, groups, old, nid, newContext, newSelector;

    if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
        setDocument( context );
    }

    context = context || document;
    results = results || [];
    nodeType = context.nodeType;

    if ( typeof selector !== "string" || !selector ||
        nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

        return results;
    }

    if ( !seed && documentIsHTML ) {

        // Try to shortcut find operations when possible (e.g., not under DocumentFragment)
        if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {
            // Speed-up: Sizzle("#ID")
            if ( (m = match[1]) ) {
                if ( nodeType === 9 ) {
                    elem = context.getElementById( m );
                    // Check parentNode to catch when Blackberry 4.6 returns
                    // nodes that are no longer in the document (jQuery #6963)
                    if ( elem && elem.parentNode ) {
                        // Handle the case where IE, Opera, and Webkit return items
                        // by name instead of ID
                        if ( elem.id === m ) {
                            results.push( elem );
                            return results;
                        }
                    } else {
                        return results;
                    }
                } else {
                    // Context is not a document
                    if ( context.ownerDocument && (elem = context.ownerDocument.getElementById( m )) &&
                        contains( context, elem ) && elem.id === m ) {
                        results.push( elem );
                        return results;
                    }
                }

            // Speed-up: Sizzle("TAG")
            } else if ( match[2] ) {
                push.apply( results, context.getElementsByTagName( selector ) );
                return results;

            // Speed-up: Sizzle(".CLASS")
            } else if ( (m = match[3]) && support.getElementsByClassName ) {
                push.apply( results, context.getElementsByClassName( m ) );
                return results;
            }
        }

        // QSA path
        if ( support.qsa && (!rbuggyQSA || !rbuggyQSA.test( selector )) ) {
            nid = old = expando;
            newContext = context;
            newSelector = nodeType !== 1 && selector;

            // qSA works strangely on Element-rooted queries
            // We can work around this by specifying an extra ID on the root
            // and working up from there (Thanks to Andrew Dupont for the technique)
            // IE 8 doesn't work on object elements
            if ( nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
                groups = tokenize( selector );

                if ( (old = context.getAttribute("id")) ) {
                    nid = old.replace( rescape, "\\$&" );
                } else {
                    context.setAttribute( "id", nid );
                }
                nid = "[id='" + nid + "'] ";

                i = groups.length;
                while ( i-- ) {
                    groups[i] = nid + toSelector( groups[i] );
                }
                newContext = rsibling.test( selector ) && testContext( context.parentNode ) || context;
                newSelector = groups.join(",");
            }

            if ( newSelector ) {
                try {
                    push.apply( results,
                        newContext.querySelectorAll( newSelector )
                    );
                    return results;
                } catch(qsaError) {
                } finally {
                    if ( !old ) {
                        context.removeAttribute("id");
                    }
                }
            }
        }
    }

    // All others
    return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {Function(string, Object)} Returns the Object data after storing it on itself with
 *  property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *  deleting the oldest entry
 */
function createCache() {
    var keys = [];

    function cache( key, value ) {
        // Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
        if ( keys.push( key + " " ) > Expr.cacheLength ) {
            // Only keep the most recent entries
            delete cache[ keys.shift() ];
        }
        return (cache[ key + " " ] = value);
    }
    return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
    fn[ expando ] = true;
    return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created div and expects a boolean result
 */
function assert( fn ) {
    var div = document.createElement("div");

    try {
        return !!fn( div );
    } catch (e) {
        return false;
    } finally {
        // Remove from its parent by default
        if ( div.parentNode ) {
            div.parentNode.removeChild( div );
        }
        // release memory in IE
        div = null;
    }
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
    var arr = attrs.split("|"),
        i = attrs.length;

    while ( i-- ) {
        Expr.attrHandle[ arr[i] ] = handler;
    }
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
    var cur = b && a,
        diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
            ( ~b.sourceIndex || MAX_NEGATIVE ) -
            ( ~a.sourceIndex || MAX_NEGATIVE );

    // Use IE sourceIndex if available on both nodes
    if ( diff ) {
        return diff;
    }

    // Check if b follows a
    if ( cur ) {
        while ( (cur = cur.nextSibling) ) {
            if ( cur === b ) {
                return -1;
            }
        }
    }

    return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
    return function( elem ) {
        var name = elem.nodeName.toLowerCase();
        return name === "input" && elem.type === type;
    };
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
    return function( elem ) {
        var name = elem.nodeName.toLowerCase();
        return (name === "input" || name === "button") && elem.type === type;
    };
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
    return markFunction(function( argument ) {
        argument = +argument;
        return markFunction(function( seed, matches ) {
            var j,
                matchIndexes = fn( [], seed.length, argument ),
                i = matchIndexes.length;

            // Match elements found at the specified indexes
            while ( i-- ) {
                if ( seed[ (j = matchIndexes[i]) ] ) {
                    seed[j] = !(matches[j] = seed[j]);
                }
            }
        });
    });
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
    return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
    // documentElement is verified for cases where it doesn't yet exist
    // (such as loading iframes in IE - #4833)
    var documentElement = elem && (elem.ownerDocument || elem).documentElement;
    return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
    var hasCompare, parent,
        doc = node ? node.ownerDocument || node : preferredDoc;

    // If no document and documentElement is available, return
    if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
        return document;
    }

    // Set our document
    document = doc;
    docElem = doc.documentElement;
    parent = doc.defaultView;

    // Support: IE>8
    // If iframe document is assigned to "document" variable and if iframe has been reloaded,
    // IE will throw "permission denied" error when accessing "document" variable, see jQuery #13936
    // IE6-8 do not support the defaultView property so parent will be undefined
    if ( parent && parent !== parent.top ) {
        // IE11 does not have attachEvent, so all must suffer
        if ( parent.addEventListener ) {
            parent.addEventListener( "unload", unloadHandler, false );
        } else if ( parent.attachEvent ) {
            parent.attachEvent( "onunload", unloadHandler );
        }
    }

    /* Support tests
    ---------------------------------------------------------------------- */
    documentIsHTML = !isXML( doc );

    /* Attributes
    ---------------------------------------------------------------------- */

    // Support: IE<8
    // Verify that getAttribute really returns attributes and not properties
    // (excepting IE8 booleans)
    support.attributes = assert(function( div ) {
        div.className = "i";
        return !div.getAttribute("className");
    });

    /* getElement(s)By*
    ---------------------------------------------------------------------- */

    // Check if getElementsByTagName("*") returns only elements
    support.getElementsByTagName = assert(function( div ) {
        div.appendChild( doc.createComment("") );
        return !div.getElementsByTagName("*").length;
    });

    // Support: IE<9
    support.getElementsByClassName = rnative.test( doc.getElementsByClassName );

    // Support: IE<10
    // Check if getElementById returns elements by name
    // The broken getElementById methods don't pick up programatically-set names,
    // so use a roundabout getElementsByName test
    support.getById = assert(function( div ) {
        docElem.appendChild( div ).id = expando;
        return !doc.getElementsByName || !doc.getElementsByName( expando ).length;
    });

    // ID find and filter
    if ( support.getById ) {
        Expr.find["ID"] = function( id, context ) {
            if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
                var m = context.getElementById( id );
                // Check parentNode to catch when Blackberry 4.6 returns
                // nodes that are no longer in the document #6963
                return m && m.parentNode ? [ m ] : [];
            }
        };
        Expr.filter["ID"] = function( id ) {
            var attrId = id.replace( runescape, funescape );
            return function( elem ) {
                return elem.getAttribute("id") === attrId;
            };
        };
    } else {
        // Support: IE6/7
        // getElementById is not reliable as a find shortcut
        delete Expr.find["ID"];

        Expr.filter["ID"] =  function( id ) {
            var attrId = id.replace( runescape, funescape );
            return function( elem ) {
                var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
                return node && node.value === attrId;
            };
        };
    }

    // Tag
    Expr.find["TAG"] = support.getElementsByTagName ?
        function( tag, context ) {
            if ( typeof context.getElementsByTagName !== "undefined" ) {
                return context.getElementsByTagName( tag );

            // DocumentFragment nodes don't have gEBTN
            } else if ( support.qsa ) {
                return context.querySelectorAll( tag );
            }
        } :

        function( tag, context ) {
            var elem,
                tmp = [],
                i = 0,
                // By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
                results = context.getElementsByTagName( tag );

            // Filter out possible comments
            if ( tag === "*" ) {
                while ( (elem = results[i++]) ) {
                    if ( elem.nodeType === 1 ) {
                        tmp.push( elem );
                    }
                }

                return tmp;
            }
            return results;
        };

    // Class
    Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
        if ( documentIsHTML ) {
            return context.getElementsByClassName( className );
        }
    };

    /* QSA/matchesSelector
    ---------------------------------------------------------------------- */

    // QSA and matchesSelector support

    // matchesSelector(:active) reports false when true (IE9/Opera 11.5)
    rbuggyMatches = [];

    // qSa(:focus) reports false when true (Chrome 21)
    // We allow this because of a bug in IE8/9 that throws an error
    // whenever `document.activeElement` is accessed on an iframe
    // So, we allow :focus to pass through QSA all the time to avoid the IE error
    // See http://bugs.jquery.com/ticket/13378
    rbuggyQSA = [];

    if ( (support.qsa = rnative.test( doc.querySelectorAll )) ) {
        // Build QSA regex
        // Regex strategy adopted from Diego Perini
        assert(function( div ) {
            // Select is set to empty string on purpose
            // This is to test IE's treatment of not explicitly
            // setting a boolean content attribute,
            // since its presence should be enough
            // http://bugs.jquery.com/ticket/12359
            docElem.appendChild( div ).innerHTML = "<a id='" + expando + "'></a>" +
                "<select id='" + expando + "-\f]' msallowcapture=''>" +
                "<option selected=''></option></select>";

            // Support: IE8, Opera 11-12.16
            // Nothing should be selected when empty strings follow ^= or $= or *=
            // The test attribute must be unknown in Opera but "safe" for WinRT
            // http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
            if ( div.querySelectorAll("[msallowcapture^='']").length ) {
                rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
            }

            // Support: IE8
            // Boolean attributes and "value" are not treated correctly
            if ( !div.querySelectorAll("[selected]").length ) {
                rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
            }

            // Support: Chrome<29, Android<4.2+, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.7+
            if ( !div.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
                rbuggyQSA.push("~=");
            }

            // Webkit/Opera - :checked should return selected option elements
            // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
            // IE8 throws error here and will not see later tests
            if ( !div.querySelectorAll(":checked").length ) {
                rbuggyQSA.push(":checked");
            }

            // Support: Safari 8+, iOS 8+
            // https://bugs.webkit.org/show_bug.cgi?id=136851
            // In-page `selector#id sibing-combinator selector` fails
            if ( !div.querySelectorAll( "a#" + expando + "+*" ).length ) {
                rbuggyQSA.push(".#.+[+~]");
            }
        });

        assert(function( div ) {
            // Support: Windows 8 Native Apps
            // The type and name attributes are restricted during .innerHTML assignment
            var input = doc.createElement("input");
            input.setAttribute( "type", "hidden" );
            div.appendChild( input ).setAttribute( "name", "D" );

            // Support: IE8
            // Enforce case-sensitivity of name attribute
            if ( div.querySelectorAll("[name=d]").length ) {
                rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
            }

            // FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
            // IE8 throws error here and will not see later tests
            if ( !div.querySelectorAll(":enabled").length ) {
                rbuggyQSA.push( ":enabled", ":disabled" );
            }

            // Opera 10-11 does not throw on post-comma invalid pseudos
            div.querySelectorAll("*,:x");
            rbuggyQSA.push(",.*:");
        });
    }

    if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
        docElem.webkitMatchesSelector ||
        docElem.mozMatchesSelector ||
        docElem.oMatchesSelector ||
        docElem.msMatchesSelector) )) ) {

        assert(function( div ) {
            // Check to see if it's possible to do matchesSelector
            // on a disconnected node (IE 9)
            support.disconnectedMatch = matches.call( div, "div" );

            // This should fail with an exception
            // Gecko does not error, returns false instead
            matches.call( div, "[s!='']:x" );
            rbuggyMatches.push( "!=", pseudos );
        });
    }

    rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
    rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

    /* Contains
    ---------------------------------------------------------------------- */
    hasCompare = rnative.test( docElem.compareDocumentPosition );

    // Element contains another
    // Purposefully does not implement inclusive descendent
    // As in, an element does not contain itself
    contains = hasCompare || rnative.test( docElem.contains ) ?
        function( a, b ) {
            var adown = a.nodeType === 9 ? a.documentElement : a,
                bup = b && b.parentNode;
            return a === bup || !!( bup && bup.nodeType === 1 && (
                adown.contains ?
                    adown.contains( bup ) :
                    a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
            ));
        } :
        function( a, b ) {
            if ( b ) {
                while ( (b = b.parentNode) ) {
                    if ( b === a ) {
                        return true;
                    }
                }
            }
            return false;
        };

    /* Sorting
    ---------------------------------------------------------------------- */

    // Document order sorting
    sortOrder = hasCompare ?
    function( a, b ) {

        // Flag for duplicate removal
        if ( a === b ) {
            hasDuplicate = true;
            return 0;
        }

        // Sort on method existence if only one input has compareDocumentPosition
        var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
        if ( compare ) {
            return compare;
        }

        // Calculate position if both inputs belong to the same document
        compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
            a.compareDocumentPosition( b ) :

            // Otherwise we know they are disconnected
            1;

        // Disconnected nodes
        if ( compare & 1 ||
            (!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

            // Choose the first element that is related to our preferred document
            if ( a === doc || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
                return -1;
            }
            if ( b === doc || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
                return 1;
            }

            // Maintain original order
            return sortInput ?
                ( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
                0;
        }

        return compare & 4 ? -1 : 1;
    } :
    function( a, b ) {
        // Exit early if the nodes are identical
        if ( a === b ) {
            hasDuplicate = true;
            return 0;
        }

        var cur,
            i = 0,
            aup = a.parentNode,
            bup = b.parentNode,
            ap = [ a ],
            bp = [ b ];

        // Parentless nodes are either documents or disconnected
        if ( !aup || !bup ) {
            return a === doc ? -1 :
                b === doc ? 1 :
                aup ? -1 :
                bup ? 1 :
                sortInput ?
                ( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
                0;

        // If the nodes are siblings, we can do a quick check
        } else if ( aup === bup ) {
            return siblingCheck( a, b );
        }

        // Otherwise we need full lists of their ancestors for comparison
        cur = a;
        while ( (cur = cur.parentNode) ) {
            ap.unshift( cur );
        }
        cur = b;
        while ( (cur = cur.parentNode) ) {
            bp.unshift( cur );
        }

        // Walk down the tree looking for a discrepancy
        while ( ap[i] === bp[i] ) {
            i++;
        }

        return i ?
            // Do a sibling check if the nodes have a common ancestor
            siblingCheck( ap[i], bp[i] ) :

            // Otherwise nodes in our document sort first
            ap[i] === preferredDoc ? -1 :
            bp[i] === preferredDoc ? 1 :
            0;
    };

    return doc;
};

Sizzle.matches = function( expr, elements ) {
    return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
    // Set document vars if needed
    if ( ( elem.ownerDocument || elem ) !== document ) {
        setDocument( elem );
    }

    // Make sure that attribute selectors are quoted
    expr = expr.replace( rattributeQuotes, "='$1']" );

    if ( support.matchesSelector && documentIsHTML &&
        ( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
        ( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

        try {
            var ret = matches.call( elem, expr );

            // IE 9's matchesSelector returns false on disconnected nodes
            if ( ret || support.disconnectedMatch ||
                    // As well, disconnected nodes are said to be in a document
                    // fragment in IE 9
                    elem.document && elem.document.nodeType !== 11 ) {
                return ret;
            }
        } catch (e) {}
    }

    return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
    // Set document vars if needed
    if ( ( context.ownerDocument || context ) !== document ) {
        setDocument( context );
    }
    return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
    // Set document vars if needed
    if ( ( elem.ownerDocument || elem ) !== document ) {
        setDocument( elem );
    }

    var fn = Expr.attrHandle[ name.toLowerCase() ],
        // Don't get fooled by Object.prototype properties (jQuery #13807)
        val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
            fn( elem, name, !documentIsHTML ) :
            undefined;

    return val !== undefined ?
        val :
        support.attributes || !documentIsHTML ?
            elem.getAttribute( name ) :
            (val = elem.getAttributeNode(name)) && val.specified ?
                val.value :
                null;
};

Sizzle.error = function( msg ) {
    throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
    var elem,
        duplicates = [],
        j = 0,
        i = 0;

    // Unless we *know* we can detect duplicates, assume their presence
    hasDuplicate = !support.detectDuplicates;
    sortInput = !support.sortStable && results.slice( 0 );
    results.sort( sortOrder );

    if ( hasDuplicate ) {
        while ( (elem = results[i++]) ) {
            if ( elem === results[ i ] ) {
                j = duplicates.push( i );
            }
        }
        while ( j-- ) {
            results.splice( duplicates[ j ], 1 );
        }
    }

    // Clear input after sorting to release objects
    // See https://github.com/jquery/sizzle/pull/225
    sortInput = null;

    return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
    var node,
        ret = "",
        i = 0,
        nodeType = elem.nodeType;

    if ( !nodeType ) {
        // If no nodeType, this is expected to be an array
        while ( (node = elem[i++]) ) {
            // Do not traverse comment nodes
            ret += getText( node );
        }
    } else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
        // Use textContent for elements
        // innerText usage removed for consistency of new lines (jQuery #11153)
        if ( typeof elem.textContent === "string" ) {
            return elem.textContent;
        } else {
            // Traverse its children
            for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
                ret += getText( elem );
            }
        }
    } else if ( nodeType === 3 || nodeType === 4 ) {
        return elem.nodeValue;
    }
    // Do not include comment or processing instruction nodes

    return ret;
};

Expr = Sizzle.selectors = {

    // Can be adjusted by the user
    cacheLength: 50,

    createPseudo: markFunction,

    match: matchExpr,

    attrHandle: {},

    find: {},

    relative: {
        ">": { dir: "parentNode", first: true },
        " ": { dir: "parentNode" },
        "+": { dir: "previousSibling", first: true },
        "~": { dir: "previousSibling" }
    },

    preFilter: {
        "ATTR": function( match ) {
            match[1] = match[1].replace( runescape, funescape );

            // Move the given value to match[3] whether quoted or unquoted
            match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

            if ( match[2] === "~=" ) {
                match[3] = " " + match[3] + " ";
            }

            return match.slice( 0, 4 );
        },

        "CHILD": function( match ) {
            /* matches from matchExpr["CHILD"]
                1 type (only|nth|...)
                2 what (child|of-type)
                3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
                4 xn-component of xn+y argument ([+-]?\d*n|)
                5 sign of xn-component
                6 x of xn-component
                7 sign of y-component
                8 y of y-component
            */
            match[1] = match[1].toLowerCase();

            if ( match[1].slice( 0, 3 ) === "nth" ) {
                // nth-* requires argument
                if ( !match[3] ) {
                    Sizzle.error( match[0] );
                }

                // numeric x and y parameters for Expr.filter.CHILD
                // remember that false/true cast respectively to 0/1
                match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
                match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

            // other types prohibit arguments
            } else if ( match[3] ) {
                Sizzle.error( match[0] );
            }

            return match;
        },

        "PSEUDO": function( match ) {
            var excess,
                unquoted = !match[6] && match[2];

            if ( matchExpr["CHILD"].test( match[0] ) ) {
                return null;
            }

            // Accept quoted arguments as-is
            if ( match[3] ) {
                match[2] = match[4] || match[5] || "";

            // Strip excess characters from unquoted arguments
            } else if ( unquoted && rpseudo.test( unquoted ) &&
                // Get excess from tokenize (recursively)
                (excess = tokenize( unquoted, true )) &&
                // advance to the next closing parenthesis
                (excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

                // excess is a negative index
                match[0] = match[0].slice( 0, excess );
                match[2] = unquoted.slice( 0, excess );
            }

            // Return only captures needed by the pseudo filter method (type and argument)
            return match.slice( 0, 3 );
        }
    },

    filter: {

        "TAG": function( nodeNameSelector ) {
            var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
            return nodeNameSelector === "*" ?
                function() { return true; } :
                function( elem ) {
                    return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
                };
        },

        "CLASS": function( className ) {
            var pattern = classCache[ className + " " ];

            return pattern ||
                (pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
                classCache( className, function( elem ) {
                    return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
                });
        },

        "ATTR": function( name, operator, check ) {
            return function( elem ) {
                var result = Sizzle.attr( elem, name );

                if ( result == null ) {
                    return operator === "!=";
                }
                if ( !operator ) {
                    return true;
                }

                result += "";

                return operator === "=" ? result === check :
                    operator === "!=" ? result !== check :
                    operator === "^=" ? check && result.indexOf( check ) === 0 :
                    operator === "*=" ? check && result.indexOf( check ) > -1 :
                    operator === "$=" ? check && result.slice( -check.length ) === check :
                    operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
                    operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
                    false;
            };
        },

        "CHILD": function( type, what, argument, first, last ) {
            var simple = type.slice( 0, 3 ) !== "nth",
                forward = type.slice( -4 ) !== "last",
                ofType = what === "of-type";

            return first === 1 && last === 0 ?

                // Shortcut for :nth-*(n)
                function( elem ) {
                    return !!elem.parentNode;
                } :

                function( elem, context, xml ) {
                    var cache, outerCache, node, diff, nodeIndex, start,
                        dir = simple !== forward ? "nextSibling" : "previousSibling",
                        parent = elem.parentNode,
                        name = ofType && elem.nodeName.toLowerCase(),
                        useCache = !xml && !ofType;

                    if ( parent ) {

                        // :(first|last|only)-(child|of-type)
                        if ( simple ) {
                            while ( dir ) {
                                node = elem;
                                while ( (node = node[ dir ]) ) {
                                    if ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) {
                                        return false;
                                    }
                                }
                                // Reverse direction for :only-* (if we haven't yet done so)
                                start = dir = type === "only" && !start && "nextSibling";
                            }
                            return true;
                        }

                        start = [ forward ? parent.firstChild : parent.lastChild ];

                        // non-xml :nth-child(...) stores cache data on `parent`
                        if ( forward && useCache ) {
                            // Seek `elem` from a previously-cached index
                            outerCache = parent[ expando ] || (parent[ expando ] = {});
                            cache = outerCache[ type ] || [];
                            nodeIndex = cache[0] === dirruns && cache[1];
                            diff = cache[0] === dirruns && cache[2];
                            node = nodeIndex && parent.childNodes[ nodeIndex ];

                            while ( (node = ++nodeIndex && node && node[ dir ] ||

                                // Fallback to seeking `elem` from the start
                                (diff = nodeIndex = 0) || start.pop()) ) {

                                // When found, cache indexes on `parent` and break
                                if ( node.nodeType === 1 && ++diff && node === elem ) {
                                    outerCache[ type ] = [ dirruns, nodeIndex, diff ];
                                    break;
                                }
                            }

                        // Use previously-cached element index if available
                        } else if ( useCache && (cache = (elem[ expando ] || (elem[ expando ] = {}))[ type ]) && cache[0] === dirruns ) {
                            diff = cache[1];

                        // xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)
                        } else {
                            // Use the same loop as above to seek `elem` from the start
                            while ( (node = ++nodeIndex && node && node[ dir ] ||
                                (diff = nodeIndex = 0) || start.pop()) ) {

                                if ( ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) && ++diff ) {
                                    // Cache the index of each encountered element
                                    if ( useCache ) {
                                        (node[ expando ] || (node[ expando ] = {}))[ type ] = [ dirruns, diff ];
                                    }

                                    if ( node === elem ) {
                                        break;
                                    }
                                }
                            }
                        }

                        // Incorporate the offset, then check against cycle size
                        diff -= last;
                        return diff === first || ( diff % first === 0 && diff / first >= 0 );
                    }
                };
        },

        "PSEUDO": function( pseudo, argument ) {
            // pseudo-class names are case-insensitive
            // http://www.w3.org/TR/selectors/#pseudo-classes
            // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
            // Remember that setFilters inherits from pseudos
            var args,
                fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
                    Sizzle.error( "unsupported pseudo: " + pseudo );

            // The user may use createPseudo to indicate that
            // arguments are needed to create the filter function
            // just as Sizzle does
            if ( fn[ expando ] ) {
                return fn( argument );
            }

            // But maintain support for old signatures
            if ( fn.length > 1 ) {
                args = [ pseudo, pseudo, "", argument ];
                return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
                    markFunction(function( seed, matches ) {
                        var idx,
                            matched = fn( seed, argument ),
                            i = matched.length;
                        while ( i-- ) {
                            idx = indexOf( seed, matched[i] );
                            seed[ idx ] = !( matches[ idx ] = matched[i] );
                        }
                    }) :
                    function( elem ) {
                        return fn( elem, 0, args );
                    };
            }

            return fn;
        }
    },

    pseudos: {
        // Potentially complex pseudos
        "not": markFunction(function( selector ) {
            // Trim the selector passed to compile
            // to avoid treating leading and trailing
            // spaces as combinators
            var input = [],
                results = [],
                matcher = compile( selector.replace( rtrim, "$1" ) );

            return matcher[ expando ] ?
                markFunction(function( seed, matches, context, xml ) {
                    var elem,
                        unmatched = matcher( seed, null, xml, [] ),
                        i = seed.length;

                    // Match elements unmatched by `matcher`
                    while ( i-- ) {
                        if ( (elem = unmatched[i]) ) {
                            seed[i] = !(matches[i] = elem);
                        }
                    }
                }) :
                function( elem, context, xml ) {
                    input[0] = elem;
                    matcher( input, null, xml, results );
                    // Don't keep the element (issue #299)
                    input[0] = null;
                    return !results.pop();
                };
        }),

        "has": markFunction(function( selector ) {
            return function( elem ) {
                return Sizzle( selector, elem ).length > 0;
            };
        }),

        "contains": markFunction(function( text ) {
            text = text.replace( runescape, funescape );
            return function( elem ) {
                return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
            };
        }),

        // "Whether an element is represented by a :lang() selector
        // is based solely on the element's language value
        // being equal to the identifier C,
        // or beginning with the identifier C immediately followed by "-".
        // The matching of C against the element's language value is performed case-insensitively.
        // The identifier C does not have to be a valid language name."
        // http://www.w3.org/TR/selectors/#lang-pseudo
        "lang": markFunction( function( lang ) {
            // lang value must be a valid identifier
            if ( !ridentifier.test(lang || "") ) {
                Sizzle.error( "unsupported lang: " + lang );
            }
            lang = lang.replace( runescape, funescape ).toLowerCase();
            return function( elem ) {
                var elemLang;
                do {
                    if ( (elemLang = documentIsHTML ?
                        elem.lang :
                        elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

                        elemLang = elemLang.toLowerCase();
                        return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
                    }
                } while ( (elem = elem.parentNode) && elem.nodeType === 1 );
                return false;
            };
        }),

        // Miscellaneous
        "target": function( elem ) {
            var hash = window.location && window.location.hash;
            return hash && hash.slice( 1 ) === elem.id;
        },

        "root": function( elem ) {
            return elem === docElem;
        },

        "focus": function( elem ) {
            return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
        },

        // Boolean properties
        "enabled": function( elem ) {
            return elem.disabled === false;
        },

        "disabled": function( elem ) {
            return elem.disabled === true;
        },

        "checked": function( elem ) {
            // In CSS3, :checked should return both checked and selected elements
            // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
            var nodeName = elem.nodeName.toLowerCase();
            return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
        },

        "selected": function( elem ) {
            // Accessing this property makes selected-by-default
            // options in Safari work properly
            if ( elem.parentNode ) {
                elem.parentNode.selectedIndex;
            }

            return elem.selected === true;
        },

        // Contents
        "empty": function( elem ) {
            // http://www.w3.org/TR/selectors/#empty-pseudo
            // :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
            //   but not by others (comment: 8; processing instruction: 7; etc.)
            // nodeType < 6 works because attributes (2) do not appear as children
            for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
                if ( elem.nodeType < 6 ) {
                    return false;
                }
            }
            return true;
        },

        "parent": function( elem ) {
            return !Expr.pseudos["empty"]( elem );
        },

        // Element/input types
        "header": function( elem ) {
            return rheader.test( elem.nodeName );
        },

        "input": function( elem ) {
            return rinputs.test( elem.nodeName );
        },

        "button": function( elem ) {
            var name = elem.nodeName.toLowerCase();
            return name === "input" && elem.type === "button" || name === "button";
        },

        "text": function( elem ) {
            var attr;
            return elem.nodeName.toLowerCase() === "input" &&
                elem.type === "text" &&

                // Support: IE<8
                // New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
                ( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
        },

        // Position-in-collection
        "first": createPositionalPseudo(function() {
            return [ 0 ];
        }),

        "last": createPositionalPseudo(function( matchIndexes, length ) {
            return [ length - 1 ];
        }),

        "eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
            return [ argument < 0 ? argument + length : argument ];
        }),

        "even": createPositionalPseudo(function( matchIndexes, length ) {
            var i = 0;
            for ( ; i < length; i += 2 ) {
                matchIndexes.push( i );
            }
            return matchIndexes;
        }),

        "odd": createPositionalPseudo(function( matchIndexes, length ) {
            var i = 1;
            for ( ; i < length; i += 2 ) {
                matchIndexes.push( i );
            }
            return matchIndexes;
        }),

        "lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
            var i = argument < 0 ? argument + length : argument;
            for ( ; --i >= 0; ) {
                matchIndexes.push( i );
            }
            return matchIndexes;
        }),

        "gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
            var i = argument < 0 ? argument + length : argument;
            for ( ; ++i < length; ) {
                matchIndexes.push( i );
            }
            return matchIndexes;
        })
    }
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
    Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
    Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
    var matched, match, tokens, type,
        soFar, groups, preFilters,
        cached = tokenCache[ selector + " " ];

    if ( cached ) {
        return parseOnly ? 0 : cached.slice( 0 );
    }

    soFar = selector;
    groups = [];
    preFilters = Expr.preFilter;

    while ( soFar ) {

        // Comma and first run
        if ( !matched || (match = rcomma.exec( soFar )) ) {
            if ( match ) {
                // Don't consume trailing commas as valid
                soFar = soFar.slice( match[0].length ) || soFar;
            }
            groups.push( (tokens = []) );
        }

        matched = false;

        // Combinators
        if ( (match = rcombinators.exec( soFar )) ) {
            matched = match.shift();
            tokens.push({
                value: matched,
                // Cast descendant combinators to space
                type: match[0].replace( rtrim, " " )
            });
            soFar = soFar.slice( matched.length );
        }

        // Filters
        for ( type in Expr.filter ) {
            if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
                (match = preFilters[ type ]( match ))) ) {
                matched = match.shift();
                tokens.push({
                    value: matched,
                    type: type,
                    matches: match
                });
                soFar = soFar.slice( matched.length );
            }
        }

        if ( !matched ) {
            break;
        }
    }

    // Return the length of the invalid excess
    // if we're just parsing
    // Otherwise, throw an error or return tokens
    return parseOnly ?
        soFar.length :
        soFar ?
            Sizzle.error( selector ) :
            // Cache the tokens
            tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
    var i = 0,
        len = tokens.length,
        selector = "";
    for ( ; i < len; i++ ) {
        selector += tokens[i].value;
    }
    return selector;
}

function addCombinator( matcher, combinator, base ) {
    var dir = combinator.dir,
        checkNonElements = base && dir === "parentNode",
        doneName = done++;

    return combinator.first ?
        // Check against closest ancestor/preceding element
        function( elem, context, xml ) {
            while ( (elem = elem[ dir ]) ) {
                if ( elem.nodeType === 1 || checkNonElements ) {
                    return matcher( elem, context, xml );
                }
            }
        } :

        // Check against all ancestor/preceding elements
        function( elem, context, xml ) {
            var oldCache, outerCache,
                newCache = [ dirruns, doneName ];

            // We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
            if ( xml ) {
                while ( (elem = elem[ dir ]) ) {
                    if ( elem.nodeType === 1 || checkNonElements ) {
                        if ( matcher( elem, context, xml ) ) {
                            return true;
                        }
                    }
                }
            } else {
                while ( (elem = elem[ dir ]) ) {
                    if ( elem.nodeType === 1 || checkNonElements ) {
                        outerCache = elem[ expando ] || (elem[ expando ] = {});
                        if ( (oldCache = outerCache[ dir ]) &&
                            oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

                            // Assign to newCache so results back-propagate to previous elements
                            return (newCache[ 2 ] = oldCache[ 2 ]);
                        } else {
                            // Reuse newcache so results back-propagate to previous elements
                            outerCache[ dir ] = newCache;

                            // A match means we're done; a fail means we have to keep checking
                            if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
                                return true;
                            }
                        }
                    }
                }
            }
        };
}

function elementMatcher( matchers ) {
    return matchers.length > 1 ?
        function( elem, context, xml ) {
            var i = matchers.length;
            while ( i-- ) {
                if ( !matchers[i]( elem, context, xml ) ) {
                    return false;
                }
            }
            return true;
        } :
        matchers[0];
}

function multipleContexts( selector, contexts, results ) {
    var i = 0,
        len = contexts.length;
    for ( ; i < len; i++ ) {
        Sizzle( selector, contexts[i], results );
    }
    return results;
}

function condense( unmatched, map, filter, context, xml ) {
    var elem,
        newUnmatched = [],
        i = 0,
        len = unmatched.length,
        mapped = map != null;

    for ( ; i < len; i++ ) {
        if ( (elem = unmatched[i]) ) {
            if ( !filter || filter( elem, context, xml ) ) {
                newUnmatched.push( elem );
                if ( mapped ) {
                    map.push( i );
                }
            }
        }
    }

    return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
    if ( postFilter && !postFilter[ expando ] ) {
        postFilter = setMatcher( postFilter );
    }
    if ( postFinder && !postFinder[ expando ] ) {
        postFinder = setMatcher( postFinder, postSelector );
    }
    return markFunction(function( seed, results, context, xml ) {
        var temp, i, elem,
            preMap = [],
            postMap = [],
            preexisting = results.length,

            // Get initial elements from seed or context
            elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

            // Prefilter to get matcher input, preserving a map for seed-results synchronization
            matcherIn = preFilter && ( seed || !selector ) ?
                condense( elems, preMap, preFilter, context, xml ) :
                elems,

            matcherOut = matcher ?
                // If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
                postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

                    // ...intermediate processing is necessary
                    [] :

                    // ...otherwise use results directly
                    results :
                matcherIn;

        // Find primary matches
        if ( matcher ) {
            matcher( matcherIn, matcherOut, context, xml );
        }

        // Apply postFilter
        if ( postFilter ) {
            temp = condense( matcherOut, postMap );
            postFilter( temp, [], context, xml );

            // Un-match failing elements by moving them back to matcherIn
            i = temp.length;
            while ( i-- ) {
                if ( (elem = temp[i]) ) {
                    matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
                }
            }
        }

        if ( seed ) {
            if ( postFinder || preFilter ) {
                if ( postFinder ) {
                    // Get the final matcherOut by condensing this intermediate into postFinder contexts
                    temp = [];
                    i = matcherOut.length;
                    while ( i-- ) {
                        if ( (elem = matcherOut[i]) ) {
                            // Restore matcherIn since elem is not yet a final match
                            temp.push( (matcherIn[i] = elem) );
                        }
                    }
                    postFinder( null, (matcherOut = []), temp, xml );
                }

                // Move matched elements from seed to results to keep them synchronized
                i = matcherOut.length;
                while ( i-- ) {
                    if ( (elem = matcherOut[i]) &&
                        (temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

                        seed[temp] = !(results[temp] = elem);
                    }
                }
            }

        // Add elements to results, through postFinder if defined
        } else {
            matcherOut = condense(
                matcherOut === results ?
                    matcherOut.splice( preexisting, matcherOut.length ) :
                    matcherOut
            );
            if ( postFinder ) {
                postFinder( null, results, matcherOut, xml );
            } else {
                push.apply( results, matcherOut );
            }
        }
    });
}

function matcherFromTokens( tokens ) {
    var checkContext, matcher, j,
        len = tokens.length,
        leadingRelative = Expr.relative[ tokens[0].type ],
        implicitRelative = leadingRelative || Expr.relative[" "],
        i = leadingRelative ? 1 : 0,

        // The foundational matcher ensures that elements are reachable from top-level context(s)
        matchContext = addCombinator( function( elem ) {
            return elem === checkContext;
        }, implicitRelative, true ),
        matchAnyContext = addCombinator( function( elem ) {
            return indexOf( checkContext, elem ) > -1;
        }, implicitRelative, true ),
        matchers = [ function( elem, context, xml ) {
            var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
                (checkContext = context).nodeType ?
                    matchContext( elem, context, xml ) :
                    matchAnyContext( elem, context, xml ) );
            // Avoid hanging onto element (issue #299)
            checkContext = null;
            return ret;
        } ];

    for ( ; i < len; i++ ) {
        if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
            matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
        } else {
            matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

            // Return special upon seeing a positional matcher
            if ( matcher[ expando ] ) {
                // Find the next relative operator (if any) for proper handling
                j = ++i;
                for ( ; j < len; j++ ) {
                    if ( Expr.relative[ tokens[j].type ] ) {
                        break;
                    }
                }
                return setMatcher(
                    i > 1 && elementMatcher( matchers ),
                    i > 1 && toSelector(
                        // If the preceding token was a descendant combinator, insert an implicit any-element `*`
                        tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
                    ).replace( rtrim, "$1" ),
                    matcher,
                    i < j && matcherFromTokens( tokens.slice( i, j ) ),
                    j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
                    j < len && toSelector( tokens )
                );
            }
            matchers.push( matcher );
        }
    }

    return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
    var bySet = setMatchers.length > 0,
        byElement = elementMatchers.length > 0,
        superMatcher = function( seed, context, xml, results, outermost ) {
            var elem, j, matcher,
                matchedCount = 0,
                i = "0",
                unmatched = seed && [],
                setMatched = [],
                contextBackup = outermostContext,
                // We must always have either seed elements or outermost context
                elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
                // Use integer dirruns iff this is the outermost matcher
                dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
                len = elems.length;

            if ( outermost ) {
                outermostContext = context !== document && context;
            }

            // Add elements passing elementMatchers directly to results
            // Keep `i` a string if there are no elements so `matchedCount` will be "00" below
            // Support: IE<9, Safari
            // Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
            for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
                if ( byElement && elem ) {
                    j = 0;
                    while ( (matcher = elementMatchers[j++]) ) {
                        if ( matcher( elem, context, xml ) ) {
                            results.push( elem );
                            break;
                        }
                    }
                    if ( outermost ) {
                        dirruns = dirrunsUnique;
                    }
                }

                // Track unmatched elements for set filters
                if ( bySet ) {
                    // They will have gone through all possible matchers
                    if ( (elem = !matcher && elem) ) {
                        matchedCount--;
                    }

                    // Lengthen the array for every element, matched or not
                    if ( seed ) {
                        unmatched.push( elem );
                    }
                }
            }

            // Apply set filters to unmatched elements
            matchedCount += i;
            if ( bySet && i !== matchedCount ) {
                j = 0;
                while ( (matcher = setMatchers[j++]) ) {
                    matcher( unmatched, setMatched, context, xml );
                }

                if ( seed ) {
                    // Reintegrate element matches to eliminate the need for sorting
                    if ( matchedCount > 0 ) {
                        while ( i-- ) {
                            if ( !(unmatched[i] || setMatched[i]) ) {
                                setMatched[i] = pop.call( results );
                            }
                        }
                    }

                    // Discard index placeholder values to get only actual matches
                    setMatched = condense( setMatched );
                }

                // Add matches to results
                push.apply( results, setMatched );

                // Seedless set matches succeeding multiple successful matchers stipulate sorting
                if ( outermost && !seed && setMatched.length > 0 &&
                    ( matchedCount + setMatchers.length ) > 1 ) {

                    Sizzle.uniqueSort( results );
                }
            }

            // Override manipulation of globals by nested matchers
            if ( outermost ) {
                dirruns = dirrunsUnique;
                outermostContext = contextBackup;
            }

            return unmatched;
        };

    return bySet ?
        markFunction( superMatcher ) :
        superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
    var i,
        setMatchers = [],
        elementMatchers = [],
        cached = compilerCache[ selector + " " ];

    if ( !cached ) {
        // Generate a function of recursive functions that can be used to check each element
        if ( !match ) {
            match = tokenize( selector );
        }
        i = match.length;
        while ( i-- ) {
            cached = matcherFromTokens( match[i] );
            if ( cached[ expando ] ) {
                setMatchers.push( cached );
            } else {
                elementMatchers.push( cached );
            }
        }

        // Cache the compiled function
        cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

        // Save selector and tokenization
        cached.selector = selector;
    }
    return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
    var i, tokens, token, type, find,
        compiled = typeof selector === "function" && selector,
        match = !seed && tokenize( (selector = compiled.selector || selector) );

    results = results || [];

    // Try to minimize operations if there is no seed and only one group
    if ( match.length === 1 ) {

        // Take a shortcut and set the context if the root selector is an ID
        tokens = match[0] = match[0].slice( 0 );
        if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
                support.getById && context.nodeType === 9 && documentIsHTML &&
                Expr.relative[ tokens[1].type ] ) {

            context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
            if ( !context ) {
                return results;

            // Precompiled matchers will still verify ancestry, so step up a level
            } else if ( compiled ) {
                context = context.parentNode;
            }

            selector = selector.slice( tokens.shift().value.length );
        }

        // Fetch a seed set for right-to-left matching
        i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
        while ( i-- ) {
            token = tokens[i];

            // Abort if we hit a combinator
            if ( Expr.relative[ (type = token.type) ] ) {
                break;
            }
            if ( (find = Expr.find[ type ]) ) {
                // Search, expanding context for leading sibling combinators
                if ( (seed = find(
                    token.matches[0].replace( runescape, funescape ),
                    rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
                )) ) {

                    // If seed is empty or no tokens remain, we can return early
                    tokens.splice( i, 1 );
                    selector = seed.length && toSelector( tokens );
                    if ( !selector ) {
                        push.apply( results, seed );
                        return results;
                    }

                    break;
                }
            }
        }
    }

    // Compile and execute a filtering function if one is not provided
    // Provide `match` to avoid retokenization if we modified the selector above
    ( compiled || compile( selector, match ) )(
        seed,
        context,
        !documentIsHTML,
        results,
        rsibling.test( selector ) && testContext( context.parentNode ) || context
    );
    return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( div1 ) {
    // Should return 1, but returns 4 (following)
    return div1.compareDocumentPosition( document.createElement("div") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( div ) {
    div.innerHTML = "<a href='#'></a>";
    return div.firstChild.getAttribute("href") === "#" ;
}) ) {
    addHandle( "type|href|height|width", function( elem, name, isXML ) {
        if ( !isXML ) {
            return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
        }
    });
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( div ) {
    div.innerHTML = "<input/>";
    div.firstChild.setAttribute( "value", "" );
    return div.firstChild.getAttribute( "value" ) === "";
}) ) {
    addHandle( "value", function( elem, name, isXML ) {
        if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
            return elem.defaultValue;
        }
    });
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( div ) {
    return div.getAttribute("disabled") == null;
}) ) {
    addHandle( booleans, function( elem, name, isXML ) {
        var val;
        if ( !isXML ) {
            return elem[ name ] === true ? name.toLowerCase() :
                    (val = elem.getAttributeNode( name )) && val.specified ?
                    val.value :
                null;
        }
    });
}

return Sizzle;

})( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;
jQuery.expr[":"] = jQuery.expr.pseudos;
jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;



var rneedsContext = jQuery.expr.match.needsContext;

var rsingleTag = (/^<(\w+)\s*\/?>(?:<\/\1>|)$/);



var risSimple = /^.[^:#\[\.,]*$/;

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
    if ( jQuery.isFunction( qualifier ) ) {
        return jQuery.grep( elements, function( elem, i ) {
            /* jshint -W018 */
            return !!qualifier.call( elem, i, elem ) !== not;
        });

    }

    if ( qualifier.nodeType ) {
        return jQuery.grep( elements, function( elem ) {
            return ( elem === qualifier ) !== not;
        });

    }

    if ( typeof qualifier === "string" ) {
        if ( risSimple.test( qualifier ) ) {
            return jQuery.filter( qualifier, elements, not );
        }

        qualifier = jQuery.filter( qualifier, elements );
    }

    return jQuery.grep( elements, function( elem ) {
        return ( jQuery.inArray( elem, qualifier ) >= 0 ) !== not;
    });
}

jQuery.filter = function( expr, elems, not ) {
    var elem = elems[ 0 ];

    if ( not ) {
        expr = ":not(" + expr + ")";
    }

    return elems.length === 1 && elem.nodeType === 1 ?
        jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
        jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
            return elem.nodeType === 1;
        }));
};

jQuery.fn.extend({
    find: function( selector ) {
        var i,
            ret = [],
            self = this,
            len = self.length;

        if ( typeof selector !== "string" ) {
            return this.pushStack( jQuery( selector ).filter(function() {
                for ( i = 0; i < len; i++ ) {
                    if ( jQuery.contains( self[ i ], this ) ) {
                        return true;
                    }
                }
            }) );
        }

        for ( i = 0; i < len; i++ ) {
            jQuery.find( selector, self[ i ], ret );
        }

        // Needed because $( selector, context ) becomes $( context ).find( selector )
        ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
        ret.selector = this.selector ? this.selector + " " + selector : selector;
        return ret;
    },
    filter: function( selector ) {
        return this.pushStack( winnow(this, selector || [], false) );
    },
    not: function( selector ) {
        return this.pushStack( winnow(this, selector || [], true) );
    },
    is: function( selector ) {
        return !!winnow(
            this,

            // If this is a positional/relative selector, check membership in the returned set
            // so $("p:first").is("p:last") won't return true for a doc with two "p".
            typeof selector === "string" && rneedsContext.test( selector ) ?
                jQuery( selector ) :
                selector || [],
            false
        ).length;
    }
});


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

    // Use the correct document accordingly with window argument (sandbox)
    document = window.document,

    // A simple way to check for HTML strings
    // Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
    // Strict HTML recognition (#11290: must start with <)
    rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,

    init = jQuery.fn.init = function( selector, context ) {
        var match, elem;

        // HANDLE: $(""), $(null), $(undefined), $(false)
        if ( !selector ) {
            return this;
        }

        // Handle HTML strings
        if ( typeof selector === "string" ) {
            if ( selector.charAt(0) === "<" && selector.charAt( selector.length - 1 ) === ">" && selector.length >= 3 ) {
                // Assume that strings that start and end with <> are HTML and skip the regex check
                match = [ null, selector, null ];

            } else {
                match = rquickExpr.exec( selector );
            }

            // Match html or make sure no context is specified for #id
            if ( match && (match[1] || !context) ) {

                // HANDLE: $(html) -> $(array)
                if ( match[1] ) {
                    context = context instanceof jQuery ? context[0] : context;

                    // scripts is true for back-compat
                    // Intentionally let the error be thrown if parseHTML is not present
                    jQuery.merge( this, jQuery.parseHTML(
                        match[1],
                        context && context.nodeType ? context.ownerDocument || context : document,
                        true
                    ) );

                    // HANDLE: $(html, props)
                    if ( rsingleTag.test( match[1] ) && jQuery.isPlainObject( context ) ) {
                        for ( match in context ) {
                            // Properties of context are called as methods if possible
                            if ( jQuery.isFunction( this[ match ] ) ) {
                                this[ match ]( context[ match ] );

                            // ...and otherwise set as attributes
                            } else {
                                this.attr( match, context[ match ] );
                            }
                        }
                    }

                    return this;

                // HANDLE: $(#id)
                } else {
                    elem = document.getElementById( match[2] );

                    // Check parentNode to catch when Blackberry 4.6 returns
                    // nodes that are no longer in the document #6963
                    if ( elem && elem.parentNode ) {
                        // Handle the case where IE and Opera return items
                        // by name instead of ID
                        if ( elem.id !== match[2] ) {
                            return rootjQuery.find( selector );
                        }

                        // Otherwise, we inject the element directly into the jQuery object
                        this.length = 1;
                        this[0] = elem;
                    }

                    this.context = document;
                    this.selector = selector;
                    return this;
                }

            // HANDLE: $(expr, $(...))
            } else if ( !context || context.jquery ) {
                return ( context || rootjQuery ).find( selector );

            // HANDLE: $(expr, context)
            // (which is just equivalent to: $(context).find(expr)
            } else {
                return this.constructor( context ).find( selector );
            }

        // HANDLE: $(DOMElement)
        } else if ( selector.nodeType ) {
            this.context = this[0] = selector;
            this.length = 1;
            return this;

        // HANDLE: $(function)
        // Shortcut for document ready
        } else if ( jQuery.isFunction( selector ) ) {
            return typeof rootjQuery.ready !== "undefined" ?
                rootjQuery.ready( selector ) :
                // Execute immediately if ready is not present
                selector( jQuery );
        }

        if ( selector.selector !== undefined ) {
            this.selector = selector.selector;
            this.context = selector.context;
        }

        return jQuery.makeArray( selector, this );
    };

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,
    // methods guaranteed to produce a unique set when starting from a unique set
    guaranteedUnique = {
        children: true,
        contents: true,
        next: true,
        prev: true
    };

jQuery.extend({
    dir: function( elem, dir, until ) {
        var matched = [],
            cur = elem[ dir ];

        while ( cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery( cur ).is( until )) ) {
            if ( cur.nodeType === 1 ) {
                matched.push( cur );
            }
            cur = cur[dir];
        }
        return matched;
    },

    sibling: function( n, elem ) {
        var r = [];

        for ( ; n; n = n.nextSibling ) {
            if ( n.nodeType === 1 && n !== elem ) {
                r.push( n );
            }
        }

        return r;
    }
});

jQuery.fn.extend({
    has: function( target ) {
        var i,
            targets = jQuery( target, this ),
            len = targets.length;

        return this.filter(function() {
            for ( i = 0; i < len; i++ ) {
                if ( jQuery.contains( this, targets[i] ) ) {
                    return true;
                }
            }
        });
    },

    closest: function( selectors, context ) {
        var cur,
            i = 0,
            l = this.length,
            matched = [],
            pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
                jQuery( selectors, context || this.context ) :
                0;

        for ( ; i < l; i++ ) {
            for ( cur = this[i]; cur && cur !== context; cur = cur.parentNode ) {
                // Always skip document fragments
                if ( cur.nodeType < 11 && (pos ?
                    pos.index(cur) > -1 :

                    // Don't pass non-elements to Sizzle
                    cur.nodeType === 1 &&
                        jQuery.find.matchesSelector(cur, selectors)) ) {

                    matched.push( cur );
                    break;
                }
            }
        }

        return this.pushStack( matched.length > 1 ? jQuery.unique( matched ) : matched );
    },

    // Determine the position of an element within
    // the matched set of elements
    index: function( elem ) {

        // No argument, return index in parent
        if ( !elem ) {
            return ( this[0] && this[0].parentNode ) ? this.first().prevAll().length : -1;
        }

        // index in selector
        if ( typeof elem === "string" ) {
            return jQuery.inArray( this[0], jQuery( elem ) );
        }

        // Locate the position of the desired element
        return jQuery.inArray(
            // If it receives a jQuery object, the first element is used
            elem.jquery ? elem[0] : elem, this );
    },

    add: function( selector, context ) {
        return this.pushStack(
            jQuery.unique(
                jQuery.merge( this.get(), jQuery( selector, context ) )
            )
        );
    },

    addBack: function( selector ) {
        return this.add( selector == null ?
            this.prevObject : this.prevObject.filter(selector)
        );
    }
});

function sibling( cur, dir ) {
    do {
        cur = cur[ dir ];
    } while ( cur && cur.nodeType !== 1 );

    return cur;
}

jQuery.each({
    parent: function( elem ) {
        var parent = elem.parentNode;
        return parent && parent.nodeType !== 11 ? parent : null;
    },
    parents: function( elem ) {
        return jQuery.dir( elem, "parentNode" );
    },
    parentsUntil: function( elem, i, until ) {
        return jQuery.dir( elem, "parentNode", until );
    },
    next: function( elem ) {
        return sibling( elem, "nextSibling" );
    },
    prev: function( elem ) {
        return sibling( elem, "previousSibling" );
    },
    nextAll: function( elem ) {
        return jQuery.dir( elem, "nextSibling" );
    },
    prevAll: function( elem ) {
        return jQuery.dir( elem, "previousSibling" );
    },
    nextUntil: function( elem, i, until ) {
        return jQuery.dir( elem, "nextSibling", until );
    },
    prevUntil: function( elem, i, until ) {
        return jQuery.dir( elem, "previousSibling", until );
    },
    siblings: function( elem ) {
        return jQuery.sibling( ( elem.parentNode || {} ).firstChild, elem );
    },
    children: function( elem ) {
        return jQuery.sibling( elem.firstChild );
    },
    contents: function( elem ) {
        return jQuery.nodeName( elem, "iframe" ) ?
            elem.contentDocument || elem.contentWindow.document :
            jQuery.merge( [], elem.childNodes );
    }
}, function( name, fn ) {
    jQuery.fn[ name ] = function( until, selector ) {
        var ret = jQuery.map( this, fn, until );

        if ( name.slice( -5 ) !== "Until" ) {
            selector = until;
        }

        if ( selector && typeof selector === "string" ) {
            ret = jQuery.filter( selector, ret );
        }

        if ( this.length > 1 ) {
            // Remove duplicates
            if ( !guaranteedUnique[ name ] ) {
                ret = jQuery.unique( ret );
            }

            // Reverse order for parents* and prev-derivatives
            if ( rparentsprev.test( name ) ) {
                ret = ret.reverse();
            }
        }

        return this.pushStack( ret );
    };
});
var rnotwhite = (/\S+/g);



// String to Object options format cache
var optionsCache = {};

// Convert String-formatted options into Object-formatted ones and store in cache
function createOptions( options ) {
    var object = optionsCache[ options ] = {};
    jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {
        object[ flag ] = true;
    });
    return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *  options: an optional list of space-separated options that will change how
 *          the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *  once:           will ensure the callback list can only be fired once (like a Deferred)
 *
 *  memory:         will keep track of previous values and will call any callback added
 *                  after the list has been fired right away with the latest "memorized"
 *                  values (like a Deferred)
 *
 *  unique:         will ensure a callback can only be added once (no duplicate in the list)
 *
 *  stopOnFalse:    interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

    // Convert options from String-formatted to Object-formatted if needed
    // (we check in cache first)
    options = typeof options === "string" ?
        ( optionsCache[ options ] || createOptions( options ) ) :
        jQuery.extend( {}, options );

    var // Flag to know if list is currently firing
        firing,
        // Last fire value (for non-forgettable lists)
        memory,
        // Flag to know if list was already fired
        fired,
        // End of the loop when firing
        firingLength,
        // Index of currently firing callback (modified by remove if needed)
        firingIndex,
        // First callback to fire (used internally by add and fireWith)
        firingStart,
        // Actual callback list
        list = [],
        // Stack of fire calls for repeatable lists
        stack = !options.once && [],
        // Fire callbacks
        fire = function( data ) {
            memory = options.memory && data;
            fired = true;
            firingIndex = firingStart || 0;
            firingStart = 0;
            firingLength = list.length;
            firing = true;
            for ( ; list && firingIndex < firingLength; firingIndex++ ) {
                if ( list[ firingIndex ].apply( data[ 0 ], data[ 1 ] ) === false && options.stopOnFalse ) {
                    memory = false; // To prevent further calls using add
                    break;
                }
            }
            firing = false;
            if ( list ) {
                if ( stack ) {
                    if ( stack.length ) {
                        fire( stack.shift() );
                    }
                } else if ( memory ) {
                    list = [];
                } else {
                    self.disable();
                }
            }
        },
        // Actual Callbacks object
        self = {
            // Add a callback or a collection of callbacks to the list
            add: function() {
                if ( list ) {
                    // First, we save the current length
                    var start = list.length;
                    (function add( args ) {
                        jQuery.each( args, function( _, arg ) {
                            var type = jQuery.type( arg );
                            if ( type === "function" ) {
                                if ( !options.unique || !self.has( arg ) ) {
                                    list.push( arg );
                                }
                            } else if ( arg && arg.length && type !== "string" ) {
                                // Inspect recursively
                                add( arg );
                            }
                        });
                    })( arguments );
                    // Do we need to add the callbacks to the
                    // current firing batch?
                    if ( firing ) {
                        firingLength = list.length;
                    // With memory, if we're not firing then
                    // we should call right away
                    } else if ( memory ) {
                        firingStart = start;
                        fire( memory );
                    }
                }
                return this;
            },
            // Remove a callback from the list
            remove: function() {
                if ( list ) {
                    jQuery.each( arguments, function( _, arg ) {
                        var index;
                        while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
                            list.splice( index, 1 );
                            // Handle firing indexes
                            if ( firing ) {
                                if ( index <= firingLength ) {
                                    firingLength--;
                                }
                                if ( index <= firingIndex ) {
                                    firingIndex--;
                                }
                            }
                        }
                    });
                }
                return this;
            },
            // Check if a given callback is in the list.
            // If no argument is given, return whether or not list has callbacks attached.
            has: function( fn ) {
                return fn ? jQuery.inArray( fn, list ) > -1 : !!( list && list.length );
            },
            // Remove all callbacks from the list
            empty: function() {
                list = [];
                firingLength = 0;
                return this;
            },
            // Have the list do nothing anymore
            disable: function() {
                list = stack = memory = undefined;
                return this;
            },
            // Is it disabled?
            disabled: function() {
                return !list;
            },
            // Lock the list in its current state
            lock: function() {
                stack = undefined;
                if ( !memory ) {
                    self.disable();
                }
                return this;
            },
            // Is it locked?
            locked: function() {
                return !stack;
            },
            // Call all callbacks with the given context and arguments
            fireWith: function( context, args ) {
                if ( list && ( !fired || stack ) ) {
                    args = args || [];
                    args = [ context, args.slice ? args.slice() : args ];
                    if ( firing ) {
                        stack.push( args );
                    } else {
                        fire( args );
                    }
                }
                return this;
            },
            // Call all the callbacks with the given arguments
            fire: function() {
                self.fireWith( this, arguments );
                return this;
            },
            // To know if the callbacks have already been called at least once
            fired: function() {
                return !!fired;
            }
        };

    return self;
};


jQuery.extend({

    Deferred: function( func ) {
        var tuples = [
                // action, add listener, listener list, final state
                [ "resolve", "done", jQuery.Callbacks("once memory"), "resolved" ],
                [ "reject", "fail", jQuery.Callbacks("once memory"), "rejected" ],
                [ "notify", "progress", jQuery.Callbacks("memory") ]
            ],
            state = "pending",
            promise = {
                state: function() {
                    return state;
                },
                always: function() {
                    deferred.done( arguments ).fail( arguments );
                    return this;
                },
                then: function( /* fnDone, fnFail, fnProgress */ ) {
                    var fns = arguments;
                    return jQuery.Deferred(function( newDefer ) {
                        jQuery.each( tuples, function( i, tuple ) {
                            var fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];
                            // deferred[ done | fail | progress ] for forwarding actions to newDefer
                            deferred[ tuple[1] ](function() {
                                var returned = fn && fn.apply( this, arguments );
                                if ( returned && jQuery.isFunction( returned.promise ) ) {
                                    returned.promise()
                                        .done( newDefer.resolve )
                                        .fail( newDefer.reject )
                                        .progress( newDefer.notify );
                                } else {
                                    newDefer[ tuple[ 0 ] + "With" ]( this === promise ? newDefer.promise() : this, fn ? [ returned ] : arguments );
                                }
                            });
                        });
                        fns = null;
                    }).promise();
                },
                // Get a promise for this deferred
                // If obj is provided, the promise aspect is added to the object
                promise: function( obj ) {
                    return obj != null ? jQuery.extend( obj, promise ) : promise;
                }
            },
            deferred = {};

        // Keep pipe for back-compat
        promise.pipe = promise.then;

        // Add list-specific methods
        jQuery.each( tuples, function( i, tuple ) {
            var list = tuple[ 2 ],
                stateString = tuple[ 3 ];

            // promise[ done | fail | progress ] = list.add
            promise[ tuple[1] ] = list.add;

            // Handle state
            if ( stateString ) {
                list.add(function() {
                    // state = [ resolved | rejected ]
                    state = stateString;

                // [ reject_list | resolve_list ].disable; progress_list.lock
                }, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
            }

            // deferred[ resolve | reject | notify ]
            deferred[ tuple[0] ] = function() {
                deferred[ tuple[0] + "With" ]( this === deferred ? promise : this, arguments );
                return this;
            };
            deferred[ tuple[0] + "With" ] = list.fireWith;
        });

        // Make the deferred a promise
        promise.promise( deferred );

        // Call given func if any
        if ( func ) {
            func.call( deferred, deferred );
        }

        // All done!
        return deferred;
    },

    // Deferred helper
    when: function( subordinate /* , ..., subordinateN */ ) {
        var i = 0,
            resolveValues = slice.call( arguments ),
            length = resolveValues.length,

            // the count of uncompleted subordinates
            remaining = length !== 1 || ( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

            // the master Deferred. If resolveValues consist of only a single Deferred, just use that.
            deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

            // Update function for both resolve and progress values
            updateFunc = function( i, contexts, values ) {
                return function( value ) {
                    contexts[ i ] = this;
                    values[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
                    if ( values === progressValues ) {
                        deferred.notifyWith( contexts, values );

                    } else if ( !(--remaining) ) {
                        deferred.resolveWith( contexts, values );
                    }
                };
            },

            progressValues, progressContexts, resolveContexts;

        // add listeners to Deferred subordinates; treat others as resolved
        if ( length > 1 ) {
            progressValues = new Array( length );
            progressContexts = new Array( length );
            resolveContexts = new Array( length );
            for ( ; i < length; i++ ) {
                if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
                    resolveValues[ i ].promise()
                        .done( updateFunc( i, resolveContexts, resolveValues ) )
                        .fail( deferred.reject )
                        .progress( updateFunc( i, progressContexts, progressValues ) );
                } else {
                    --remaining;
                }
            }
        }

        // if we're not waiting on anything, resolve the master
        if ( !remaining ) {
            deferred.resolveWith( resolveContexts, resolveValues );
        }

        return deferred.promise();
    }
});


// The deferred used on DOM ready
var readyList;

jQuery.fn.ready = function( fn ) {
    // Add the callback
    jQuery.ready.promise().done( fn );

    return this;
};

jQuery.extend({
    // Is the DOM ready to be used? Set to true once it occurs.
    isReady: false,

    // A counter to track how many items to wait for before
    // the ready event fires. See #6781
    readyWait: 1,

    // Hold (or release) the ready event
    holdReady: function( hold ) {
        if ( hold ) {
            jQuery.readyWait++;
        } else {
            jQuery.ready( true );
        }
    },

    // Handle when the DOM is ready
    ready: function( wait ) {

        // Abort if there are pending holds or we're already ready
        if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
            return;
        }

        // Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).
        if ( !document.body ) {
            return setTimeout( jQuery.ready );
        }

        // Remember that the DOM is ready
        jQuery.isReady = true;

        // If a normal DOM Ready event fired, decrement, and wait if need be
        if ( wait !== true && --jQuery.readyWait > 0 ) {
            return;
        }

        // If there are functions bound, to execute
        readyList.resolveWith( document, [ jQuery ] );

        // Trigger any bound ready events
        if ( jQuery.fn.triggerHandler ) {
            jQuery( document ).triggerHandler( "ready" );
            jQuery( document ).off( "ready" );
        }
    }
});

/**
 * Clean-up method for dom ready events
 */
function detach() {
    if ( document.addEventListener ) {
        document.removeEventListener( "DOMContentLoaded", completed, false );
        window.removeEventListener( "load", completed, false );

    } else {
        document.detachEvent( "onreadystatechange", completed );
        window.detachEvent( "onload", completed );
    }
}

/**
 * The ready event handler and self cleanup method
 */
function completed() {
    // readyState === "complete" is good enough for us to call the dom ready in oldIE
    if ( document.addEventListener || event.type === "load" || document.readyState === "complete" ) {
        detach();
        jQuery.ready();
    }
}

jQuery.ready.promise = function( obj ) {
    if ( !readyList ) {

        readyList = jQuery.Deferred();

        // Catch cases where $(document).ready() is called after the browser event has already occurred.
        // we once tried to use readyState "interactive" here, but it caused issues like the one
        // discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
        if ( document.readyState === "complete" ) {
            // Handle it asynchronously to allow scripts the opportunity to delay ready
            setTimeout( jQuery.ready );

        // Standards-based browsers support DOMContentLoaded
        } else if ( document.addEventListener ) {
            // Use the handy event callback
            document.addEventListener( "DOMContentLoaded", completed, false );

            // A fallback to window.onload, that will always work
            window.addEventListener( "load", completed, false );

        // If IE event model is used
        } else {
            // Ensure firing before onload, maybe late but safe also for iframes
            document.attachEvent( "onreadystatechange", completed );

            // A fallback to window.onload, that will always work
            window.attachEvent( "onload", completed );

            // If IE and not a frame
            // continually check to see if the document is ready
            var top = false;

            try {
                top = window.frameElement == null && document.documentElement;
            } catch(e) {}

            if ( top && top.doScroll ) {
                (function doScrollCheck() {
                    if ( !jQuery.isReady ) {

                        try {
                            // Use the trick by Diego Perini
                            // http://javascript.nwbox.com/IEContentLoaded/
                            top.doScroll("left");
                        } catch(e) {
                            return setTimeout( doScrollCheck, 50 );
                        }

                        // detach all dom ready events
                        detach();

                        // and execute any waiting functions
                        jQuery.ready();
                    }
                })();
            }
        }
    }
    return readyList.promise( obj );
};


var strundefined = typeof undefined;



// Support: IE<9
// Iteration over object's inherited properties before its own
var i;
for ( i in jQuery( support ) ) {
    break;
}
support.ownLast = i !== "0";

// Note: most support tests are defined in their respective modules.
// false until the test is run
support.inlineBlockNeedsLayout = false;

// Execute ASAP in case we need to set body.style.zoom
jQuery(function() {
    // Minified: var a,b,c,d
    var val, div, body, container;

    body = document.getElementsByTagName( "body" )[ 0 ];
    if ( !body || !body.style ) {
        // Return for frameset docs that don't have a body
        return;
    }

    // Setup
    div = document.createElement( "div" );
    container = document.createElement( "div" );
    container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
    body.appendChild( container ).appendChild( div );

    if ( typeof div.style.zoom !== strundefined ) {
        // Support: IE<8
        // Check if natively block-level elements act like inline-block
        // elements when setting their display to 'inline' and giving
        // them layout
        div.style.cssText = "display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1";

        support.inlineBlockNeedsLayout = val = div.offsetWidth === 3;
        if ( val ) {
            // Prevent IE 6 from affecting layout for positioned elements #11048
            // Prevent IE from shrinking the body in IE 7 mode #12869
            // Support: IE<8
            body.style.zoom = 1;
        }
    }

    body.removeChild( container );
});




(function() {
    var div = document.createElement( "div" );

    // Execute the test only if not already executed in another module.
    if (support.deleteExpando == null) {
        // Support: IE<9
        support.deleteExpando = true;
        try {
            delete div.test;
        } catch( e ) {
            support.deleteExpando = false;
        }
    }

    // Null elements to avoid leaks in IE.
    div = null;
})();


/**
 * Determines whether an object can have data
 */
jQuery.acceptData = function( elem ) {
    var noData = jQuery.noData[ (elem.nodeName + " ").toLowerCase() ],
        nodeType = +elem.nodeType || 1;

    // Do not set data on non-element DOM nodes because it will not be cleared (#8335).
    return nodeType !== 1 && nodeType !== 9 ?
        false :

        // Nodes accept data unless otherwise specified; rejection can be conditional
        !noData || noData !== true && elem.getAttribute("classid") === noData;
};


var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
    rmultiDash = /([A-Z])/g;

function dataAttr( elem, key, data ) {
    // If nothing was found internally, try to fetch any
    // data from the HTML5 data-* attribute
    if ( data === undefined && elem.nodeType === 1 ) {

        var name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();

        data = elem.getAttribute( name );

        if ( typeof data === "string" ) {
            try {
                data = data === "true" ? true :
                    data === "false" ? false :
                    data === "null" ? null :
                    // Only convert to a number if it doesn't change the string
                    +data + "" === data ? +data :
                    rbrace.test( data ) ? jQuery.parseJSON( data ) :
                    data;
            } catch( e ) {}

            // Make sure we set the data so it isn't changed later
            jQuery.data( elem, key, data );

        } else {
            data = undefined;
        }
    }

    return data;
}

// checks a cache object for emptiness
function isEmptyDataObject( obj ) {
    var name;
    for ( name in obj ) {

        // if the public data object is empty, the private is still empty
        if ( name === "data" && jQuery.isEmptyObject( obj[name] ) ) {
            continue;
        }
        if ( name !== "toJSON" ) {
            return false;
        }
    }

    return true;
}

function internalData( elem, name, data, pvt /* Internal Use Only */ ) {
    if ( !jQuery.acceptData( elem ) ) {
        return;
    }

    var ret, thisCache,
        internalKey = jQuery.expando,

        // We have to handle DOM nodes and JS objects differently because IE6-7
        // can't GC object references properly across the DOM-JS boundary
        isNode = elem.nodeType,

        // Only DOM nodes need the global jQuery cache; JS object data is
        // attached directly to the object so GC can occur automatically
        cache = isNode ? jQuery.cache : elem,

        // Only defining an ID for JS objects if its cache already exists allows
        // the code to shortcut on the same path as a DOM node with no cache
        id = isNode ? elem[ internalKey ] : elem[ internalKey ] && internalKey;

    // Avoid doing any more work than we need to when trying to get data on an
    // object that has no data at all
    if ( (!id || !cache[id] || (!pvt && !cache[id].data)) && data === undefined && typeof name === "string" ) {
        return;
    }

    if ( !id ) {
        // Only DOM nodes need a new unique ID for each element since their data
        // ends up in the global cache
        if ( isNode ) {
            id = elem[ internalKey ] = deletedIds.pop() || jQuery.guid++;
        } else {
            id = internalKey;
        }
    }

    if ( !cache[ id ] ) {
        // Avoid exposing jQuery metadata on plain JS objects when the object
        // is serialized using JSON.stringify
        cache[ id ] = isNode ? {} : { toJSON: jQuery.noop };
    }

    // An object can be passed to jQuery.data instead of a key/value pair; this gets
    // shallow copied over onto the existing cache
    if ( typeof name === "object" || typeof name === "function" ) {
        if ( pvt ) {
            cache[ id ] = jQuery.extend( cache[ id ], name );
        } else {
            cache[ id ].data = jQuery.extend( cache[ id ].data, name );
        }
    }

    thisCache = cache[ id ];

    // jQuery data() is stored in a separate object inside the object's internal data
    // cache in order to avoid key collisions between internal data and user-defined
    // data.
    if ( !pvt ) {
        if ( !thisCache.data ) {
            thisCache.data = {};
        }

        thisCache = thisCache.data;
    }

    if ( data !== undefined ) {
        thisCache[ jQuery.camelCase( name ) ] = data;
    }

    // Check for both converted-to-camel and non-converted data property names
    // If a data property was specified
    if ( typeof name === "string" ) {

        // First Try to find as-is property data
        ret = thisCache[ name ];

        // Test for null|undefined property data
        if ( ret == null ) {

            // Try to find the camelCased property
            ret = thisCache[ jQuery.camelCase( name ) ];
        }
    } else {
        ret = thisCache;
    }

    return ret;
}

function internalRemoveData( elem, name, pvt ) {
    if ( !jQuery.acceptData( elem ) ) {
        return;
    }

    var thisCache, i,
        isNode = elem.nodeType,

        // See jQuery.data for more information
        cache = isNode ? jQuery.cache : elem,
        id = isNode ? elem[ jQuery.expando ] : jQuery.expando;

    // If there is already no cache entry for this object, there is no
    // purpose in continuing
    if ( !cache[ id ] ) {
        return;
    }

    if ( name ) {

        thisCache = pvt ? cache[ id ] : cache[ id ].data;

        if ( thisCache ) {

            // Support array or space separated string names for data keys
            if ( !jQuery.isArray( name ) ) {

                // try the string as a key before any manipulation
                if ( name in thisCache ) {
                    name = [ name ];
                } else {

                    // split the camel cased version by spaces unless a key with the spaces exists
                    name = jQuery.camelCase( name );
                    if ( name in thisCache ) {
                        name = [ name ];
                    } else {
                        name = name.split(" ");
                    }
                }
            } else {
                // If "name" is an array of keys...
                // When data is initially created, via ("key", "val") signature,
                // keys will be converted to camelCase.
                // Since there is no way to tell _how_ a key was added, remove
                // both plain key and camelCase key. #12786
                // This will only penalize the array argument path.
                name = name.concat( jQuery.map( name, jQuery.camelCase ) );
            }

            i = name.length;
            while ( i-- ) {
                delete thisCache[ name[i] ];
            }

            // If there is no data left in the cache, we want to continue
            // and let the cache object itself get destroyed
            if ( pvt ? !isEmptyDataObject(thisCache) : !jQuery.isEmptyObject(thisCache) ) {
                return;
            }
        }
    }

    // See jQuery.data for more information
    if ( !pvt ) {
        delete cache[ id ].data;

        // Don't destroy the parent cache unless the internal data object
        // had been the only thing left in it
        if ( !isEmptyDataObject( cache[ id ] ) ) {
            return;
        }
    }

    // Destroy the cache
    if ( isNode ) {
        jQuery.cleanData( [ elem ], true );

    // Use delete when supported for expandos or `cache` is not a window per isWindow (#10080)
    /* jshint eqeqeq: false */
    } else if ( support.deleteExpando || cache != cache.window ) {
        /* jshint eqeqeq: true */
        delete cache[ id ];

    // When all else fails, null
    } else {
        cache[ id ] = null;
    }
}

jQuery.extend({
    cache: {},

    // The following elements (space-suffixed to avoid Object.prototype collisions)
    // throw uncatchable exceptions if you attempt to set expando properties
    noData: {
        "applet ": true,
        "embed ": true,
        // ...but Flash objects (which have this classid) *can* handle expandos
        "object ": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"
    },

    hasData: function( elem ) {
        elem = elem.nodeType ? jQuery.cache[ elem[jQuery.expando] ] : elem[ jQuery.expando ];
        return !!elem && !isEmptyDataObject( elem );
    },

    data: function( elem, name, data ) {
        return internalData( elem, name, data );
    },

    removeData: function( elem, name ) {
        return internalRemoveData( elem, name );
    },

    // For internal use only.
    _data: function( elem, name, data ) {
        return internalData( elem, name, data, true );
    },

    _removeData: function( elem, name ) {
        return internalRemoveData( elem, name, true );
    }
});

jQuery.fn.extend({
    data: function( key, value ) {
        var i, name, data,
            elem = this[0],
            attrs = elem && elem.attributes;

        // Special expections of .data basically thwart jQuery.access,
        // so implement the relevant behavior ourselves

        // Gets all values
        if ( key === undefined ) {
            if ( this.length ) {
                data = jQuery.data( elem );

                if ( elem.nodeType === 1 && !jQuery._data( elem, "parsedAttrs" ) ) {
                    i = attrs.length;
                    while ( i-- ) {

                        // Support: IE11+
                        // The attrs elements can be null (#14894)
                        if ( attrs[ i ] ) {
                            name = attrs[ i ].name;
                            if ( name.indexOf( "data-" ) === 0 ) {
                                name = jQuery.camelCase( name.slice(5) );
                                dataAttr( elem, name, data[ name ] );
                            }
                        }
                    }
                    jQuery._data( elem, "parsedAttrs", true );
                }
            }

            return data;
        }

        // Sets multiple values
        if ( typeof key === "object" ) {
            return this.each(function() {
                jQuery.data( this, key );
            });
        }

        return arguments.length > 1 ?

            // Sets one value
            this.each(function() {
                jQuery.data( this, key, value );
            }) :

            // Gets one value
            // Try to fetch any internally stored data first
            elem ? dataAttr( elem, key, jQuery.data( elem, key ) ) : undefined;
    },

    removeData: function( key ) {
        return this.each(function() {
            jQuery.removeData( this, key );
        });
    }
});


jQuery.extend({
    queue: function( elem, type, data ) {
        var queue;

        if ( elem ) {
            type = ( type || "fx" ) + "queue";
            queue = jQuery._data( elem, type );

            // Speed up dequeue by getting out quickly if this is just a lookup
            if ( data ) {
                if ( !queue || jQuery.isArray(data) ) {
                    queue = jQuery._data( elem, type, jQuery.makeArray(data) );
                } else {
                    queue.push( data );
                }
            }
            return queue || [];
        }
    },

    dequeue: function( elem, type ) {
        type = type || "fx";

        var queue = jQuery.queue( elem, type ),
            startLength = queue.length,
            fn = queue.shift(),
            hooks = jQuery._queueHooks( elem, type ),
            next = function() {
                jQuery.dequeue( elem, type );
            };

        // If the fx queue is dequeued, always remove the progress sentinel
        if ( fn === "inprogress" ) {
            fn = queue.shift();
            startLength--;
        }

        if ( fn ) {

            // Add a progress sentinel to prevent the fx queue from being
            // automatically dequeued
            if ( type === "fx" ) {
                queue.unshift( "inprogress" );
            }

            // clear up the last queue stop function
            delete hooks.stop;
            fn.call( elem, next, hooks );
        }

        if ( !startLength && hooks ) {
            hooks.empty.fire();
        }
    },

    // not intended for public consumption - generates a queueHooks object, or returns the current one
    _queueHooks: function( elem, type ) {
        var key = type + "queueHooks";
        return jQuery._data( elem, key ) || jQuery._data( elem, key, {
            empty: jQuery.Callbacks("once memory").add(function() {
                jQuery._removeData( elem, type + "queue" );
                jQuery._removeData( elem, key );
            })
        });
    }
});

jQuery.fn.extend({
    queue: function( type, data ) {
        var setter = 2;

        if ( typeof type !== "string" ) {
            data = type;
            type = "fx";
            setter--;
        }

        if ( arguments.length < setter ) {
            return jQuery.queue( this[0], type );
        }

        return data === undefined ?
            this :
            this.each(function() {
                var queue = jQuery.queue( this, type, data );

                // ensure a hooks for this queue
                jQuery._queueHooks( this, type );

                if ( type === "fx" && queue[0] !== "inprogress" ) {
                    jQuery.dequeue( this, type );
                }
            });
    },
    dequeue: function( type ) {
        return this.each(function() {
            jQuery.dequeue( this, type );
        });
    },
    clearQueue: function( type ) {
        return this.queue( type || "fx", [] );
    },
    // Get a promise resolved when queues of a certain type
    // are emptied (fx is the type by default)
    promise: function( type, obj ) {
        var tmp,
            count = 1,
            defer = jQuery.Deferred(),
            elements = this,
            i = this.length,
            resolve = function() {
                if ( !( --count ) ) {
                    defer.resolveWith( elements, [ elements ] );
                }
            };

        if ( typeof type !== "string" ) {
            obj = type;
            type = undefined;
        }
        type = type || "fx";

        while ( i-- ) {
            tmp = jQuery._data( elements[ i ], type + "queueHooks" );
            if ( tmp && tmp.empty ) {
                count++;
                tmp.empty.add( resolve );
            }
        }
        resolve();
        return defer.promise( obj );
    }
});
var pnum = (/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/).source;

var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var isHidden = function( elem, el ) {
        // isHidden might be called from jQuery#filter function;
        // in that case, element will be second argument
        elem = el || elem;
        return jQuery.css( elem, "display" ) === "none" || !jQuery.contains( elem.ownerDocument, elem );
    };



// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = jQuery.access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
    var i = 0,
        length = elems.length,
        bulk = key == null;

    // Sets many values
    if ( jQuery.type( key ) === "object" ) {
        chainable = true;
        for ( i in key ) {
            jQuery.access( elems, fn, i, key[i], true, emptyGet, raw );
        }

    // Sets one value
    } else if ( value !== undefined ) {
        chainable = true;

        if ( !jQuery.isFunction( value ) ) {
            raw = true;
        }

        if ( bulk ) {
            // Bulk operations run against the entire set
            if ( raw ) {
                fn.call( elems, value );
                fn = null;

            // ...except when executing function values
            } else {
                bulk = fn;
                fn = function( elem, key, value ) {
                    return bulk.call( jQuery( elem ), value );
                };
            }
        }

        if ( fn ) {
            for ( ; i < length; i++ ) {
                fn( elems[i], key, raw ? value : value.call( elems[i], i, fn( elems[i], key ) ) );
            }
        }
    }

    return chainable ?
        elems :

        // Gets
        bulk ?
            fn.call( elems ) :
            length ? fn( elems[0], key ) : emptyGet;
};
var rcheckableType = (/^(?:checkbox|radio)$/i);



(function() {
    // Minified: var a,b,c
    var input = document.createElement( "input" ),
        div = document.createElement( "div" ),
        fragment = document.createDocumentFragment();

    // Setup
    div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";

    // IE strips leading whitespace when .innerHTML is used
    support.leadingWhitespace = div.firstChild.nodeType === 3;

    // Make sure that tbody elements aren't automatically inserted
    // IE will insert them into empty tables
    support.tbody = !div.getElementsByTagName( "tbody" ).length;

    // Make sure that link elements get serialized correctly by innerHTML
    // This requires a wrapper element in IE
    support.htmlSerialize = !!div.getElementsByTagName( "link" ).length;

    // Makes sure cloning an html5 element does not cause problems
    // Where outerHTML is undefined, this still works
    support.html5Clone =
        document.createElement( "nav" ).cloneNode( true ).outerHTML !== "<:nav></:nav>";

    // Check if a disconnected checkbox will retain its checked
    // value of true after appended to the DOM (IE6/7)
    input.type = "checkbox";
    input.checked = true;
    fragment.appendChild( input );
    support.appendChecked = input.checked;

    // Make sure textarea (and checkbox) defaultValue is properly cloned
    // Support: IE6-IE11+
    div.innerHTML = "<textarea>x</textarea>";
    support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;

    // #11217 - WebKit loses check when the name is after the checked attribute
    fragment.appendChild( div );
    div.innerHTML = "<input type='radio' checked='checked' name='t'/>";

    // Support: Safari 5.1, iOS 5.1, Android 4.x, Android 2.3
    // old WebKit doesn't clone checked state correctly in fragments
    support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

    // Support: IE<9
    // Opera does not clone events (and typeof div.attachEvent === undefined).
    // IE9-10 clones events bound via attachEvent, but they don't trigger with .click()
    support.noCloneEvent = true;
    if ( div.attachEvent ) {
        div.attachEvent( "onclick", function() {
            support.noCloneEvent = false;
        });

        div.cloneNode( true ).click();
    }

    // Execute the test only if not already executed in another module.
    if (support.deleteExpando == null) {
        // Support: IE<9
        support.deleteExpando = true;
        try {
            delete div.test;
        } catch( e ) {
            support.deleteExpando = false;
        }
    }
})();


(function() {
    var i, eventName,
        div = document.createElement( "div" );

    // Support: IE<9 (lack submit/change bubble), Firefox 23+ (lack focusin event)
    for ( i in { submit: true, change: true, focusin: true }) {
        eventName = "on" + i;

        if ( !(support[ i + "Bubbles" ] = eventName in window) ) {
            // Beware of CSP restrictions (https://developer.mozilla.org/en/Security/CSP)
            div.setAttribute( eventName, "t" );
            support[ i + "Bubbles" ] = div.attributes[ eventName ].expando === false;
        }
    }

    // Null elements to avoid leaks in IE.
    div = null;
})();


var rformElems = /^(?:input|select|textarea)$/i,
    rkeyEvent = /^key/,
    rmouseEvent = /^(?:mouse|pointer|contextmenu)|click/,
    rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
    rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;

function returnTrue() {
    return true;
}

function returnFalse() {
    return false;
}

function safeActiveElement() {
    try {
        return document.activeElement;
    } catch ( err ) { }
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

    global: {},

    add: function( elem, types, handler, data, selector ) {
        var tmp, events, t, handleObjIn,
            special, eventHandle, handleObj,
            handlers, type, namespaces, origType,
            elemData = jQuery._data( elem );

        // Don't attach events to noData or text/comment nodes (but allow plain objects)
        if ( !elemData ) {
            return;
        }

        // Caller can pass in an object of custom data in lieu of the handler
        if ( handler.handler ) {
            handleObjIn = handler;
            handler = handleObjIn.handler;
            selector = handleObjIn.selector;
        }

        // Make sure that the handler has a unique ID, used to find/remove it later
        if ( !handler.guid ) {
            handler.guid = jQuery.guid++;
        }

        // Init the element's event structure and main handler, if this is the first
        if ( !(events = elemData.events) ) {
            events = elemData.events = {};
        }
        if ( !(eventHandle = elemData.handle) ) {
            eventHandle = elemData.handle = function( e ) {
                // Discard the second event of a jQuery.event.trigger() and
                // when an event is called after a page has unloaded
                return typeof jQuery !== strundefined && (!e || jQuery.event.triggered !== e.type) ?
                    jQuery.event.dispatch.apply( eventHandle.elem, arguments ) :
                    undefined;
            };
            // Add elem as a property of the handle fn to prevent a memory leak with IE non-native events
            eventHandle.elem = elem;
        }

        // Handle multiple events separated by a space
        types = ( types || "" ).match( rnotwhite ) || [ "" ];
        t = types.length;
        while ( t-- ) {
            tmp = rtypenamespace.exec( types[t] ) || [];
            type = origType = tmp[1];
            namespaces = ( tmp[2] || "" ).split( "." ).sort();

            // There *must* be a type, no attaching namespace-only handlers
            if ( !type ) {
                continue;
            }

            // If event changes its type, use the special event handlers for the changed type
            special = jQuery.event.special[ type ] || {};

            // If selector defined, determine special event api type, otherwise given type
            type = ( selector ? special.delegateType : special.bindType ) || type;

            // Update special based on newly reset type
            special = jQuery.event.special[ type ] || {};

            // handleObj is passed to all event handlers
            handleObj = jQuery.extend({
                type: type,
                origType: origType,
                data: data,
                handler: handler,
                guid: handler.guid,
                selector: selector,
                needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
                namespace: namespaces.join(".")
            }, handleObjIn );

            // Init the event handler queue if we're the first
            if ( !(handlers = events[ type ]) ) {
                handlers = events[ type ] = [];
                handlers.delegateCount = 0;

                // Only use addEventListener/attachEvent if the special events handler returns false
                if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
                    // Bind the global event handler to the element
                    if ( elem.addEventListener ) {
                        elem.addEventListener( type, eventHandle, false );

                    } else if ( elem.attachEvent ) {
                        elem.attachEvent( "on" + type, eventHandle );
                    }
                }
            }

            if ( special.add ) {
                special.add.call( elem, handleObj );

                if ( !handleObj.handler.guid ) {
                    handleObj.handler.guid = handler.guid;
                }
            }

            // Add to the element's handler list, delegates in front
            if ( selector ) {
                handlers.splice( handlers.delegateCount++, 0, handleObj );
            } else {
                handlers.push( handleObj );
            }

            // Keep track of which events have ever been used, for event optimization
            jQuery.event.global[ type ] = true;
        }

        // Nullify elem to prevent memory leaks in IE
        elem = null;
    },

    // Detach an event or set of events from an element
    remove: function( elem, types, handler, selector, mappedTypes ) {
        var j, handleObj, tmp,
            origCount, t, events,
            special, handlers, type,
            namespaces, origType,
            elemData = jQuery.hasData( elem ) && jQuery._data( elem );

        if ( !elemData || !(events = elemData.events) ) {
            return;
        }

        // Once for each type.namespace in types; type may be omitted
        types = ( types || "" ).match( rnotwhite ) || [ "" ];
        t = types.length;
        while ( t-- ) {
            tmp = rtypenamespace.exec( types[t] ) || [];
            type = origType = tmp[1];
            namespaces = ( tmp[2] || "" ).split( "." ).sort();

            // Unbind all events (on this namespace, if provided) for the element
            if ( !type ) {
                for ( type in events ) {
                    jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
                }
                continue;
            }

            special = jQuery.event.special[ type ] || {};
            type = ( selector ? special.delegateType : special.bindType ) || type;
            handlers = events[ type ] || [];
            tmp = tmp[2] && new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" );

            // Remove matching events
            origCount = j = handlers.length;
            while ( j-- ) {
                handleObj = handlers[ j ];

                if ( ( mappedTypes || origType === handleObj.origType ) &&
                    ( !handler || handler.guid === handleObj.guid ) &&
                    ( !tmp || tmp.test( handleObj.namespace ) ) &&
                    ( !selector || selector === handleObj.selector || selector === "**" && handleObj.selector ) ) {
                    handlers.splice( j, 1 );

                    if ( handleObj.selector ) {
                        handlers.delegateCount--;
                    }
                    if ( special.remove ) {
                        special.remove.call( elem, handleObj );
                    }
                }
            }

            // Remove generic event handler if we removed something and no more handlers exist
            // (avoids potential for endless recursion during removal of special event handlers)
            if ( origCount && !handlers.length ) {
                if ( !special.teardown || special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
                    jQuery.removeEvent( elem, type, elemData.handle );
                }

                delete events[ type ];
            }
        }

        // Remove the expando if it's no longer used
        if ( jQuery.isEmptyObject( events ) ) {
            delete elemData.handle;

            // removeData also checks for emptiness and clears the expando if empty
            // so use it instead of delete
            jQuery._removeData( elem, "events" );
        }
    },

    trigger: function( event, data, elem, onlyHandlers ) {
        var handle, ontype, cur,
            bubbleType, special, tmp, i,
            eventPath = [ elem || document ],
            type = hasOwn.call( event, "type" ) ? event.type : event,
            namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split(".") : [];

        cur = tmp = elem = elem || document;

        // Don't do events on text and comment nodes
        if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
            return;
        }

        // focus/blur morphs to focusin/out; ensure we're not firing them right now
        if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
            return;
        }

        if ( type.indexOf(".") >= 0 ) {
            // Namespaced trigger; create a regexp to match event type in handle()
            namespaces = type.split(".");
            type = namespaces.shift();
            namespaces.sort();
        }
        ontype = type.indexOf(":") < 0 && "on" + type;

        // Caller can pass in a jQuery.Event object, Object, or just an event type string
        event = event[ jQuery.expando ] ?
            event :
            new jQuery.Event( type, typeof event === "object" && event );

        // Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
        event.isTrigger = onlyHandlers ? 2 : 3;
        event.namespace = namespaces.join(".");
        event.namespace_re = event.namespace ?
            new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" ) :
            null;

        // Clean up the event in case it is being reused
        event.result = undefined;
        if ( !event.target ) {
            event.target = elem;
        }

        // Clone any incoming data and prepend the event, creating the handler arg list
        data = data == null ?
            [ event ] :
            jQuery.makeArray( data, [ event ] );

        // Allow special events to draw outside the lines
        special = jQuery.event.special[ type ] || {};
        if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
            return;
        }

        // Determine event propagation path in advance, per W3C events spec (#9951)
        // Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
        if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

            bubbleType = special.delegateType || type;
            if ( !rfocusMorph.test( bubbleType + type ) ) {
                cur = cur.parentNode;
            }
            for ( ; cur; cur = cur.parentNode ) {
                eventPath.push( cur );
                tmp = cur;
            }

            // Only add window if we got to document (e.g., not plain obj or detached DOM)
            if ( tmp === (elem.ownerDocument || document) ) {
                eventPath.push( tmp.defaultView || tmp.parentWindow || window );
            }
        }

        // Fire handlers on the event path
        i = 0;
        while ( (cur = eventPath[i++]) && !event.isPropagationStopped() ) {

            event.type = i > 1 ?
                bubbleType :
                special.bindType || type;

            // jQuery handler
            handle = ( jQuery._data( cur, "events" ) || {} )[ event.type ] && jQuery._data( cur, "handle" );
            if ( handle ) {
                handle.apply( cur, data );
            }

            // Native handler
            handle = ontype && cur[ ontype ];
            if ( handle && handle.apply && jQuery.acceptData( cur ) ) {
                event.result = handle.apply( cur, data );
                if ( event.result === false ) {
                    event.preventDefault();
                }
            }
        }
        event.type = type;

        // If nobody prevented the default action, do it now
        if ( !onlyHandlers && !event.isDefaultPrevented() ) {

            if ( (!special._default || special._default.apply( eventPath.pop(), data ) === false) &&
                jQuery.acceptData( elem ) ) {

                // Call a native DOM method on the target with the same name name as the event.
                // Can't use an .isFunction() check here because IE6/7 fails that test.
                // Don't do default actions on window, that's where global variables be (#6170)
                if ( ontype && elem[ type ] && !jQuery.isWindow( elem ) ) {

                    // Don't re-trigger an onFOO event when we call its FOO() method
                    tmp = elem[ ontype ];

                    if ( tmp ) {
                        elem[ ontype ] = null;
                    }

                    // Prevent re-triggering of the same event, since we already bubbled it above
                    jQuery.event.triggered = type;
                    try {
                        elem[ type ]();
                    } catch ( e ) {
                        // IE<9 dies on focus/blur to hidden element (#1486,#12518)
                        // only reproducible on winXP IE8 native, not IE9 in IE8 mode
                    }
                    jQuery.event.triggered = undefined;

                    if ( tmp ) {
                        elem[ ontype ] = tmp;
                    }
                }
            }
        }

        return event.result;
    },

    dispatch: function( event ) {

        // Make a writable jQuery.Event from the native event object
        event = jQuery.event.fix( event );

        var i, ret, handleObj, matched, j,
            handlerQueue = [],
            args = slice.call( arguments ),
            handlers = ( jQuery._data( this, "events" ) || {} )[ event.type ] || [],
            special = jQuery.event.special[ event.type ] || {};

        // Use the fix-ed jQuery.Event rather than the (read-only) native event
        args[0] = event;
        event.delegateTarget = this;

        // Call the preDispatch hook for the mapped type, and let it bail if desired
        if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
            return;
        }

        // Determine handlers
        handlerQueue = jQuery.event.handlers.call( this, event, handlers );

        // Run delegates first; they may want to stop propagation beneath us
        i = 0;
        while ( (matched = handlerQueue[ i++ ]) && !event.isPropagationStopped() ) {
            event.currentTarget = matched.elem;

            j = 0;
            while ( (handleObj = matched.handlers[ j++ ]) && !event.isImmediatePropagationStopped() ) {

                // Triggered event must either 1) have no namespace, or
                // 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).
                if ( !event.namespace_re || event.namespace_re.test( handleObj.namespace ) ) {

                    event.handleObj = handleObj;
                    event.data = handleObj.data;

                    ret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )
                            .apply( matched.elem, args );

                    if ( ret !== undefined ) {
                        if ( (event.result = ret) === false ) {
                            event.preventDefault();
                            event.stopPropagation();
                        }
                    }
                }
            }
        }

        // Call the postDispatch hook for the mapped type
        if ( special.postDispatch ) {
            special.postDispatch.call( this, event );
        }

        return event.result;
    },

    handlers: function( event, handlers ) {
        var sel, handleObj, matches, i,
            handlerQueue = [],
            delegateCount = handlers.delegateCount,
            cur = event.target;

        // Find delegate handlers
        // Black-hole SVG <use> instance trees (#13180)
        // Avoid non-left-click bubbling in Firefox (#3861)
        if ( delegateCount && cur.nodeType && (!event.button || event.type !== "click") ) {

            /* jshint eqeqeq: false */
            for ( ; cur != this; cur = cur.parentNode || this ) {
                /* jshint eqeqeq: true */

                // Don't check non-elements (#13208)
                // Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
                if ( cur.nodeType === 1 && (cur.disabled !== true || event.type !== "click") ) {
                    matches = [];
                    for ( i = 0; i < delegateCount; i++ ) {
                        handleObj = handlers[ i ];

                        // Don't conflict with Object.prototype properties (#13203)
                        sel = handleObj.selector + " ";

                        if ( matches[ sel ] === undefined ) {
                            matches[ sel ] = handleObj.needsContext ?
                                jQuery( sel, this ).index( cur ) >= 0 :
                                jQuery.find( sel, this, null, [ cur ] ).length;
                        }
                        if ( matches[ sel ] ) {
                            matches.push( handleObj );
                        }
                    }
                    if ( matches.length ) {
                        handlerQueue.push({ elem: cur, handlers: matches });
                    }
                }
            }
        }

        // Add the remaining (directly-bound) handlers
        if ( delegateCount < handlers.length ) {
            handlerQueue.push({ elem: this, handlers: handlers.slice( delegateCount ) });
        }

        return handlerQueue;
    },

    fix: function( event ) {
        if ( event[ jQuery.expando ] ) {
            return event;
        }

        // Create a writable copy of the event object and normalize some properties
        var i, prop, copy,
            type = event.type,
            originalEvent = event,
            fixHook = this.fixHooks[ type ];

        if ( !fixHook ) {
            this.fixHooks[ type ] = fixHook =
                rmouseEvent.test( type ) ? this.mouseHooks :
                rkeyEvent.test( type ) ? this.keyHooks :
                {};
        }
        copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

        event = new jQuery.Event( originalEvent );

        i = copy.length;
        while ( i-- ) {
            prop = copy[ i ];
            event[ prop ] = originalEvent[ prop ];
        }

        // Support: IE<9
        // Fix target property (#1925)
        if ( !event.target ) {
            event.target = originalEvent.srcElement || document;
        }

        // Support: Chrome 23+, Safari?
        // Target should not be a text node (#504, #13143)
        if ( event.target.nodeType === 3 ) {
            event.target = event.target.parentNode;
        }

        // Support: IE<9
        // For mouse/key events, metaKey==false if it's undefined (#3368, #11328)
        event.metaKey = !!event.metaKey;

        return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
    },

    // Includes some event props shared by KeyEvent and MouseEvent
    props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),

    fixHooks: {},

    keyHooks: {
        props: "char charCode key keyCode".split(" "),
        filter: function( event, original ) {

            // Add which for key events
            if ( event.which == null ) {
                event.which = original.charCode != null ? original.charCode : original.keyCode;
            }

            return event;
        }
    },

    mouseHooks: {
        props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
        filter: function( event, original ) {
            var body, eventDoc, doc,
                button = original.button,
                fromElement = original.fromElement;

            // Calculate pageX/Y if missing and clientX/Y available
            if ( event.pageX == null && original.clientX != null ) {
                eventDoc = event.target.ownerDocument || document;
                doc = eventDoc.documentElement;
                body = eventDoc.body;

                event.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );
                event.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );
            }

            // Add relatedTarget, if necessary
            if ( !event.relatedTarget && fromElement ) {
                event.relatedTarget = fromElement === event.target ? original.toElement : fromElement;
            }

            // Add which for click: 1 === left; 2 === middle; 3 === right
            // Note: button is not normalized, so don't use it
            if ( !event.which && button !== undefined ) {
                event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
            }

            return event;
        }
    },

    special: {
        load: {
            // Prevent triggered image.load events from bubbling to window.load
            noBubble: true
        },
        focus: {
            // Fire native event if possible so blur/focus sequence is correct
            trigger: function() {
                if ( this !== safeActiveElement() && this.focus ) {
                    try {
                        this.focus();
                        return false;
                    } catch ( e ) {
                        // Support: IE<9
                        // If we error on focus to hidden element (#1486, #12518),
                        // let .trigger() run the handlers
                    }
                }
            },
            delegateType: "focusin"
        },
        blur: {
            trigger: function() {
                if ( this === safeActiveElement() && this.blur ) {
                    this.blur();
                    return false;
                }
            },
            delegateType: "focusout"
        },
        click: {
            // For checkbox, fire native event so checked state will be right
            trigger: function() {
                if ( jQuery.nodeName( this, "input" ) && this.type === "checkbox" && this.click ) {
                    this.click();
                    return false;
                }
            },

            // For cross-browser consistency, don't fire native .click() on links
            _default: function( event ) {
                return jQuery.nodeName( event.target, "a" );
            }
        },

        beforeunload: {
            postDispatch: function( event ) {

                // Support: Firefox 20+
                // Firefox doesn't alert if the returnValue field is not set.
                if ( event.result !== undefined && event.originalEvent ) {
                    event.originalEvent.returnValue = event.result;
                }
            }
        }
    },

    simulate: function( type, elem, event, bubble ) {
        // Piggyback on a donor event to simulate a different one.
        // Fake originalEvent to avoid donor's stopPropagation, but if the
        // simulated event prevents default then we do the same on the donor.
        var e = jQuery.extend(
            new jQuery.Event(),
            event,
            {
                type: type,
                isSimulated: true,
                originalEvent: {}
            }
        );
        if ( bubble ) {
            jQuery.event.trigger( e, null, elem );
        } else {
            jQuery.event.dispatch.call( elem, e );
        }
        if ( e.isDefaultPrevented() ) {
            event.preventDefault();
        }
    }
};

jQuery.removeEvent = document.removeEventListener ?
    function( elem, type, handle ) {
        if ( elem.removeEventListener ) {
            elem.removeEventListener( type, handle, false );
        }
    } :
    function( elem, type, handle ) {
        var name = "on" + type;

        if ( elem.detachEvent ) {

            // #8545, #7054, preventing memory leaks for custom events in IE6-8
            // detachEvent needed property on element, by name of that event, to properly expose it to GC
            if ( typeof elem[ name ] === strundefined ) {
                elem[ name ] = null;
            }

            elem.detachEvent( name, handle );
        }
    };

jQuery.Event = function( src, props ) {
    // Allow instantiation without the 'new' keyword
    if ( !(this instanceof jQuery.Event) ) {
        return new jQuery.Event( src, props );
    }

    // Event object
    if ( src && src.type ) {
        this.originalEvent = src;
        this.type = src.type;

        // Events bubbling up the document may have been marked as prevented
        // by a handler lower down the tree; reflect the correct value.
        this.isDefaultPrevented = src.defaultPrevented ||
                src.defaultPrevented === undefined &&
                // Support: IE < 9, Android < 4.0
                src.returnValue === false ?
            returnTrue :
            returnFalse;

    // Event type
    } else {
        this.type = src;
    }

    // Put explicitly provided properties onto the event object
    if ( props ) {
        jQuery.extend( this, props );
    }

    // Create a timestamp if incoming event doesn't have one
    this.timeStamp = src && src.timeStamp || jQuery.now();

    // Mark it as fixed
    this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
    isDefaultPrevented: returnFalse,
    isPropagationStopped: returnFalse,
    isImmediatePropagationStopped: returnFalse,

    preventDefault: function() {
        var e = this.originalEvent;

        this.isDefaultPrevented = returnTrue;
        if ( !e ) {
            return;
        }

        // If preventDefault exists, run it on the original event
        if ( e.preventDefault ) {
            e.preventDefault();

        // Support: IE
        // Otherwise set the returnValue property of the original event to false
        } else {
            e.returnValue = false;
        }
    },
    stopPropagation: function() {
        var e = this.originalEvent;

        this.isPropagationStopped = returnTrue;
        if ( !e ) {
            return;
        }
        // If stopPropagation exists, run it on the original event
        if ( e.stopPropagation ) {
            e.stopPropagation();
        }

        // Support: IE
        // Set the cancelBubble property of the original event to true
        e.cancelBubble = true;
    },
    stopImmediatePropagation: function() {
        var e = this.originalEvent;

        this.isImmediatePropagationStopped = returnTrue;

        if ( e && e.stopImmediatePropagation ) {
            e.stopImmediatePropagation();
        }

        this.stopPropagation();
    }
};

// Create mouseenter/leave events using mouseover/out and event-time checks
jQuery.each({
    mouseenter: "mouseover",
    mouseleave: "mouseout",
    pointerenter: "pointerover",
    pointerleave: "pointerout"
}, function( orig, fix ) {
    jQuery.event.special[ orig ] = {
        delegateType: fix,
        bindType: fix,

        handle: function( event ) {
            var ret,
                target = this,
                related = event.relatedTarget,
                handleObj = event.handleObj;

            // For mousenter/leave call the handler if related is outside the target.
            // NB: No relatedTarget if the mouse left/entered the browser window
            if ( !related || (related !== target && !jQuery.contains( target, related )) ) {
                event.type = handleObj.origType;
                ret = handleObj.handler.apply( this, arguments );
                event.type = fix;
            }
            return ret;
        }
    };
});

// IE submit delegation
if ( !support.submitBubbles ) {

    jQuery.event.special.submit = {
        setup: function() {
            // Only need this for delegated form submit events
            if ( jQuery.nodeName( this, "form" ) ) {
                return false;
            }

            // Lazy-add a submit handler when a descendant form may potentially be submitted
            jQuery.event.add( this, "click._submit keypress._submit", function( e ) {
                // Node name check avoids a VML-related crash in IE (#9807)
                var elem = e.target,
                    form = jQuery.nodeName( elem, "input" ) || jQuery.nodeName( elem, "button" ) ? elem.form : undefined;
                if ( form && !jQuery._data( form, "submitBubbles" ) ) {
                    jQuery.event.add( form, "submit._submit", function( event ) {
                        event._submit_bubble = true;
                    });
                    jQuery._data( form, "submitBubbles", true );
                }
            });
            // return undefined since we don't need an event listener
        },

        postDispatch: function( event ) {
            // If form was submitted by the user, bubble the event up the tree
            if ( event._submit_bubble ) {
                delete event._submit_bubble;
                if ( this.parentNode && !event.isTrigger ) {
                    jQuery.event.simulate( "submit", this.parentNode, event, true );
                }
            }
        },

        teardown: function() {
            // Only need this for delegated form submit events
            if ( jQuery.nodeName( this, "form" ) ) {
                return false;
            }

            // Remove delegated handlers; cleanData eventually reaps submit handlers attached above
            jQuery.event.remove( this, "._submit" );
        }
    };
}

// IE change delegation and checkbox/radio fix
if ( !support.changeBubbles ) {

    jQuery.event.special.change = {

        setup: function() {

            if ( rformElems.test( this.nodeName ) ) {
                // IE doesn't fire change on a check/radio until blur; trigger it on click
                // after a propertychange. Eat the blur-change in special.change.handle.
                // This still fires onchange a second time for check/radio after blur.
                if ( this.type === "checkbox" || this.type === "radio" ) {
                    jQuery.event.add( this, "propertychange._change", function( event ) {
                        if ( event.originalEvent.propertyName === "checked" ) {
                            this._just_changed = true;
                        }
                    });
                    jQuery.event.add( this, "click._change", function( event ) {
                        if ( this._just_changed && !event.isTrigger ) {
                            this._just_changed = false;
                        }
                        // Allow triggered, simulated change events (#11500)
                        jQuery.event.simulate( "change", this, event, true );
                    });
                }
                return false;
            }
            // Delegated event; lazy-add a change handler on descendant inputs
            jQuery.event.add( this, "beforeactivate._change", function( e ) {
                var elem = e.target;

                if ( rformElems.test( elem.nodeName ) && !jQuery._data( elem, "changeBubbles" ) ) {
                    jQuery.event.add( elem, "change._change", function( event ) {
                        if ( this.parentNode && !event.isSimulated && !event.isTrigger ) {
                            jQuery.event.simulate( "change", this.parentNode, event, true );
                        }
                    });
                    jQuery._data( elem, "changeBubbles", true );
                }
            });
        },

        handle: function( event ) {
            var elem = event.target;

            // Swallow native change events from checkbox/radio, we already triggered them above
            if ( this !== elem || event.isSimulated || event.isTrigger || (elem.type !== "radio" && elem.type !== "checkbox") ) {
                return event.handleObj.handler.apply( this, arguments );
            }
        },

        teardown: function() {
            jQuery.event.remove( this, "._change" );

            return !rformElems.test( this.nodeName );
        }
    };
}

// Create "bubbling" focus and blur events
if ( !support.focusinBubbles ) {
    jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {

        // Attach a single capturing handler on the document while someone wants focusin/focusout
        var handler = function( event ) {
                jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );
            };

        jQuery.event.special[ fix ] = {
            setup: function() {
                var doc = this.ownerDocument || this,
                    attaches = jQuery._data( doc, fix );

                if ( !attaches ) {
                    doc.addEventListener( orig, handler, true );
                }
                jQuery._data( doc, fix, ( attaches || 0 ) + 1 );
            },
            teardown: function() {
                var doc = this.ownerDocument || this,
                    attaches = jQuery._data( doc, fix ) - 1;

                if ( !attaches ) {
                    doc.removeEventListener( orig, handler, true );
                    jQuery._removeData( doc, fix );
                } else {
                    jQuery._data( doc, fix, attaches );
                }
            }
        };
    });
}

jQuery.fn.extend({

    on: function( types, selector, data, fn, /*INTERNAL*/ one ) {
        var type, origFn;

        // Types can be a map of types/handlers
        if ( typeof types === "object" ) {
            // ( types-Object, selector, data )
            if ( typeof selector !== "string" ) {
                // ( types-Object, data )
                data = data || selector;
                selector = undefined;
            }
            for ( type in types ) {
                this.on( type, selector, data, types[ type ], one );
            }
            return this;
        }

        if ( data == null && fn == null ) {
            // ( types, fn )
            fn = selector;
            data = selector = undefined;
        } else if ( fn == null ) {
            if ( typeof selector === "string" ) {
                // ( types, selector, fn )
                fn = data;
                data = undefined;
            } else {
                // ( types, data, fn )
                fn = data;
                data = selector;
                selector = undefined;
            }
        }
        if ( fn === false ) {
            fn = returnFalse;
        } else if ( !fn ) {
            return this;
        }

        if ( one === 1 ) {
            origFn = fn;
            fn = function( event ) {
                // Can use an empty set, since event contains the info
                jQuery().off( event );
                return origFn.apply( this, arguments );
            };
            // Use same guid so caller can remove using origFn
            fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
        }
        return this.each( function() {
            jQuery.event.add( this, types, fn, data, selector );
        });
    },
    one: function( types, selector, data, fn ) {
        return this.on( types, selector, data, fn, 1 );
    },
    off: function( types, selector, fn ) {
        var handleObj, type;
        if ( types && types.preventDefault && types.handleObj ) {
            // ( event )  dispatched jQuery.Event
            handleObj = types.handleObj;
            jQuery( types.delegateTarget ).off(
                handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
                handleObj.selector,
                handleObj.handler
            );
            return this;
        }
        if ( typeof types === "object" ) {
            // ( types-object [, selector] )
            for ( type in types ) {
                this.off( type, selector, types[ type ] );
            }
            return this;
        }
        if ( selector === false || typeof selector === "function" ) {
            // ( types [, fn] )
            fn = selector;
            selector = undefined;
        }
        if ( fn === false ) {
            fn = returnFalse;
        }
        return this.each(function() {
            jQuery.event.remove( this, types, fn, selector );
        });
    },

    trigger: function( type, data ) {
        return this.each(function() {
            jQuery.event.trigger( type, data, this );
        });
    },
    triggerHandler: function( type, data ) {
        var elem = this[0];
        if ( elem ) {
            return jQuery.event.trigger( type, data, elem, true );
        }
    }
});


function createSafeFragment( document ) {
    var list = nodeNames.split( "|" ),
        safeFrag = document.createDocumentFragment();

    if ( safeFrag.createElement ) {
        while ( list.length ) {
            safeFrag.createElement(
                list.pop()
            );
        }
    }
    return safeFrag;
}

var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|" +
        "header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",
    rinlinejQuery = / jQuery\d+="(?:null|\d+)"/g,
    rnoshimcache = new RegExp("<(?:" + nodeNames + ")[\\s/>]", "i"),
    rleadingWhitespace = /^\s+/,
    rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
    rtagName = /<([\w:]+)/,
    rtbody = /<tbody/i,
    rhtml = /<|&#?\w+;/,
    rnoInnerhtml = /<(?:script|style|link)/i,
    // checked="checked" or checked
    rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
    rscriptType = /^$|\/(?:java|ecma)script/i,
    rscriptTypeMasked = /^true\/(.*)/,
    rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,

    // We have to close these tags to support XHTML (#13200)
    wrapMap = {
        option: [ 1, "<select multiple='multiple'>", "</select>" ],
        legend: [ 1, "<fieldset>", "</fieldset>" ],
        area: [ 1, "<map>", "</map>" ],
        param: [ 1, "<object>", "</object>" ],
        thead: [ 1, "<table>", "</table>" ],
        tr: [ 2, "<table><tbody>", "</tbody></table>" ],
        col: [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],
        td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

        // IE6-8 can't serialize link, script, style, or any html5 (NoScope) tags,
        // unless wrapped in a div with non-breaking characters in front of it.
        _default: support.htmlSerialize ? [ 0, "", "" ] : [ 1, "X<div>", "</div>"  ]
    },
    safeFragment = createSafeFragment( document ),
    fragmentDiv = safeFragment.appendChild( document.createElement("div") );

wrapMap.optgroup = wrapMap.option;
wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

function getAll( context, tag ) {
    var elems, elem,
        i = 0,
        found = typeof context.getElementsByTagName !== strundefined ? context.getElementsByTagName( tag || "*" ) :
            typeof context.querySelectorAll !== strundefined ? context.querySelectorAll( tag || "*" ) :
            undefined;

    if ( !found ) {
        for ( found = [], elems = context.childNodes || context; (elem = elems[i]) != null; i++ ) {
            if ( !tag || jQuery.nodeName( elem, tag ) ) {
                found.push( elem );
            } else {
                jQuery.merge( found, getAll( elem, tag ) );
            }
        }
    }

    return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
        jQuery.merge( [ context ], found ) :
        found;
}

// Used in buildFragment, fixes the defaultChecked property
function fixDefaultChecked( elem ) {
    if ( rcheckableType.test( elem.type ) ) {
        elem.defaultChecked = elem.checked;
    }
}

// Support: IE<8
// Manipulating tables requires a tbody
function manipulationTarget( elem, content ) {
    return jQuery.nodeName( elem, "table" ) &&
        jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ?

        elem.getElementsByTagName("tbody")[0] ||
            elem.appendChild( elem.ownerDocument.createElement("tbody") ) :
        elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
    elem.type = (jQuery.find.attr( elem, "type" ) !== null) + "/" + elem.type;
    return elem;
}
function restoreScript( elem ) {
    var match = rscriptTypeMasked.exec( elem.type );
    if ( match ) {
        elem.type = match[1];
    } else {
        elem.removeAttribute("type");
    }
    return elem;
}

// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
    var elem,
        i = 0;
    for ( ; (elem = elems[i]) != null; i++ ) {
        jQuery._data( elem, "globalEval", !refElements || jQuery._data( refElements[i], "globalEval" ) );
    }
}

function cloneCopyEvent( src, dest ) {

    if ( dest.nodeType !== 1 || !jQuery.hasData( src ) ) {
        return;
    }

    var type, i, l,
        oldData = jQuery._data( src ),
        curData = jQuery._data( dest, oldData ),
        events = oldData.events;

    if ( events ) {
        delete curData.handle;
        curData.events = {};

        for ( type in events ) {
            for ( i = 0, l = events[ type ].length; i < l; i++ ) {
                jQuery.event.add( dest, type, events[ type ][ i ] );
            }
        }
    }

    // make the cloned public data object a copy from the original
    if ( curData.data ) {
        curData.data = jQuery.extend( {}, curData.data );
    }
}

function fixCloneNodeIssues( src, dest ) {
    var nodeName, e, data;

    // We do not need to do anything for non-Elements
    if ( dest.nodeType !== 1 ) {
        return;
    }

    nodeName = dest.nodeName.toLowerCase();

    // IE6-8 copies events bound via attachEvent when using cloneNode.
    if ( !support.noCloneEvent && dest[ jQuery.expando ] ) {
        data = jQuery._data( dest );

        for ( e in data.events ) {
            jQuery.removeEvent( dest, e, data.handle );
        }

        // Event data gets referenced instead of copied if the expando gets copied too
        dest.removeAttribute( jQuery.expando );
    }

    // IE blanks contents when cloning scripts, and tries to evaluate newly-set text
    if ( nodeName === "script" && dest.text !== src.text ) {
        disableScript( dest ).text = src.text;
        restoreScript( dest );

    // IE6-10 improperly clones children of object elements using classid.
    // IE10 throws NoModificationAllowedError if parent is null, #12132.
    } else if ( nodeName === "object" ) {
        if ( dest.parentNode ) {
            dest.outerHTML = src.outerHTML;
        }

        // This path appears unavoidable for IE9. When cloning an object
        // element in IE9, the outerHTML strategy above is not sufficient.
        // If the src has innerHTML and the destination does not,
        // copy the src.innerHTML into the dest.innerHTML. #10324
        if ( support.html5Clone && ( src.innerHTML && !jQuery.trim(dest.innerHTML) ) ) {
            dest.innerHTML = src.innerHTML;
        }

    } else if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
        // IE6-8 fails to persist the checked state of a cloned checkbox
        // or radio button. Worse, IE6-7 fail to give the cloned element
        // a checked appearance if the defaultChecked value isn't also set

        dest.defaultChecked = dest.checked = src.checked;

        // IE6-7 get confused and end up setting the value of a cloned
        // checkbox/radio button to an empty string instead of "on"
        if ( dest.value !== src.value ) {
            dest.value = src.value;
        }

    // IE6-8 fails to return the selected option to the default selected
    // state when cloning options
    } else if ( nodeName === "option" ) {
        dest.defaultSelected = dest.selected = src.defaultSelected;

    // IE6-8 fails to set the defaultValue to the correct value when
    // cloning other types of input fields
    } else if ( nodeName === "input" || nodeName === "textarea" ) {
        dest.defaultValue = src.defaultValue;
    }
}

jQuery.extend({
    clone: function( elem, dataAndEvents, deepDataAndEvents ) {
        var destElements, node, clone, i, srcElements,
            inPage = jQuery.contains( elem.ownerDocument, elem );

        if ( support.html5Clone || jQuery.isXMLDoc(elem) || !rnoshimcache.test( "<" + elem.nodeName + ">" ) ) {
            clone = elem.cloneNode( true );

        // IE<=8 does not properly clone detached, unknown element nodes
        } else {
            fragmentDiv.innerHTML = elem.outerHTML;
            fragmentDiv.removeChild( clone = fragmentDiv.firstChild );
        }

        if ( (!support.noCloneEvent || !support.noCloneChecked) &&
                (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem) ) {

            // We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
            destElements = getAll( clone );
            srcElements = getAll( elem );

            // Fix all IE cloning issues
            for ( i = 0; (node = srcElements[i]) != null; ++i ) {
                // Ensure that the destination node is not null; Fixes #9587
                if ( destElements[i] ) {
                    fixCloneNodeIssues( node, destElements[i] );
                }
            }
        }

        // Copy the events from the original to the clone
        if ( dataAndEvents ) {
            if ( deepDataAndEvents ) {
                srcElements = srcElements || getAll( elem );
                destElements = destElements || getAll( clone );

                for ( i = 0; (node = srcElements[i]) != null; i++ ) {
                    cloneCopyEvent( node, destElements[i] );
                }
            } else {
                cloneCopyEvent( elem, clone );
            }
        }

        // Preserve script evaluation history
        destElements = getAll( clone, "script" );
        if ( destElements.length > 0 ) {
            setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
        }

        destElements = srcElements = node = null;

        // Return the cloned set
        return clone;
    },

    buildFragment: function( elems, context, scripts, selection ) {
        var j, elem, contains,
            tmp, tag, tbody, wrap,
            l = elems.length,

            // Ensure a safe fragment
            safe = createSafeFragment( context ),

            nodes = [],
            i = 0;

        for ( ; i < l; i++ ) {
            elem = elems[ i ];

            if ( elem || elem === 0 ) {

                // Add nodes directly
                if ( jQuery.type( elem ) === "object" ) {
                    jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

                // Convert non-html into a text node
                } else if ( !rhtml.test( elem ) ) {
                    nodes.push( context.createTextNode( elem ) );

                // Convert html into DOM nodes
                } else {
                    tmp = tmp || safe.appendChild( context.createElement("div") );

                    // Deserialize a standard representation
                    tag = (rtagName.exec( elem ) || [ "", "" ])[ 1 ].toLowerCase();
                    wrap = wrapMap[ tag ] || wrapMap._default;

                    tmp.innerHTML = wrap[1] + elem.replace( rxhtmlTag, "<$1></$2>" ) + wrap[2];

                    // Descend through wrappers to the right content
                    j = wrap[0];
                    while ( j-- ) {
                        tmp = tmp.lastChild;
                    }

                    // Manually add leading whitespace removed by IE
                    if ( !support.leadingWhitespace && rleadingWhitespace.test( elem ) ) {
                        nodes.push( context.createTextNode( rleadingWhitespace.exec( elem )[0] ) );
                    }

                    // Remove IE's autoinserted <tbody> from table fragments
                    if ( !support.tbody ) {

                        // String was a <table>, *may* have spurious <tbody>
                        elem = tag === "table" && !rtbody.test( elem ) ?
                            tmp.firstChild :

                            // String was a bare <thead> or <tfoot>
                            wrap[1] === "<table>" && !rtbody.test( elem ) ?
                                tmp :
                                0;

                        j = elem && elem.childNodes.length;
                        while ( j-- ) {
                            if ( jQuery.nodeName( (tbody = elem.childNodes[j]), "tbody" ) && !tbody.childNodes.length ) {
                                elem.removeChild( tbody );
                            }
                        }
                    }

                    jQuery.merge( nodes, tmp.childNodes );

                    // Fix #12392 for WebKit and IE > 9
                    tmp.textContent = "";

                    // Fix #12392 for oldIE
                    while ( tmp.firstChild ) {
                        tmp.removeChild( tmp.firstChild );
                    }

                    // Remember the top-level container for proper cleanup
                    tmp = safe.lastChild;
                }
            }
        }

        // Fix #11356: Clear elements from fragment
        if ( tmp ) {
            safe.removeChild( tmp );
        }

        // Reset defaultChecked for any radios and checkboxes
        // about to be appended to the DOM in IE 6/7 (#8060)
        if ( !support.appendChecked ) {
            jQuery.grep( getAll( nodes, "input" ), fixDefaultChecked );
        }

        i = 0;
        while ( (elem = nodes[ i++ ]) ) {

            // #4087 - If origin and destination elements are the same, and this is
            // that element, do not do anything
            if ( selection && jQuery.inArray( elem, selection ) !== -1 ) {
                continue;
            }

            contains = jQuery.contains( elem.ownerDocument, elem );

            // Append to fragment
            tmp = getAll( safe.appendChild( elem ), "script" );

            // Preserve script evaluation history
            if ( contains ) {
                setGlobalEval( tmp );
            }

            // Capture executables
            if ( scripts ) {
                j = 0;
                while ( (elem = tmp[ j++ ]) ) {
                    if ( rscriptType.test( elem.type || "" ) ) {
                        scripts.push( elem );
                    }
                }
            }
        }

        tmp = null;

        return safe;
    },

    cleanData: function( elems, /* internal */ acceptData ) {
        var elem, type, id, data,
            i = 0,
            internalKey = jQuery.expando,
            cache = jQuery.cache,
            deleteExpando = support.deleteExpando,
            special = jQuery.event.special;

        for ( ; (elem = elems[i]) != null; i++ ) {
            if ( acceptData || jQuery.acceptData( elem ) ) {

                id = elem[ internalKey ];
                data = id && cache[ id ];

                if ( data ) {
                    if ( data.events ) {
                        for ( type in data.events ) {
                            if ( special[ type ] ) {
                                jQuery.event.remove( elem, type );

                            // This is a shortcut to avoid jQuery.event.remove's overhead
                            } else {
                                jQuery.removeEvent( elem, type, data.handle );
                            }
                        }
                    }

                    // Remove cache only if it was not already removed by jQuery.event.remove
                    if ( cache[ id ] ) {

                        delete cache[ id ];

                        // IE does not allow us to delete expando properties from nodes,
                        // nor does it have a removeAttribute function on Document nodes;
                        // we must handle all of these cases
                        if ( deleteExpando ) {
                            delete elem[ internalKey ];

                        } else if ( typeof elem.removeAttribute !== strundefined ) {
                            elem.removeAttribute( internalKey );

                        } else {
                            elem[ internalKey ] = null;
                        }

                        deletedIds.push( id );
                    }
                }
            }
        }
    }
});

jQuery.fn.extend({
    text: function( value ) {
        return access( this, function( value ) {
            return value === undefined ?
                jQuery.text( this ) :
                this.empty().append( ( this[0] && this[0].ownerDocument || document ).createTextNode( value ) );
        }, null, value, arguments.length );
    },

    append: function() {
        return this.domManip( arguments, function( elem ) {
            if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
                var target = manipulationTarget( this, elem );
                target.appendChild( elem );
            }
        });
    },

    prepend: function() {
        return this.domManip( arguments, function( elem ) {
            if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
                var target = manipulationTarget( this, elem );
                target.insertBefore( elem, target.firstChild );
            }
        });
    },

    before: function() {
        return this.domManip( arguments, function( elem ) {
            if ( this.parentNode ) {
                this.parentNode.insertBefore( elem, this );
            }
        });
    },

    after: function() {
        return this.domManip( arguments, function( elem ) {
            if ( this.parentNode ) {
                this.parentNode.insertBefore( elem, this.nextSibling );
            }
        });
    },

    remove: function( selector, keepData /* Internal Use Only */ ) {
        var elem,
            elems = selector ? jQuery.filter( selector, this ) : this,
            i = 0;

        for ( ; (elem = elems[i]) != null; i++ ) {

            if ( !keepData && elem.nodeType === 1 ) {
                jQuery.cleanData( getAll( elem ) );
            }

            if ( elem.parentNode ) {
                if ( keepData && jQuery.contains( elem.ownerDocument, elem ) ) {
                    setGlobalEval( getAll( elem, "script" ) );
                }
                elem.parentNode.removeChild( elem );
            }
        }

        return this;
    },

    empty: function() {
        var elem,
            i = 0;

        for ( ; (elem = this[i]) != null; i++ ) {
            // Remove element nodes and prevent memory leaks
            if ( elem.nodeType === 1 ) {
                jQuery.cleanData( getAll( elem, false ) );
            }

            // Remove any remaining nodes
            while ( elem.firstChild ) {
                elem.removeChild( elem.firstChild );
            }

            // If this is a select, ensure that it displays empty (#12336)
            // Support: IE<9
            if ( elem.options && jQuery.nodeName( elem, "select" ) ) {
                elem.options.length = 0;
            }
        }

        return this;
    },

    clone: function( dataAndEvents, deepDataAndEvents ) {
        dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
        deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

        return this.map(function() {
            return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
        });
    },

    html: function( value ) {
        return access( this, function( value ) {
            var elem = this[ 0 ] || {},
                i = 0,
                l = this.length;

            if ( value === undefined ) {
                return elem.nodeType === 1 ?
                    elem.innerHTML.replace( rinlinejQuery, "" ) :
                    undefined;
            }

            // See if we can take a shortcut and just use innerHTML
            if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
                ( support.htmlSerialize || !rnoshimcache.test( value )  ) &&
                ( support.leadingWhitespace || !rleadingWhitespace.test( value ) ) &&
                !wrapMap[ (rtagName.exec( value ) || [ "", "" ])[ 1 ].toLowerCase() ] ) {

                value = value.replace( rxhtmlTag, "<$1></$2>" );

                try {
                    for (; i < l; i++ ) {
                        // Remove element nodes and prevent memory leaks
                        elem = this[i] || {};
                        if ( elem.nodeType === 1 ) {
                            jQuery.cleanData( getAll( elem, false ) );
                            elem.innerHTML = value;
                        }
                    }

                    elem = 0;

                // If using innerHTML throws an exception, use the fallback method
                } catch(e) {}
            }

            if ( elem ) {
                this.empty().append( value );
            }
        }, null, value, arguments.length );
    },

    replaceWith: function() {
        var arg = arguments[ 0 ];

        // Make the changes, replacing each context element with the new content
        this.domManip( arguments, function( elem ) {
            arg = this.parentNode;

            jQuery.cleanData( getAll( this ) );

            if ( arg ) {
                arg.replaceChild( elem, this );
            }
        });

        // Force removal if there was no new content (e.g., from empty arguments)
        return arg && (arg.length || arg.nodeType) ? this : this.remove();
    },

    detach: function( selector ) {
        return this.remove( selector, true );
    },

    domManip: function( args, callback ) {

        // Flatten any nested arrays
        args = concat.apply( [], args );

        var first, node, hasScripts,
            scripts, doc, fragment,
            i = 0,
            l = this.length,
            set = this,
            iNoClone = l - 1,
            value = args[0],
            isFunction = jQuery.isFunction( value );

        // We can't cloneNode fragments that contain checked, in WebKit
        if ( isFunction ||
                ( l > 1 && typeof value === "string" &&
                    !support.checkClone && rchecked.test( value ) ) ) {
            return this.each(function( index ) {
                var self = set.eq( index );
                if ( isFunction ) {
                    args[0] = value.call( this, index, self.html() );
                }
                self.domManip( args, callback );
            });
        }

        if ( l ) {
            fragment = jQuery.buildFragment( args, this[ 0 ].ownerDocument, false, this );
            first = fragment.firstChild;

            if ( fragment.childNodes.length === 1 ) {
                fragment = first;
            }

            if ( first ) {
                scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
                hasScripts = scripts.length;

                // Use the original fragment for the last item instead of the first because it can end up
                // being emptied incorrectly in certain situations (#8070).
                for ( ; i < l; i++ ) {
                    node = fragment;

                    if ( i !== iNoClone ) {
                        node = jQuery.clone( node, true, true );

                        // Keep references to cloned scripts for later restoration
                        if ( hasScripts ) {
                            jQuery.merge( scripts, getAll( node, "script" ) );
                        }
                    }

                    callback.call( this[i], node, i );
                }

                if ( hasScripts ) {
                    doc = scripts[ scripts.length - 1 ].ownerDocument;

                    // Reenable scripts
                    jQuery.map( scripts, restoreScript );

                    // Evaluate executable scripts on first document insertion
                    for ( i = 0; i < hasScripts; i++ ) {
                        node = scripts[ i ];
                        if ( rscriptType.test( node.type || "" ) &&
                            !jQuery._data( node, "globalEval" ) && jQuery.contains( doc, node ) ) {

                            if ( node.src ) {
                                // Optional AJAX dependency, but won't run scripts if not present
                                if ( jQuery._evalUrl ) {
                                    jQuery._evalUrl( node.src );
                                }
                            } else {
                                jQuery.globalEval( ( node.text || node.textContent || node.innerHTML || "" ).replace( rcleanScript, "" ) );
                            }
                        }
                    }
                }

                // Fix #11809: Avoid leaking memory
                fragment = first = null;
            }
        }

        return this;
    }
});

jQuery.each({
    appendTo: "append",
    prependTo: "prepend",
    insertBefore: "before",
    insertAfter: "after",
    replaceAll: "replaceWith"
}, function( name, original ) {
    jQuery.fn[ name ] = function( selector ) {
        var elems,
            i = 0,
            ret = [],
            insert = jQuery( selector ),
            last = insert.length - 1;

        for ( ; i <= last; i++ ) {
            elems = i === last ? this : this.clone(true);
            jQuery( insert[i] )[ original ]( elems );

            // Modern browsers can apply jQuery collections as arrays, but oldIE needs a .get()
            push.apply( ret, elems.get() );
        }

        return this.pushStack( ret );
    };
});


var iframe,
    elemdisplay = {};

/**
 * Retrieve the actual display of a element
 * @param {String} name nodeName of the element
 * @param {Object} doc Document object
 */
// Called only from within defaultDisplay
function actualDisplay( name, doc ) {
    var style,
        elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),

        // getDefaultComputedStyle might be reliably used only on attached element
        display = window.getDefaultComputedStyle && ( style = window.getDefaultComputedStyle( elem[ 0 ] ) ) ?

            // Use of this method is a temporary fix (more like optmization) until something better comes along,
            // since it was removed from specification and supported only in FF
            style.display : jQuery.css( elem[ 0 ], "display" );

    // We don't have any data stored on the element,
    // so use "detach" method as fast way to get rid of the element
    elem.detach();

    return display;
}

/**
 * Try to determine the default display value of an element
 * @param {String} nodeName
 */
function defaultDisplay( nodeName ) {
    var doc = document,
        display = elemdisplay[ nodeName ];

    if ( !display ) {
        display = actualDisplay( nodeName, doc );

        // If the simple way fails, read from inside an iframe
        if ( display === "none" || !display ) {

            // Use the already-created iframe if possible
            iframe = (iframe || jQuery( "<iframe frameborder='0' width='0' height='0'/>" )).appendTo( doc.documentElement );

            // Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
            doc = ( iframe[ 0 ].contentWindow || iframe[ 0 ].contentDocument ).document;

            // Support: IE
            doc.write();
            doc.close();

            display = actualDisplay( nodeName, doc );
            iframe.detach();
        }

        // Store the correct default display
        elemdisplay[ nodeName ] = display;
    }

    return display;
}


(function() {
    var shrinkWrapBlocksVal;

    support.shrinkWrapBlocks = function() {
        if ( shrinkWrapBlocksVal != null ) {
            return shrinkWrapBlocksVal;
        }

        // Will be changed later if needed.
        shrinkWrapBlocksVal = false;

        // Minified: var b,c,d
        var div, body, container;

        body = document.getElementsByTagName( "body" )[ 0 ];
        if ( !body || !body.style ) {
            // Test fired too early or in an unsupported environment, exit.
            return;
        }

        // Setup
        div = document.createElement( "div" );
        container = document.createElement( "div" );
        container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
        body.appendChild( container ).appendChild( div );

        // Support: IE6
        // Check if elements with layout shrink-wrap their children
        if ( typeof div.style.zoom !== strundefined ) {
            // Reset CSS: box-sizing; display; margin; border
            div.style.cssText =
                // Support: Firefox<29, Android 2.3
                // Vendor-prefix box-sizing
                "-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" +
                "box-sizing:content-box;display:block;margin:0;border:0;" +
                "padding:1px;width:1px;zoom:1";
            div.appendChild( document.createElement( "div" ) ).style.width = "5px";
            shrinkWrapBlocksVal = div.offsetWidth !== 3;
        }

        body.removeChild( container );

        return shrinkWrapBlocksVal;
    };

})();
var rmargin = (/^margin/);

var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );



var getStyles, curCSS,
    rposition = /^(top|right|bottom|left)$/;

if ( window.getComputedStyle ) {
    getStyles = function( elem ) {
        // Support: IE<=11+, Firefox<=30+ (#15098, #14150)
        // IE throws on elements created in popups
        // FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
        if ( elem.ownerDocument.defaultView.opener ) {
            return elem.ownerDocument.defaultView.getComputedStyle( elem, null );
        }

        return window.getComputedStyle( elem, null );
    };

    curCSS = function( elem, name, computed ) {
        var width, minWidth, maxWidth, ret,
            style = elem.style;

        computed = computed || getStyles( elem );

        // getPropertyValue is only needed for .css('filter') in IE9, see #12537
        ret = computed ? computed.getPropertyValue( name ) || computed[ name ] : undefined;

        if ( computed ) {

            if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
                ret = jQuery.style( elem, name );
            }

            // A tribute to the "awesome hack by Dean Edwards"
            // Chrome < 17 and Safari 5.0 uses "computed value" instead of "used value" for margin-right
            // Safari 5.1.7 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
            // this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
            if ( rnumnonpx.test( ret ) && rmargin.test( name ) ) {

                // Remember the original values
                width = style.width;
                minWidth = style.minWidth;
                maxWidth = style.maxWidth;

                // Put in the new values to get a computed value out
                style.minWidth = style.maxWidth = style.width = ret;
                ret = computed.width;

                // Revert the changed values
                style.width = width;
                style.minWidth = minWidth;
                style.maxWidth = maxWidth;
            }
        }

        // Support: IE
        // IE returns zIndex value as an integer.
        return ret === undefined ?
            ret :
            ret + "";
    };
} else if ( document.documentElement.currentStyle ) {
    getStyles = function( elem ) {
        return elem.currentStyle;
    };

    curCSS = function( elem, name, computed ) {
        var left, rs, rsLeft, ret,
            style = elem.style;

        computed = computed || getStyles( elem );
        ret = computed ? computed[ name ] : undefined;

        // Avoid setting ret to empty string here
        // so we don't default to auto
        if ( ret == null && style && style[ name ] ) {
            ret = style[ name ];
        }

        // From the awesome hack by Dean Edwards
        // http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291

        // If we're not dealing with a regular pixel number
        // but a number that has a weird ending, we need to convert it to pixels
        // but not position css attributes, as those are proportional to the parent element instead
        // and we can't measure the parent instead because it might trigger a "stacking dolls" problem
        if ( rnumnonpx.test( ret ) && !rposition.test( name ) ) {

            // Remember the original values
            left = style.left;
            rs = elem.runtimeStyle;
            rsLeft = rs && rs.left;

            // Put in the new values to get a computed value out
            if ( rsLeft ) {
                rs.left = elem.currentStyle.left;
            }
            style.left = name === "fontSize" ? "1em" : ret;
            ret = style.pixelLeft + "px";

            // Revert the changed values
            style.left = left;
            if ( rsLeft ) {
                rs.left = rsLeft;
            }
        }

        // Support: IE
        // IE returns zIndex value as an integer.
        return ret === undefined ?
            ret :
            ret + "" || "auto";
    };
}




function addGetHookIf( conditionFn, hookFn ) {
    // Define the hook, we'll check on the first run if it's really needed.
    return {
        get: function() {
            var condition = conditionFn();

            if ( condition == null ) {
                // The test was not ready at this point; screw the hook this time
                // but check again when needed next time.
                return;
            }

            if ( condition ) {
                // Hook not needed (or it's not possible to use it due to missing dependency),
                // remove it.
                // Since there are no other hooks for marginRight, remove the whole object.
                delete this.get;
                return;
            }

            // Hook needed; redefine it so that the support test is not executed again.

            return (this.get = hookFn).apply( this, arguments );
        }
    };
}


(function() {
    // Minified: var b,c,d,e,f,g, h,i
    var div, style, a, pixelPositionVal, boxSizingReliableVal,
        reliableHiddenOffsetsVal, reliableMarginRightVal;

    // Setup
    div = document.createElement( "div" );
    div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
    a = div.getElementsByTagName( "a" )[ 0 ];
    style = a && a.style;

    // Finish early in limited (non-browser) environments
    if ( !style ) {
        return;
    }

    style.cssText = "float:left;opacity:.5";

    // Support: IE<9
    // Make sure that element opacity exists (as opposed to filter)
    support.opacity = style.opacity === "0.5";

    // Verify style float existence
    // (IE uses styleFloat instead of cssFloat)
    support.cssFloat = !!style.cssFloat;

    div.style.backgroundClip = "content-box";
    div.cloneNode( true ).style.backgroundClip = "";
    support.clearCloneStyle = div.style.backgroundClip === "content-box";

    // Support: Firefox<29, Android 2.3
    // Vendor-prefix box-sizing
    support.boxSizing = style.boxSizing === "" || style.MozBoxSizing === "" ||
        style.WebkitBoxSizing === "";

    jQuery.extend(support, {
        reliableHiddenOffsets: function() {
            if ( reliableHiddenOffsetsVal == null ) {
                computeStyleTests();
            }
            return reliableHiddenOffsetsVal;
        },

        boxSizingReliable: function() {
            if ( boxSizingReliableVal == null ) {
                computeStyleTests();
            }
            return boxSizingReliableVal;
        },

        pixelPosition: function() {
            if ( pixelPositionVal == null ) {
                computeStyleTests();
            }
            return pixelPositionVal;
        },

        // Support: Android 2.3
        reliableMarginRight: function() {
            if ( reliableMarginRightVal == null ) {
                computeStyleTests();
            }
            return reliableMarginRightVal;
        }
    });

    function computeStyleTests() {
        // Minified: var b,c,d,j
        var div, body, container, contents;

        body = document.getElementsByTagName( "body" )[ 0 ];
        if ( !body || !body.style ) {
            // Test fired too early or in an unsupported environment, exit.
            return;
        }

        // Setup
        div = document.createElement( "div" );
        container = document.createElement( "div" );
        container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
        body.appendChild( container ).appendChild( div );

        div.style.cssText =
            // Support: Firefox<29, Android 2.3
            // Vendor-prefix box-sizing
            "-webkit-box-sizing:border-box;-moz-box-sizing:border-box;" +
            "box-sizing:border-box;display:block;margin-top:1%;top:1%;" +
            "border:1px;padding:1px;width:4px;position:absolute";

        // Support: IE<9
        // Assume reasonable values in the absence of getComputedStyle
        pixelPositionVal = boxSizingReliableVal = false;
        reliableMarginRightVal = true;

        // Check for getComputedStyle so that this code is not run in IE<9.
        if ( window.getComputedStyle ) {
            pixelPositionVal = ( window.getComputedStyle( div, null ) || {} ).top !== "1%";
            boxSizingReliableVal =
                ( window.getComputedStyle( div, null ) || { width: "4px" } ).width === "4px";

            // Support: Android 2.3
            // Div with explicit width and no margin-right incorrectly
            // gets computed margin-right based on width of container (#3333)
            // WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
            contents = div.appendChild( document.createElement( "div" ) );

            // Reset CSS: box-sizing; display; margin; border; padding
            contents.style.cssText = div.style.cssText =
                // Support: Firefox<29, Android 2.3
                // Vendor-prefix box-sizing
                "-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" +
                "box-sizing:content-box;display:block;margin:0;border:0;padding:0";
            contents.style.marginRight = contents.style.width = "0";
            div.style.width = "1px";

            reliableMarginRightVal =
                !parseFloat( ( window.getComputedStyle( contents, null ) || {} ).marginRight );

            div.removeChild( contents );
        }

        // Support: IE8
        // Check if table cells still have offsetWidth/Height when they are set
        // to display:none and there are still other visible table cells in a
        // table row; if so, offsetWidth/Height are not reliable for use when
        // determining if an element has been hidden directly using
        // display:none (it is still safe to use offsets if a parent element is
        // hidden; don safety goggles and see bug #4512 for more information).
        div.innerHTML = "<table><tr><td></td><td>t</td></tr></table>";
        contents = div.getElementsByTagName( "td" );
        contents[ 0 ].style.cssText = "margin:0;border:0;padding:0;display:none";
        reliableHiddenOffsetsVal = contents[ 0 ].offsetHeight === 0;
        if ( reliableHiddenOffsetsVal ) {
            contents[ 0 ].style.display = "";
            contents[ 1 ].style.display = "none";
            reliableHiddenOffsetsVal = contents[ 0 ].offsetHeight === 0;
        }

        body.removeChild( container );
    }

})();


// A method for quickly swapping in/out CSS properties to get correct calculations.
jQuery.swap = function( elem, options, callback, args ) {
    var ret, name,
        old = {};

    // Remember the old values, and insert the new ones
    for ( name in options ) {
        old[ name ] = elem.style[ name ];
        elem.style[ name ] = options[ name ];
    }

    ret = callback.apply( elem, args || [] );

    // Revert the old values
    for ( name in options ) {
        elem.style[ name ] = old[ name ];
    }

    return ret;
};


var
        ralpha = /alpha\([^)]*\)/i,
    ropacity = /opacity\s*=\s*([^)]*)/,

    // swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
    // see here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
    rdisplayswap = /^(none|table(?!-c[ea]).+)/,
    rnumsplit = new RegExp( "^(" + pnum + ")(.*)$", "i" ),
    rrelNum = new RegExp( "^([+-])=(" + pnum + ")", "i" ),

    cssShow = { position: "absolute", visibility: "hidden", display: "block" },
    cssNormalTransform = {
        letterSpacing: "0",
        fontWeight: "400"
    },

    cssPrefixes = [ "Webkit", "O", "Moz", "ms" ];


// return a css property mapped to a potentially vendor prefixed property
function vendorPropName( style, name ) {

    // shortcut for names that are not vendor prefixed
    if ( name in style ) {
        return name;
    }

    // check for vendor prefixed names
    var capName = name.charAt(0).toUpperCase() + name.slice(1),
        origName = name,
        i = cssPrefixes.length;

    while ( i-- ) {
        name = cssPrefixes[ i ] + capName;
        if ( name in style ) {
            return name;
        }
    }

    return origName;
}

function showHide( elements, show ) {
    var display, elem, hidden,
        values = [],
        index = 0,
        length = elements.length;

    for ( ; index < length; index++ ) {
        elem = elements[ index ];
        if ( !elem.style ) {
            continue;
        }

        values[ index ] = jQuery._data( elem, "olddisplay" );
        display = elem.style.display;
        if ( show ) {
            // Reset the inline display of this element to learn if it is
            // being hidden by cascaded rules or not
            if ( !values[ index ] && display === "none" ) {
                elem.style.display = "";
            }

            // Set elements which have been overridden with display: none
            // in a stylesheet to whatever the default browser style is
            // for such an element
            if ( elem.style.display === "" && isHidden( elem ) ) {
                values[ index ] = jQuery._data( elem, "olddisplay", defaultDisplay(elem.nodeName) );
            }
        } else {
            hidden = isHidden( elem );

            if ( display && display !== "none" || !hidden ) {
                jQuery._data( elem, "olddisplay", hidden ? display : jQuery.css( elem, "display" ) );
            }
        }
    }

    // Set the display of most of the elements in a second loop
    // to avoid the constant reflow
    for ( index = 0; index < length; index++ ) {
        elem = elements[ index ];
        if ( !elem.style ) {
            continue;
        }
        if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
            elem.style.display = show ? values[ index ] || "" : "none";
        }
    }

    return elements;
}

function setPositiveNumber( elem, value, subtract ) {
    var matches = rnumsplit.exec( value );
    return matches ?
        // Guard against undefined "subtract", e.g., when used as in cssHooks
        Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || "px" ) :
        value;
}

function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
    var i = extra === ( isBorderBox ? "border" : "content" ) ?
        // If we already have the right measurement, avoid augmentation
        4 :
        // Otherwise initialize for horizontal or vertical properties
        name === "width" ? 1 : 0,

        val = 0;

    for ( ; i < 4; i += 2 ) {
        // both box models exclude margin, so add it if we want it
        if ( extra === "margin" ) {
            val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
        }

        if ( isBorderBox ) {
            // border-box includes padding, so remove it if we want content
            if ( extra === "content" ) {
                val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
            }

            // at this point, extra isn't border nor margin, so remove border
            if ( extra !== "margin" ) {
                val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
            }
        } else {
            // at this point, extra isn't content, so add padding
            val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

            // at this point, extra isn't content nor padding, so add border
            if ( extra !== "padding" ) {
                val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
            }
        }
    }

    return val;
}

function getWidthOrHeight( elem, name, extra ) {

    // Start with offset property, which is equivalent to the border-box value
    var valueIsBorderBox = true,
        val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
        styles = getStyles( elem ),
        isBorderBox = support.boxSizing && jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

    // some non-html elements return undefined for offsetWidth, so check for null/undefined
    // svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
    // MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
    if ( val <= 0 || val == null ) {
        // Fall back to computed then uncomputed css if necessary
        val = curCSS( elem, name, styles );
        if ( val < 0 || val == null ) {
            val = elem.style[ name ];
        }

        // Computed unit is not pixels. Stop here and return.
        if ( rnumnonpx.test(val) ) {
            return val;
        }

        // we need the check for style in case a browser which returns unreliable values
        // for getComputedStyle silently falls back to the reliable elem.style
        valueIsBorderBox = isBorderBox && ( support.boxSizingReliable() || val === elem.style[ name ] );

        // Normalize "", auto, and prepare for extra
        val = parseFloat( val ) || 0;
    }

    // use the active box-sizing model to add/subtract irrelevant styles
    return ( val +
        augmentWidthOrHeight(
            elem,
            name,
            extra || ( isBorderBox ? "border" : "content" ),
            valueIsBorderBox,
            styles
        )
    ) + "px";
}

jQuery.extend({
    // Add in style property hooks for overriding the default
    // behavior of getting and setting a style property
    cssHooks: {
        opacity: {
            get: function( elem, computed ) {
                if ( computed ) {
                    // We should always get a number back from opacity
                    var ret = curCSS( elem, "opacity" );
                    return ret === "" ? "1" : ret;
                }
            }
        }
    },

    // Don't automatically add "px" to these possibly-unitless properties
    cssNumber: {
        "columnCount": true,
        "fillOpacity": true,
        "flexGrow": true,
        "flexShrink": true,
        "fontWeight": true,
        "lineHeight": true,
        "opacity": true,
        "order": true,
        "orphans": true,
        "widows": true,
        "zIndex": true,
        "zoom": true
    },

    // Add in properties whose names you wish to fix before
    // setting or getting the value
    cssProps: {
        // normalize float css property
        "float": support.cssFloat ? "cssFloat" : "styleFloat"
    },

    // Get and set the style property on a DOM Node
    style: function( elem, name, value, extra ) {
        // Don't set styles on text and comment nodes
        if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
            return;
        }

        // Make sure that we're working with the right name
        var ret, type, hooks,
            origName = jQuery.camelCase( name ),
            style = elem.style;

        name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( style, origName ) );

        // gets hook for the prefixed version
        // followed by the unprefixed version
        hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

        // Check if we're setting a value
        if ( value !== undefined ) {
            type = typeof value;

            // convert relative number strings (+= or -=) to relative numbers. #7345
            if ( type === "string" && (ret = rrelNum.exec( value )) ) {
                value = ( ret[1] + 1 ) * ret[2] + parseFloat( jQuery.css( elem, name ) );
                // Fixes bug #9237
                type = "number";
            }

            // Make sure that null and NaN values aren't set. See: #7116
            if ( value == null || value !== value ) {
                return;
            }

            // If a number was passed in, add 'px' to the (except for certain CSS properties)
            if ( type === "number" && !jQuery.cssNumber[ origName ] ) {
                value += "px";
            }

            // Fixes #8908, it can be done more correctly by specifing setters in cssHooks,
            // but it would mean to define eight (for every problematic property) identical functions
            if ( !support.clearCloneStyle && value === "" && name.indexOf("background") === 0 ) {
                style[ name ] = "inherit";
            }

            // If a hook was provided, use that value, otherwise just set the specified value
            if ( !hooks || !("set" in hooks) || (value = hooks.set( elem, value, extra )) !== undefined ) {

                // Support: IE
                // Swallow errors from 'invalid' CSS values (#5509)
                try {
                    style[ name ] = value;
                } catch(e) {}
            }

        } else {
            // If a hook was provided get the non-computed value from there
            if ( hooks && "get" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {
                return ret;
            }

            // Otherwise just get the value from the style object
            return style[ name ];
        }
    },

    css: function( elem, name, extra, styles ) {
        var num, val, hooks,
            origName = jQuery.camelCase( name );

        // Make sure that we're working with the right name
        name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( elem.style, origName ) );

        // gets hook for the prefixed version
        // followed by the unprefixed version
        hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

        // If a hook was provided get the computed value from there
        if ( hooks && "get" in hooks ) {
            val = hooks.get( elem, true, extra );
        }

        // Otherwise, if a way to get the computed value exists, use that
        if ( val === undefined ) {
            val = curCSS( elem, name, styles );
        }

        //convert "normal" to computed value
        if ( val === "normal" && name in cssNormalTransform ) {
            val = cssNormalTransform[ name ];
        }

        // Return, converting to number if forced or a qualifier was provided and val looks numeric
        if ( extra === "" || extra ) {
            num = parseFloat( val );
            return extra === true || jQuery.isNumeric( num ) ? num || 0 : val;
        }
        return val;
    }
});

jQuery.each([ "height", "width" ], function( i, name ) {
    jQuery.cssHooks[ name ] = {
        get: function( elem, computed, extra ) {
            if ( computed ) {
                // certain elements can have dimension info if we invisibly show them
                // however, it must have a current display style that would benefit from this
                return rdisplayswap.test( jQuery.css( elem, "display" ) ) && elem.offsetWidth === 0 ?
                    jQuery.swap( elem, cssShow, function() {
                        return getWidthOrHeight( elem, name, extra );
                    }) :
                    getWidthOrHeight( elem, name, extra );
            }
        },

        set: function( elem, value, extra ) {
            var styles = extra && getStyles( elem );
            return setPositiveNumber( elem, value, extra ?
                augmentWidthOrHeight(
                    elem,
                    name,
                    extra,
                    support.boxSizing && jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
                    styles
                ) : 0
            );
        }
    };
});

if ( !support.opacity ) {
    jQuery.cssHooks.opacity = {
        get: function( elem, computed ) {
            // IE uses filters for opacity
            return ropacity.test( (computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "" ) ?
                ( 0.01 * parseFloat( RegExp.$1 ) ) + "" :
                computed ? "1" : "";
        },

        set: function( elem, value ) {
            var style = elem.style,
                currentStyle = elem.currentStyle,
                opacity = jQuery.isNumeric( value ) ? "alpha(opacity=" + value * 100 + ")" : "",
                filter = currentStyle && currentStyle.filter || style.filter || "";

            // IE has trouble with opacity if it does not have layout
            // Force it by setting the zoom level
            style.zoom = 1;

            // if setting opacity to 1, and no other filters exist - attempt to remove filter attribute #6652
            // if value === "", then remove inline opacity #12685
            if ( ( value >= 1 || value === "" ) &&
                    jQuery.trim( filter.replace( ralpha, "" ) ) === "" &&
                    style.removeAttribute ) {

                // Setting style.filter to null, "" & " " still leave "filter:" in the cssText
                // if "filter:" is present at all, clearType is disabled, we want to avoid this
                // style.removeAttribute is IE Only, but so apparently is this code path...
                style.removeAttribute( "filter" );

                // if there is no filter style applied in a css rule or unset inline opacity, we are done
                if ( value === "" || currentStyle && !currentStyle.filter ) {
                    return;
                }
            }

            // otherwise, set new filter values
            style.filter = ralpha.test( filter ) ?
                filter.replace( ralpha, opacity ) :
                filter + " " + opacity;
        }
    };
}

jQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,
    function( elem, computed ) {
        if ( computed ) {
            // WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
            // Work around by temporarily setting element display to inline-block
            return jQuery.swap( elem, { "display": "inline-block" },
                curCSS, [ elem, "marginRight" ] );
        }
    }
);

// These hooks are used by animate to expand properties
jQuery.each({
    margin: "",
    padding: "",
    border: "Width"
}, function( prefix, suffix ) {
    jQuery.cssHooks[ prefix + suffix ] = {
        expand: function( value ) {
            var i = 0,
                expanded = {},

                // assumes a single number if not a string
                parts = typeof value === "string" ? value.split(" ") : [ value ];

            for ( ; i < 4; i++ ) {
                expanded[ prefix + cssExpand[ i ] + suffix ] =
                    parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
            }

            return expanded;
        }
    };

    if ( !rmargin.test( prefix ) ) {
        jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
    }
});

jQuery.fn.extend({
    css: function( name, value ) {
        return access( this, function( elem, name, value ) {
            var styles, len,
                map = {},
                i = 0;

            if ( jQuery.isArray( name ) ) {
                styles = getStyles( elem );
                len = name.length;

                for ( ; i < len; i++ ) {
                    map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
                }

                return map;
            }

            return value !== undefined ?
                jQuery.style( elem, name, value ) :
                jQuery.css( elem, name );
        }, name, value, arguments.length > 1 );
    },
    show: function() {
        return showHide( this, true );
    },
    hide: function() {
        return showHide( this );
    },
    toggle: function( state ) {
        if ( typeof state === "boolean" ) {
            return state ? this.show() : this.hide();
        }

        return this.each(function() {
            if ( isHidden( this ) ) {
                jQuery( this ).show();
            } else {
                jQuery( this ).hide();
            }
        });
    }
});


function Tween( elem, options, prop, end, easing ) {
    return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
    constructor: Tween,
    init: function( elem, options, prop, end, easing, unit ) {
        this.elem = elem;
        this.prop = prop;
        this.easing = easing || "swing";
        this.options = options;
        this.start = this.now = this.cur();
        this.end = end;
        this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
    },
    cur: function() {
        var hooks = Tween.propHooks[ this.prop ];

        return hooks && hooks.get ?
            hooks.get( this ) :
            Tween.propHooks._default.get( this );
    },
    run: function( percent ) {
        var eased,
            hooks = Tween.propHooks[ this.prop ];

        if ( this.options.duration ) {
            this.pos = eased = jQuery.easing[ this.easing ](
                percent, this.options.duration * percent, 0, 1, this.options.duration
            );
        } else {
            this.pos = eased = percent;
        }
        this.now = ( this.end - this.start ) * eased + this.start;

        if ( this.options.step ) {
            this.options.step.call( this.elem, this.now, this );
        }

        if ( hooks && hooks.set ) {
            hooks.set( this );
        } else {
            Tween.propHooks._default.set( this );
        }
        return this;
    }
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
    _default: {
        get: function( tween ) {
            var result;

            if ( tween.elem[ tween.prop ] != null &&
                (!tween.elem.style || tween.elem.style[ tween.prop ] == null) ) {
                return tween.elem[ tween.prop ];
            }

            // passing an empty string as a 3rd parameter to .css will automatically
            // attempt a parseFloat and fallback to a string if the parse fails
            // so, simple values such as "10px" are parsed to Float.
            // complex values such as "rotate(1rad)" are returned as is.
            result = jQuery.css( tween.elem, tween.prop, "" );
            // Empty strings, null, undefined and "auto" are converted to 0.
            return !result || result === "auto" ? 0 : result;
        },
        set: function( tween ) {
            // use step hook for back compat - use cssHook if its there - use .style if its
            // available and use plain properties where available
            if ( jQuery.fx.step[ tween.prop ] ) {
                jQuery.fx.step[ tween.prop ]( tween );
            } else if ( tween.elem.style && ( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null || jQuery.cssHooks[ tween.prop ] ) ) {
                jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
            } else {
                tween.elem[ tween.prop ] = tween.now;
            }
        }
    }
};

// Support: IE <=9
// Panic based approach to setting things on disconnected nodes

Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
    set: function( tween ) {
        if ( tween.elem.nodeType && tween.elem.parentNode ) {
            tween.elem[ tween.prop ] = tween.now;
        }
    }
};

jQuery.easing = {
    linear: function( p ) {
        return p;
    },
    swing: function( p ) {
        return 0.5 - Math.cos( p * Math.PI ) / 2;
    }
};

jQuery.fx = Tween.prototype.init;

// Back Compat <1.8 extension point
jQuery.fx.step = {};




var
    fxNow, timerId,
    rfxtypes = /^(?:toggle|show|hide)$/,
    rfxnum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" ),
    rrun = /queueHooks$/,
    animationPrefilters = [ defaultPrefilter ],
    tweeners = {
        "*": [ function( prop, value ) {
            var tween = this.createTween( prop, value ),
                target = tween.cur(),
                parts = rfxnum.exec( value ),
                unit = parts && parts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

                // Starting value computation is required for potential unit mismatches
                start = ( jQuery.cssNumber[ prop ] || unit !== "px" && +target ) &&
                    rfxnum.exec( jQuery.css( tween.elem, prop ) ),
                scale = 1,
                maxIterations = 20;

            if ( start && start[ 3 ] !== unit ) {
                // Trust units reported by jQuery.css
                unit = unit || start[ 3 ];

                // Make sure we update the tween properties later on
                parts = parts || [];

                // Iteratively approximate from a nonzero starting point
                start = +target || 1;

                do {
                    // If previous iteration zeroed out, double until we get *something*
                    // Use a string for doubling factor so we don't accidentally see scale as unchanged below
                    scale = scale || ".5";

                    // Adjust and apply
                    start = start / scale;
                    jQuery.style( tween.elem, prop, start + unit );

                // Update scale, tolerating zero or NaN from tween.cur()
                // And breaking the loop if scale is unchanged or perfect, or if we've just had enough
                } while ( scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations );
            }

            // Update tween properties
            if ( parts ) {
                start = tween.start = +start || +target || 0;
                tween.unit = unit;
                // If a +=/-= token was provided, we're doing a relative animation
                tween.end = parts[ 1 ] ?
                    start + ( parts[ 1 ] + 1 ) * parts[ 2 ] :
                    +parts[ 2 ];
            }

            return tween;
        } ]
    };

// Animations created synchronously will run synchronously
function createFxNow() {
    setTimeout(function() {
        fxNow = undefined;
    });
    return ( fxNow = jQuery.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
    var which,
        attrs = { height: type },
        i = 0;

    // if we include width, step value is 1 to do all cssExpand values,
    // if we don't include width, step value is 2 to skip over Left and Right
    includeWidth = includeWidth ? 1 : 0;
    for ( ; i < 4 ; i += 2 - includeWidth ) {
        which = cssExpand[ i ];
        attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
    }

    if ( includeWidth ) {
        attrs.opacity = attrs.width = type;
    }

    return attrs;
}

function createTween( value, prop, animation ) {
    var tween,
        collection = ( tweeners[ prop ] || [] ).concat( tweeners[ "*" ] ),
        index = 0,
        length = collection.length;
    for ( ; index < length; index++ ) {
        if ( (tween = collection[ index ].call( animation, prop, value )) ) {

            // we're done with this property
            return tween;
        }
    }
}

function defaultPrefilter( elem, props, opts ) {
    /* jshint validthis: true */
    var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,
        anim = this,
        orig = {},
        style = elem.style,
        hidden = elem.nodeType && isHidden( elem ),
        dataShow = jQuery._data( elem, "fxshow" );

    // handle queue: false promises
    if ( !opts.queue ) {
        hooks = jQuery._queueHooks( elem, "fx" );
        if ( hooks.unqueued == null ) {
            hooks.unqueued = 0;
            oldfire = hooks.empty.fire;
            hooks.empty.fire = function() {
                if ( !hooks.unqueued ) {
                    oldfire();
                }
            };
        }
        hooks.unqueued++;

        anim.always(function() {
            // doing this makes sure that the complete handler will be called
            // before this completes
            anim.always(function() {
                hooks.unqueued--;
                if ( !jQuery.queue( elem, "fx" ).length ) {
                    hooks.empty.fire();
                }
            });
        });
    }

    // height/width overflow pass
    if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {
        // Make sure that nothing sneaks out
        // Record all 3 overflow attributes because IE does not
        // change the overflow attribute when overflowX and
        // overflowY are set to the same value
        opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

        // Set display property to inline-block for height/width
        // animations on inline elements that are having width/height animated
        display = jQuery.css( elem, "display" );

        // Test default display if display is currently "none"
        checkDisplay = display === "none" ?
            jQuery._data( elem, "olddisplay" ) || defaultDisplay( elem.nodeName ) : display;

        if ( checkDisplay === "inline" && jQuery.css( elem, "float" ) === "none" ) {

            // inline-level elements accept inline-block;
            // block-level elements need to be inline with layout
            if ( !support.inlineBlockNeedsLayout || defaultDisplay( elem.nodeName ) === "inline" ) {
                style.display = "inline-block";
            } else {
                style.zoom = 1;
            }
        }
    }

    if ( opts.overflow ) {
        style.overflow = "hidden";
        if ( !support.shrinkWrapBlocks() ) {
            anim.always(function() {
                style.overflow = opts.overflow[ 0 ];
                style.overflowX = opts.overflow[ 1 ];
                style.overflowY = opts.overflow[ 2 ];
            });
        }
    }

    // show/hide pass
    for ( prop in props ) {
        value = props[ prop ];
        if ( rfxtypes.exec( value ) ) {
            delete props[ prop ];
            toggle = toggle || value === "toggle";
            if ( value === ( hidden ? "hide" : "show" ) ) {

                // If there is dataShow left over from a stopped hide or show and we are going to proceed with show, we should pretend to be hidden
                if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
                    hidden = true;
                } else {
                    continue;
                }
            }
            orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );

        // Any non-fx value stops us from restoring the original display value
        } else {
            display = undefined;
        }
    }

    if ( !jQuery.isEmptyObject( orig ) ) {
        if ( dataShow ) {
            if ( "hidden" in dataShow ) {
                hidden = dataShow.hidden;
            }
        } else {
            dataShow = jQuery._data( elem, "fxshow", {} );
        }

        // store state if its toggle - enables .stop().toggle() to "reverse"
        if ( toggle ) {
            dataShow.hidden = !hidden;
        }
        if ( hidden ) {
            jQuery( elem ).show();
        } else {
            anim.done(function() {
                jQuery( elem ).hide();
            });
        }
        anim.done(function() {
            var prop;
            jQuery._removeData( elem, "fxshow" );
            for ( prop in orig ) {
                jQuery.style( elem, prop, orig[ prop ] );
            }
        });
        for ( prop in orig ) {
            tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );

            if ( !( prop in dataShow ) ) {
                dataShow[ prop ] = tween.start;
                if ( hidden ) {
                    tween.end = tween.start;
                    tween.start = prop === "width" || prop === "height" ? 1 : 0;
                }
            }
        }

    // If this is a noop like .hide().hide(), restore an overwritten display value
    } else if ( (display === "none" ? defaultDisplay( elem.nodeName ) : display) === "inline" ) {
        style.display = display;
    }
}

function propFilter( props, specialEasing ) {
    var index, name, easing, value, hooks;

    // camelCase, specialEasing and expand cssHook pass
    for ( index in props ) {
        name = jQuery.camelCase( index );
        easing = specialEasing[ name ];
        value = props[ index ];
        if ( jQuery.isArray( value ) ) {
            easing = value[ 1 ];
            value = props[ index ] = value[ 0 ];
        }

        if ( index !== name ) {
            props[ name ] = value;
            delete props[ index ];
        }

        hooks = jQuery.cssHooks[ name ];
        if ( hooks && "expand" in hooks ) {
            value = hooks.expand( value );
            delete props[ name ];

            // not quite $.extend, this wont overwrite keys already present.
            // also - reusing 'index' from above because we have the correct "name"
            for ( index in value ) {
                if ( !( index in props ) ) {
                    props[ index ] = value[ index ];
                    specialEasing[ index ] = easing;
                }
            }
        } else {
            specialEasing[ name ] = easing;
        }
    }
}

function Animation( elem, properties, options ) {
    var result,
        stopped,
        index = 0,
        length = animationPrefilters.length,
        deferred = jQuery.Deferred().always( function() {
            // don't match elem in the :animated selector
            delete tick.elem;
        }),
        tick = function() {
            if ( stopped ) {
                return false;
            }
            var currentTime = fxNow || createFxNow(),
                remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
                // archaic crash bug won't allow us to use 1 - ( 0.5 || 0 ) (#12497)
                temp = remaining / animation.duration || 0,
                percent = 1 - temp,
                index = 0,
                length = animation.tweens.length;

            for ( ; index < length ; index++ ) {
                animation.tweens[ index ].run( percent );
            }

            deferred.notifyWith( elem, [ animation, percent, remaining ]);

            if ( percent < 1 && length ) {
                return remaining;
            } else {
                deferred.resolveWith( elem, [ animation ] );
                return false;
            }
        },
        animation = deferred.promise({
            elem: elem,
            props: jQuery.extend( {}, properties ),
            opts: jQuery.extend( true, { specialEasing: {} }, options ),
            originalProperties: properties,
            originalOptions: options,
            startTime: fxNow || createFxNow(),
            duration: options.duration,
            tweens: [],
            createTween: function( prop, end ) {
                var tween = jQuery.Tween( elem, animation.opts, prop, end,
                        animation.opts.specialEasing[ prop ] || animation.opts.easing );
                animation.tweens.push( tween );
                return tween;
            },
            stop: function( gotoEnd ) {
                var index = 0,
                    // if we are going to the end, we want to run all the tweens
                    // otherwise we skip this part
                    length = gotoEnd ? animation.tweens.length : 0;
                if ( stopped ) {
                    return this;
                }
                stopped = true;
                for ( ; index < length ; index++ ) {
                    animation.tweens[ index ].run( 1 );
                }

                // resolve when we played the last frame
                // otherwise, reject
                if ( gotoEnd ) {
                    deferred.resolveWith( elem, [ animation, gotoEnd ] );
                } else {
                    deferred.rejectWith( elem, [ animation, gotoEnd ] );
                }
                return this;
            }
        }),
        props = animation.props;

    propFilter( props, animation.opts.specialEasing );

    for ( ; index < length ; index++ ) {
        result = animationPrefilters[ index ].call( animation, elem, props, animation.opts );
        if ( result ) {
            return result;
        }
    }

    jQuery.map( props, createTween, animation );

    if ( jQuery.isFunction( animation.opts.start ) ) {
        animation.opts.start.call( elem, animation );
    }

    jQuery.fx.timer(
        jQuery.extend( tick, {
            elem: elem,
            anim: animation,
            queue: animation.opts.queue
        })
    );

    // attach callbacks from options
    return animation.progress( animation.opts.progress )
        .done( animation.opts.done, animation.opts.complete )
        .fail( animation.opts.fail )
        .always( animation.opts.always );
}

jQuery.Animation = jQuery.extend( Animation, {
    tweener: function( props, callback ) {
        if ( jQuery.isFunction( props ) ) {
            callback = props;
            props = [ "*" ];
        } else {
            props = props.split(" ");
        }

        var prop,
            index = 0,
            length = props.length;

        for ( ; index < length ; index++ ) {
            prop = props[ index ];
            tweeners[ prop ] = tweeners[ prop ] || [];
            tweeners[ prop ].unshift( callback );
        }
    },

    prefilter: function( callback, prepend ) {
        if ( prepend ) {
            animationPrefilters.unshift( callback );
        } else {
            animationPrefilters.push( callback );
        }
    }
});

jQuery.speed = function( speed, easing, fn ) {
    var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
        complete: fn || !fn && easing ||
            jQuery.isFunction( speed ) && speed,
        duration: speed,
        easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
    };

    opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
        opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

    // normalize opt.queue - true/undefined/null -> "fx"
    if ( opt.queue == null || opt.queue === true ) {
        opt.queue = "fx";
    }

    // Queueing
    opt.old = opt.complete;

    opt.complete = function() {
        if ( jQuery.isFunction( opt.old ) ) {
            opt.old.call( this );
        }

        if ( opt.queue ) {
            jQuery.dequeue( this, opt.queue );
        }
    };

    return opt;
};

jQuery.fn.extend({
    fadeTo: function( speed, to, easing, callback ) {

        // show any hidden elements after setting opacity to 0
        return this.filter( isHidden ).css( "opacity", 0 ).show()

            // animate to the value specified
            .end().animate({ opacity: to }, speed, easing, callback );
    },
    animate: function( prop, speed, easing, callback ) {
        var empty = jQuery.isEmptyObject( prop ),
            optall = jQuery.speed( speed, easing, callback ),
            doAnimation = function() {
                // Operate on a copy of prop so per-property easing won't be lost
                var anim = Animation( this, jQuery.extend( {}, prop ), optall );

                // Empty animations, or finishing resolves immediately
                if ( empty || jQuery._data( this, "finish" ) ) {
                    anim.stop( true );
                }
            };
            doAnimation.finish = doAnimation;

        return empty || optall.queue === false ?
            this.each( doAnimation ) :
            this.queue( optall.queue, doAnimation );
    },
    stop: function( type, clearQueue, gotoEnd ) {
        var stopQueue = function( hooks ) {
            var stop = hooks.stop;
            delete hooks.stop;
            stop( gotoEnd );
        };

        if ( typeof type !== "string" ) {
            gotoEnd = clearQueue;
            clearQueue = type;
            type = undefined;
        }
        if ( clearQueue && type !== false ) {
            this.queue( type || "fx", [] );
        }

        return this.each(function() {
            var dequeue = true,
                index = type != null && type + "queueHooks",
                timers = jQuery.timers,
                data = jQuery._data( this );

            if ( index ) {
                if ( data[ index ] && data[ index ].stop ) {
                    stopQueue( data[ index ] );
                }
            } else {
                for ( index in data ) {
                    if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
                        stopQueue( data[ index ] );
                    }
                }
            }

            for ( index = timers.length; index--; ) {
                if ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {
                    timers[ index ].anim.stop( gotoEnd );
                    dequeue = false;
                    timers.splice( index, 1 );
                }
            }

            // start the next in the queue if the last step wasn't forced
            // timers currently will call their complete callbacks, which will dequeue
            // but only if they were gotoEnd
            if ( dequeue || !gotoEnd ) {
                jQuery.dequeue( this, type );
            }
        });
    },
    finish: function( type ) {
        if ( type !== false ) {
            type = type || "fx";
        }
        return this.each(function() {
            var index,
                data = jQuery._data( this ),
                queue = data[ type + "queue" ],
                hooks = data[ type + "queueHooks" ],
                timers = jQuery.timers,
                length = queue ? queue.length : 0;

            // enable finishing flag on private data
            data.finish = true;

            // empty the queue first
            jQuery.queue( this, type, [] );

            if ( hooks && hooks.stop ) {
                hooks.stop.call( this, true );
            }

            // look for any active animations, and finish them
            for ( index = timers.length; index--; ) {
                if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
                    timers[ index ].anim.stop( true );
                    timers.splice( index, 1 );
                }
            }

            // look for any animations in the old queue and finish them
            for ( index = 0; index < length; index++ ) {
                if ( queue[ index ] && queue[ index ].finish ) {
                    queue[ index ].finish.call( this );
                }
            }

            // turn off finishing flag
            delete data.finish;
        });
    }
});

jQuery.each([ "toggle", "show", "hide" ], function( i, name ) {
    var cssFn = jQuery.fn[ name ];
    jQuery.fn[ name ] = function( speed, easing, callback ) {
        return speed == null || typeof speed === "boolean" ?
            cssFn.apply( this, arguments ) :
            this.animate( genFx( name, true ), speed, easing, callback );
    };
});

// Generate shortcuts for custom animations
jQuery.each({
    slideDown: genFx("show"),
    slideUp: genFx("hide"),
    slideToggle: genFx("toggle"),
    fadeIn: { opacity: "show" },
    fadeOut: { opacity: "hide" },
    fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
    jQuery.fn[ name ] = function( speed, easing, callback ) {
        return this.animate( props, speed, easing, callback );
    };
});

jQuery.timers = [];
jQuery.fx.tick = function() {
    var timer,
        timers = jQuery.timers,
        i = 0;

    fxNow = jQuery.now();

    for ( ; i < timers.length; i++ ) {
        timer = timers[ i ];
        // Checks the timer has not already been removed
        if ( !timer() && timers[ i ] === timer ) {
            timers.splice( i--, 1 );
        }
    }

    if ( !timers.length ) {
        jQuery.fx.stop();
    }
    fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
    jQuery.timers.push( timer );
    if ( timer() ) {
        jQuery.fx.start();
    } else {
        jQuery.timers.pop();
    }
};

jQuery.fx.interval = 13;

jQuery.fx.start = function() {
    if ( !timerId ) {
        timerId = setInterval( jQuery.fx.tick, jQuery.fx.interval );
    }
};

jQuery.fx.stop = function() {
    clearInterval( timerId );
    timerId = null;
};

jQuery.fx.speeds = {
    slow: 600,
    fast: 200,
    // Default speed
    _default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
    time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
    type = type || "fx";

    return this.queue( type, function( next, hooks ) {
        var timeout = setTimeout( next, time );
        hooks.stop = function() {
            clearTimeout( timeout );
        };
    });
};


(function() {
    // Minified: var a,b,c,d,e
    var input, div, select, a, opt;

    // Setup
    div = document.createElement( "div" );
    div.setAttribute( "className", "t" );
    div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
    a = div.getElementsByTagName("a")[ 0 ];

    // First batch of tests.
    select = document.createElement("select");
    opt = select.appendChild( document.createElement("option") );
    input = div.getElementsByTagName("input")[ 0 ];

    a.style.cssText = "top:1px";

    // Test setAttribute on camelCase class. If it works, we need attrFixes when doing get/setAttribute (ie6/7)
    support.getSetAttribute = div.className !== "t";

    // Get the style information from getAttribute
    // (IE uses .cssText instead)
    support.style = /top/.test( a.getAttribute("style") );

    // Make sure that URLs aren't manipulated
    // (IE normalizes it by default)
    support.hrefNormalized = a.getAttribute("href") === "/a";

    // Check the default checkbox/radio value ("" on WebKit; "on" elsewhere)
    support.checkOn = !!input.value;

    // Make sure that a selected-by-default option has a working selected property.
    // (WebKit defaults to false instead of true, IE too, if it's in an optgroup)
    support.optSelected = opt.selected;

    // Tests for enctype support on a form (#6743)
    support.enctype = !!document.createElement("form").enctype;

    // Make sure that the options inside disabled selects aren't marked as disabled
    // (WebKit marks them as disabled)
    select.disabled = true;
    support.optDisabled = !opt.disabled;

    // Support: IE8 only
    // Check if we can trust getAttribute("value")
    input = document.createElement( "input" );
    input.setAttribute( "value", "" );
    support.input = input.getAttribute( "value" ) === "";

    // Check if an input maintains its value after becoming a radio
    input.value = "t";
    input.setAttribute( "type", "radio" );
    support.radioValue = input.value === "t";
})();


var rreturn = /\r/g;

jQuery.fn.extend({
    val: function( value ) {
        var hooks, ret, isFunction,
            elem = this[0];

        if ( !arguments.length ) {
            if ( elem ) {
                hooks = jQuery.valHooks[ elem.type ] || jQuery.valHooks[ elem.nodeName.toLowerCase() ];

                if ( hooks && "get" in hooks && (ret = hooks.get( elem, "value" )) !== undefined ) {
                    return ret;
                }

                ret = elem.value;

                return typeof ret === "string" ?
                    // handle most common string cases
                    ret.replace(rreturn, "") :
                    // handle cases where value is null/undef or number
                    ret == null ? "" : ret;
            }

            return;
        }

        isFunction = jQuery.isFunction( value );

        return this.each(function( i ) {
            var val;

            if ( this.nodeType !== 1 ) {
                return;
            }

            if ( isFunction ) {
                val = value.call( this, i, jQuery( this ).val() );
            } else {
                val = value;
            }

            // Treat null/undefined as ""; convert numbers to string
            if ( val == null ) {
                val = "";
            } else if ( typeof val === "number" ) {
                val += "";
            } else if ( jQuery.isArray( val ) ) {
                val = jQuery.map( val, function( value ) {
                    return value == null ? "" : value + "";
                });
            }

            hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

            // If set returns undefined, fall back to normal setting
            if ( !hooks || !("set" in hooks) || hooks.set( this, val, "value" ) === undefined ) {
                this.value = val;
            }
        });
    }
});

jQuery.extend({
    valHooks: {
        option: {
            get: function( elem ) {
                var val = jQuery.find.attr( elem, "value" );
                return val != null ?
                    val :
                    // Support: IE10-11+
                    // option.text throws exceptions (#14686, #14858)
                    jQuery.trim( jQuery.text( elem ) );
            }
        },
        select: {
            get: function( elem ) {
                var value, option,
                    options = elem.options,
                    index = elem.selectedIndex,
                    one = elem.type === "select-one" || index < 0,
                    values = one ? null : [],
                    max = one ? index + 1 : options.length,
                    i = index < 0 ?
                        max :
                        one ? index : 0;

                // Loop through all the selected options
                for ( ; i < max; i++ ) {
                    option = options[ i ];

                    // oldIE doesn't update selected after form reset (#2551)
                    if ( ( option.selected || i === index ) &&
                            // Don't return options that are disabled or in a disabled optgroup
                            ( support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null ) &&
                            ( !option.parentNode.disabled || !jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

                        // Get the specific value for the option
                        value = jQuery( option ).val();

                        // We don't need an array for one selects
                        if ( one ) {
                            return value;
                        }

                        // Multi-Selects return an array
                        values.push( value );
                    }
                }

                return values;
            },

            set: function( elem, value ) {
                var optionSet, option,
                    options = elem.options,
                    values = jQuery.makeArray( value ),
                    i = options.length;

                while ( i-- ) {
                    option = options[ i ];

                    if ( jQuery.inArray( jQuery.valHooks.option.get( option ), values ) >= 0 ) {

                        // Support: IE6
                        // When new option element is added to select box we need to
                        // force reflow of newly added node in order to workaround delay
                        // of initialization properties
                        try {
                            option.selected = optionSet = true;

                        } catch ( _ ) {

                            // Will be executed only in IE6
                            option.scrollHeight;
                        }

                    } else {
                        option.selected = false;
                    }
                }

                // Force browsers to behave consistently when non-matching value is set
                if ( !optionSet ) {
                    elem.selectedIndex = -1;
                }

                return options;
            }
        }
    }
});

// Radios and checkboxes getter/setter
jQuery.each([ "radio", "checkbox" ], function() {
    jQuery.valHooks[ this ] = {
        set: function( elem, value ) {
            if ( jQuery.isArray( value ) ) {
                return ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );
            }
        }
    };
    if ( !support.checkOn ) {
        jQuery.valHooks[ this ].get = function( elem ) {
            // Support: Webkit
            // "" is returned instead of "on" if a value isn't specified
            return elem.getAttribute("value") === null ? "on" : elem.value;
        };
    }
});




var nodeHook, boolHook,
    attrHandle = jQuery.expr.attrHandle,
    ruseDefault = /^(?:checked|selected)$/i,
    getSetAttribute = support.getSetAttribute,
    getSetInput = support.input;

jQuery.fn.extend({
    attr: function( name, value ) {
        return access( this, jQuery.attr, name, value, arguments.length > 1 );
    },

    removeAttr: function( name ) {
        return this.each(function() {
            jQuery.removeAttr( this, name );
        });
    }
});

jQuery.extend({
    attr: function( elem, name, value ) {
        var hooks, ret,
            nType = elem.nodeType;

        // don't get/set attributes on text, comment and attribute nodes
        if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
            return;
        }

        // Fallback to prop when attributes are not supported
        if ( typeof elem.getAttribute === strundefined ) {
            return jQuery.prop( elem, name, value );
        }

        // All attributes are lowercase
        // Grab necessary hook if one is defined
        if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
            name = name.toLowerCase();
            hooks = jQuery.attrHooks[ name ] ||
                ( jQuery.expr.match.bool.test( name ) ? boolHook : nodeHook );
        }

        if ( value !== undefined ) {

            if ( value === null ) {
                jQuery.removeAttr( elem, name );

            } else if ( hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
                return ret;

            } else {
                elem.setAttribute( name, value + "" );
                return value;
            }

        } else if ( hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
            return ret;

        } else {
            ret = jQuery.find.attr( elem, name );

            // Non-existent attributes return null, we normalize to undefined
            return ret == null ?
                undefined :
                ret;
        }
    },

    removeAttr: function( elem, value ) {
        var name, propName,
            i = 0,
            attrNames = value && value.match( rnotwhite );

        if ( attrNames && elem.nodeType === 1 ) {
            while ( (name = attrNames[i++]) ) {
                propName = jQuery.propFix[ name ] || name;

                // Boolean attributes get special treatment (#10870)
                if ( jQuery.expr.match.bool.test( name ) ) {
                    // Set corresponding property to false
                    if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {
                        elem[ propName ] = false;
                    // Support: IE<9
                    // Also clear defaultChecked/defaultSelected (if appropriate)
                    } else {
                        elem[ jQuery.camelCase( "default-" + name ) ] =
                            elem[ propName ] = false;
                    }

                // See #9699 for explanation of this approach (setting first, then removal)
                } else {
                    jQuery.attr( elem, name, "" );
                }

                elem.removeAttribute( getSetAttribute ? name : propName );
            }
        }
    },

    attrHooks: {
        type: {
            set: function( elem, value ) {
                if ( !support.radioValue && value === "radio" && jQuery.nodeName(elem, "input") ) {
                    // Setting the type on a radio button after the value resets the value in IE6-9
                    // Reset value to default in case type is set after value during creation
                    var val = elem.value;
                    elem.setAttribute( "type", value );
                    if ( val ) {
                        elem.value = val;
                    }
                    return value;
                }
            }
        }
    }
});

// Hook for boolean attributes
boolHook = {
    set: function( elem, value, name ) {
        if ( value === false ) {
            // Remove boolean attributes when set to false
            jQuery.removeAttr( elem, name );
        } else if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {
            // IE<8 needs the *property* name
            elem.setAttribute( !getSetAttribute && jQuery.propFix[ name ] || name, name );

        // Use defaultChecked and defaultSelected for oldIE
        } else {
            elem[ jQuery.camelCase( "default-" + name ) ] = elem[ name ] = true;
        }

        return name;
    }
};

// Retrieve booleans specially
jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {

    var getter = attrHandle[ name ] || jQuery.find.attr;

    attrHandle[ name ] = getSetInput && getSetAttribute || !ruseDefault.test( name ) ?
        function( elem, name, isXML ) {
            var ret, handle;
            if ( !isXML ) {
                // Avoid an infinite loop by temporarily removing this function from the getter
                handle = attrHandle[ name ];
                attrHandle[ name ] = ret;
                ret = getter( elem, name, isXML ) != null ?
                    name.toLowerCase() :
                    null;
                attrHandle[ name ] = handle;
            }
            return ret;
        } :
        function( elem, name, isXML ) {
            if ( !isXML ) {
                return elem[ jQuery.camelCase( "default-" + name ) ] ?
                    name.toLowerCase() :
                    null;
            }
        };
});

// fix oldIE attroperties
if ( !getSetInput || !getSetAttribute ) {
    jQuery.attrHooks.value = {
        set: function( elem, value, name ) {
            if ( jQuery.nodeName( elem, "input" ) ) {
                // Does not return so that setAttribute is also used
                elem.defaultValue = value;
            } else {
                // Use nodeHook if defined (#1954); otherwise setAttribute is fine
                return nodeHook && nodeHook.set( elem, value, name );
            }
        }
    };
}

// IE6/7 do not support getting/setting some attributes with get/setAttribute
if ( !getSetAttribute ) {

    // Use this for any attribute in IE6/7
    // This fixes almost every IE6/7 issue
    nodeHook = {
        set: function( elem, value, name ) {
            // Set the existing or create a new attribute node
            var ret = elem.getAttributeNode( name );
            if ( !ret ) {
                elem.setAttributeNode(
                    (ret = elem.ownerDocument.createAttribute( name ))
                );
            }

            ret.value = value += "";

            // Break association with cloned elements by also using setAttribute (#9646)
            if ( name === "value" || value === elem.getAttribute( name ) ) {
                return value;
            }
        }
    };

    // Some attributes are constructed with empty-string values when not defined
    attrHandle.id = attrHandle.name = attrHandle.coords =
        function( elem, name, isXML ) {
            var ret;
            if ( !isXML ) {
                return (ret = elem.getAttributeNode( name )) && ret.value !== "" ?
                    ret.value :
                    null;
            }
        };

    // Fixing value retrieval on a button requires this module
    jQuery.valHooks.button = {
        get: function( elem, name ) {
            var ret = elem.getAttributeNode( name );
            if ( ret && ret.specified ) {
                return ret.value;
            }
        },
        set: nodeHook.set
    };

    // Set contenteditable to false on removals(#10429)
    // Setting to empty string throws an error as an invalid value
    jQuery.attrHooks.contenteditable = {
        set: function( elem, value, name ) {
            nodeHook.set( elem, value === "" ? false : value, name );
        }
    };

    // Set width and height to auto instead of 0 on empty string( Bug #8150 )
    // This is for removals
    jQuery.each([ "width", "height" ], function( i, name ) {
        jQuery.attrHooks[ name ] = {
            set: function( elem, value ) {
                if ( value === "" ) {
                    elem.setAttribute( name, "auto" );
                    return value;
                }
            }
        };
    });
}

if ( !support.style ) {
    jQuery.attrHooks.style = {
        get: function( elem ) {
            // Return undefined in the case of empty string
            // Note: IE uppercases css property names, but if we were to .toLowerCase()
            // .cssText, that would destroy case senstitivity in URL's, like in "background"
            return elem.style.cssText || undefined;
        },
        set: function( elem, value ) {
            return ( elem.style.cssText = value + "" );
        }
    };
}




var rfocusable = /^(?:input|select|textarea|button|object)$/i,
    rclickable = /^(?:a|area)$/i;

jQuery.fn.extend({
    prop: function( name, value ) {
        return access( this, jQuery.prop, name, value, arguments.length > 1 );
    },

    removeProp: function( name ) {
        name = jQuery.propFix[ name ] || name;
        return this.each(function() {
            // try/catch handles cases where IE balks (such as removing a property on window)
            try {
                this[ name ] = undefined;
                delete this[ name ];
            } catch( e ) {}
        });
    }
});

jQuery.extend({
    propFix: {
        "for": "htmlFor",
        "class": "className"
    },

    prop: function( elem, name, value ) {
        var ret, hooks, notxml,
            nType = elem.nodeType;

        // don't get/set properties on text, comment and attribute nodes
        if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
            return;
        }

        notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

        if ( notxml ) {
            // Fix name and attach hooks
            name = jQuery.propFix[ name ] || name;
            hooks = jQuery.propHooks[ name ];
        }

        if ( value !== undefined ) {
            return hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ?
                ret :
                ( elem[ name ] = value );

        } else {
            return hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ?
                ret :
                elem[ name ];
        }
    },

    propHooks: {
        tabIndex: {
            get: function( elem ) {
                // elem.tabIndex doesn't always return the correct value when it hasn't been explicitly set
                // http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
                // Use proper attribute retrieval(#12072)
                var tabindex = jQuery.find.attr( elem, "tabindex" );

                return tabindex ?
                    parseInt( tabindex, 10 ) :
                    rfocusable.test( elem.nodeName ) || rclickable.test( elem.nodeName ) && elem.href ?
                        0 :
                        -1;
            }
        }
    }
});

// Some attributes require a special call on IE
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !support.hrefNormalized ) {
    // href/src property should get the full normalized URL (#10299/#12915)
    jQuery.each([ "href", "src" ], function( i, name ) {
        jQuery.propHooks[ name ] = {
            get: function( elem ) {
                return elem.getAttribute( name, 4 );
            }
        };
    });
}

// Support: Safari, IE9+
// mis-reports the default selected property of an option
// Accessing the parent's selectedIndex property fixes it
if ( !support.optSelected ) {
    jQuery.propHooks.selected = {
        get: function( elem ) {
            var parent = elem.parentNode;

            if ( parent ) {
                parent.selectedIndex;

                // Make sure that it also works with optgroups, see #5701
                if ( parent.parentNode ) {
                    parent.parentNode.selectedIndex;
                }
            }
            return null;
        }
    };
}

jQuery.each([
    "tabIndex",
    "readOnly",
    "maxLength",
    "cellSpacing",
    "cellPadding",
    "rowSpan",
    "colSpan",
    "useMap",
    "frameBorder",
    "contentEditable"
], function() {
    jQuery.propFix[ this.toLowerCase() ] = this;
});

// IE6/7 call enctype encoding
if ( !support.enctype ) {
    jQuery.propFix.enctype = "encoding";
}




var rclass = /[\t\r\n\f]/g;

jQuery.fn.extend({
    addClass: function( value ) {
        var classes, elem, cur, clazz, j, finalValue,
            i = 0,
            len = this.length,
            proceed = typeof value === "string" && value;

        if ( jQuery.isFunction( value ) ) {
            return this.each(function( j ) {
                jQuery( this ).addClass( value.call( this, j, this.className ) );
            });
        }

        if ( proceed ) {
            // The disjunction here is for better compressibility (see removeClass)
            classes = ( value || "" ).match( rnotwhite ) || [];

            for ( ; i < len; i++ ) {
                elem = this[ i ];
                cur = elem.nodeType === 1 && ( elem.className ?
                    ( " " + elem.className + " " ).replace( rclass, " " ) :
                    " "
                );

                if ( cur ) {
                    j = 0;
                    while ( (clazz = classes[j++]) ) {
                        if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
                            cur += clazz + " ";
                        }
                    }

                    // only assign if different to avoid unneeded rendering.
                    finalValue = jQuery.trim( cur );
                    if ( elem.className !== finalValue ) {
                        elem.className = finalValue;
                    }
                }
            }
        }

        return this;
    },

    removeClass: function( value ) {
        var classes, elem, cur, clazz, j, finalValue,
            i = 0,
            len = this.length,
            proceed = arguments.length === 0 || typeof value === "string" && value;

        if ( jQuery.isFunction( value ) ) {
            return this.each(function( j ) {
                jQuery( this ).removeClass( value.call( this, j, this.className ) );
            });
        }
        if ( proceed ) {
            classes = ( value || "" ).match( rnotwhite ) || [];

            for ( ; i < len; i++ ) {
                elem = this[ i ];
                // This expression is here for better compressibility (see addClass)
                cur = elem.nodeType === 1 && ( elem.className ?
                    ( " " + elem.className + " " ).replace( rclass, " " ) :
                    ""
                );

                if ( cur ) {
                    j = 0;
                    while ( (clazz = classes[j++]) ) {
                        // Remove *all* instances
                        while ( cur.indexOf( " " + clazz + " " ) >= 0 ) {
                            cur = cur.replace( " " + clazz + " ", " " );
                        }
                    }

                    // only assign if different to avoid unneeded rendering.
                    finalValue = value ? jQuery.trim( cur ) : "";
                    if ( elem.className !== finalValue ) {
                        elem.className = finalValue;
                    }
                }
            }
        }

        return this;
    },

    toggleClass: function( value, stateVal ) {
        var type = typeof value;

        if ( typeof stateVal === "boolean" && type === "string" ) {
            return stateVal ? this.addClass( value ) : this.removeClass( value );
        }

        if ( jQuery.isFunction( value ) ) {
            return this.each(function( i ) {
                jQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );
            });
        }

        return this.each(function() {
            if ( type === "string" ) {
                // toggle individual class names
                var className,
                    i = 0,
                    self = jQuery( this ),
                    classNames = value.match( rnotwhite ) || [];

                while ( (className = classNames[ i++ ]) ) {
                    // check each className given, space separated list
                    if ( self.hasClass( className ) ) {
                        self.removeClass( className );
                    } else {
                        self.addClass( className );
                    }
                }

            // Toggle whole class name
            } else if ( type === strundefined || type === "boolean" ) {
                if ( this.className ) {
                    // store className if set
                    jQuery._data( this, "__className__", this.className );
                }

                // If the element has a class name or if we're passed "false",
                // then remove the whole classname (if there was one, the above saved it).
                // Otherwise bring back whatever was previously saved (if anything),
                // falling back to the empty string if nothing was stored.
                this.className = this.className || value === false ? "" : jQuery._data( this, "__className__" ) || "";
            }
        });
    },

    hasClass: function( selector ) {
        var className = " " + selector + " ",
            i = 0,
            l = this.length;
        for ( ; i < l; i++ ) {
            if ( this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf( className ) >= 0 ) {
                return true;
            }
        }

        return false;
    }
});




// Return jQuery for attributes-only inclusion


jQuery.each( ("blur focus focusin focusout load resize scroll unload click dblclick " +
    "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
    "change select submit keydown keypress keyup error contextmenu").split(" "), function( i, name ) {

    // Handle event binding
    jQuery.fn[ name ] = function( data, fn ) {
        return arguments.length > 0 ?
            this.on( name, null, data, fn ) :
            this.trigger( name );
    };
});

jQuery.fn.extend({
    hover: function( fnOver, fnOut ) {
        return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
    },

    bind: function( types, data, fn ) {
        return this.on( types, null, data, fn );
    },
    unbind: function( types, fn ) {
        return this.off( types, null, fn );
    },

    delegate: function( selector, types, data, fn ) {
        return this.on( types, selector, data, fn );
    },
    undelegate: function( selector, types, fn ) {
        // ( namespace ) or ( selector, types [, fn] )
        return arguments.length === 1 ? this.off( selector, "**" ) : this.off( types, selector || "**", fn );
    }
});


var nonce = jQuery.now();

var rquery = (/\?/);



var rvalidtokens = /(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;

jQuery.parseJSON = function( data ) {
    // Attempt to parse using the native JSON parser first
    if ( window.JSON && window.JSON.parse ) {
        // Support: Android 2.3
        // Workaround failure to string-cast null input
        return window.JSON.parse( data + "" );
    }

    var requireNonComma,
        depth = null,
        str = jQuery.trim( data + "" );

    // Guard against invalid (and possibly dangerous) input by ensuring that nothing remains
    // after removing valid tokens
    return str && !jQuery.trim( str.replace( rvalidtokens, function( token, comma, open, close ) {

        // Force termination if we see a misplaced comma
        if ( requireNonComma && comma ) {
            depth = 0;
        }

        // Perform no more replacements after returning to outermost depth
        if ( depth === 0 ) {
            return token;
        }

        // Commas must not follow "[", "{", or ","
        requireNonComma = open || comma;

        // Determine new depth
        // array/object open ("[" or "{"): depth += true - false (increment)
        // array/object close ("]" or "}"): depth += false - true (decrement)
        // other cases ("," or primitive): depth += true - true (numeric cast)
        depth += !close - !open;

        // Remove this token
        return "";
    }) ) ?
        ( Function( "return " + str ) )() :
        jQuery.error( "Invalid JSON: " + data );
};


// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
    var xml, tmp;
    if ( !data || typeof data !== "string" ) {
        return null;
    }
    try {
        if ( window.DOMParser ) { // Standard
            tmp = new DOMParser();
            xml = tmp.parseFromString( data, "text/xml" );
        } else { // IE
            xml = new ActiveXObject( "Microsoft.XMLDOM" );
            xml.async = "false";
            xml.loadXML( data );
        }
    } catch( e ) {
        xml = undefined;
    }
    if ( !xml || !xml.documentElement || xml.getElementsByTagName( "parsererror" ).length ) {
        jQuery.error( "Invalid XML: " + data );
    }
    return xml;
};


var
    // Document location
    ajaxLocParts,
    ajaxLocation,

    rhash = /#.*$/,
    rts = /([?&])_=[^&]*/,
    rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg, // IE leaves an \r character at EOL
    // #7653, #8125, #8152: local protocol detection
    rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
    rnoContent = /^(?:GET|HEAD)$/,
    rprotocol = /^\/\//,
    rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,

    /* Prefilters
     * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
     * 2) These are called:
     *    - BEFORE asking for a transport
     *    - AFTER param serialization (s.data is a string if s.processData is true)
     * 3) key is the dataType
     * 4) the catchall symbol "*" can be used
     * 5) execution will start with transport dataType and THEN continue down to "*" if needed
     */
    prefilters = {},

    /* Transports bindings
     * 1) key is the dataType
     * 2) the catchall symbol "*" can be used
     * 3) selection will start with transport dataType and THEN go to "*" if needed
     */
    transports = {},

    // Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
    allTypes = "*/".concat("*");

// #8138, IE may throw an exception when accessing
// a field from window.location if document.domain has been set
try {
    ajaxLocation = location.href;
} catch( e ) {
    // Use the href attribute of an A element
    // since IE will modify it given document.location
    ajaxLocation = document.createElement( "a" );
    ajaxLocation.href = "";
    ajaxLocation = ajaxLocation.href;
}

// Segment location into parts
ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

    // dataTypeExpression is optional and defaults to "*"
    return function( dataTypeExpression, func ) {

        if ( typeof dataTypeExpression !== "string" ) {
            func = dataTypeExpression;
            dataTypeExpression = "*";
        }

        var dataType,
            i = 0,
            dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];

        if ( jQuery.isFunction( func ) ) {
            // For each dataType in the dataTypeExpression
            while ( (dataType = dataTypes[i++]) ) {
                // Prepend if requested
                if ( dataType.charAt( 0 ) === "+" ) {
                    dataType = dataType.slice( 1 ) || "*";
                    (structure[ dataType ] = structure[ dataType ] || []).unshift( func );

                // Otherwise append
                } else {
                    (structure[ dataType ] = structure[ dataType ] || []).push( func );
                }
            }
        }
    };
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

    var inspected = {},
        seekingTransport = ( structure === transports );

    function inspect( dataType ) {
        var selected;
        inspected[ dataType ] = true;
        jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
            var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
            if ( typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[ dataTypeOrTransport ] ) {
                options.dataTypes.unshift( dataTypeOrTransport );
                inspect( dataTypeOrTransport );
                return false;
            } else if ( seekingTransport ) {
                return !( selected = dataTypeOrTransport );
            }
        });
        return selected;
    }

    return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
    var deep, key,
        flatOptions = jQuery.ajaxSettings.flatOptions || {};

    for ( key in src ) {
        if ( src[ key ] !== undefined ) {
            ( flatOptions[ key ] ? target : ( deep || (deep = {}) ) )[ key ] = src[ key ];
        }
    }
    if ( deep ) {
        jQuery.extend( true, target, deep );
    }

    return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {
    var firstDataType, ct, finalDataType, type,
        contents = s.contents,
        dataTypes = s.dataTypes;

    // Remove auto dataType and get content-type in the process
    while ( dataTypes[ 0 ] === "*" ) {
        dataTypes.shift();
        if ( ct === undefined ) {
            ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
        }
    }

    // Check if we're dealing with a known content-type
    if ( ct ) {
        for ( type in contents ) {
            if ( contents[ type ] && contents[ type ].test( ct ) ) {
                dataTypes.unshift( type );
                break;
            }
        }
    }

    // Check to see if we have a response for the expected dataType
    if ( dataTypes[ 0 ] in responses ) {
        finalDataType = dataTypes[ 0 ];
    } else {
        // Try convertible dataTypes
        for ( type in responses ) {
            if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[0] ] ) {
                finalDataType = type;
                break;
            }
            if ( !firstDataType ) {
                firstDataType = type;
            }
        }
        // Or just use first one
        finalDataType = finalDataType || firstDataType;
    }

    // If we found a dataType
    // We add the dataType to the list if needed
    // and return the corresponding response
    if ( finalDataType ) {
        if ( finalDataType !== dataTypes[ 0 ] ) {
            dataTypes.unshift( finalDataType );
        }
        return responses[ finalDataType ];
    }
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
    var conv2, current, conv, tmp, prev,
        converters = {},
        // Work with a copy of dataTypes in case we need to modify it for conversion
        dataTypes = s.dataTypes.slice();

    // Create converters map with lowercased keys
    if ( dataTypes[ 1 ] ) {
        for ( conv in s.converters ) {
            converters[ conv.toLowerCase() ] = s.converters[ conv ];
        }
    }

    current = dataTypes.shift();

    // Convert to each sequential dataType
    while ( current ) {

        if ( s.responseFields[ current ] ) {
            jqXHR[ s.responseFields[ current ] ] = response;
        }

        // Apply the dataFilter if provided
        if ( !prev && isSuccess && s.dataFilter ) {
            response = s.dataFilter( response, s.dataType );
        }

        prev = current;
        current = dataTypes.shift();

        if ( current ) {

            // There's only work to do if current dataType is non-auto
            if ( current === "*" ) {

                current = prev;

            // Convert response if prev dataType is non-auto and differs from current
            } else if ( prev !== "*" && prev !== current ) {

                // Seek a direct converter
                conv = converters[ prev + " " + current ] || converters[ "* " + current ];

                // If none found, seek a pair
                if ( !conv ) {
                    for ( conv2 in converters ) {

                        // If conv2 outputs current
                        tmp = conv2.split( " " );
                        if ( tmp[ 1 ] === current ) {

                            // If prev can be converted to accepted input
                            conv = converters[ prev + " " + tmp[ 0 ] ] ||
                                converters[ "* " + tmp[ 0 ] ];
                            if ( conv ) {
                                // Condense equivalence converters
                                if ( conv === true ) {
                                    conv = converters[ conv2 ];

                                // Otherwise, insert the intermediate dataType
                                } else if ( converters[ conv2 ] !== true ) {
                                    current = tmp[ 0 ];
                                    dataTypes.unshift( tmp[ 1 ] );
                                }
                                break;
                            }
                        }
                    }
                }

                // Apply converter (if not an equivalence)
                if ( conv !== true ) {

                    // Unless errors are allowed to bubble, catch and return them
                    if ( conv && s[ "throws" ] ) {
                        response = conv( response );
                    } else {
                        try {
                            response = conv( response );
                        } catch ( e ) {
                            return { state: "parsererror", error: conv ? e : "No conversion from " + prev + " to " + current };
                        }
                    }
                }
            }
        }
    }

    return { state: "success", data: response };
}

jQuery.extend({

    // Counter for holding the number of active queries
    active: 0,

    // Last-Modified header cache for next request
    lastModified: {},
    etag: {},

    ajaxSettings: {
        url: ajaxLocation,
        type: "GET",
        isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
        global: true,
        processData: true,
        async: true,
        contentType: "application/x-www-form-urlencoded; charset=UTF-8",
        /*
        timeout: 0,
        data: null,
        dataType: null,
        username: null,
        password: null,
        cache: null,
        throws: false,
        traditional: false,
        headers: {},
        */

        accepts: {
            "*": allTypes,
            text: "text/plain",
            html: "text/html",
            xml: "application/xml, text/xml",
            json: "application/json, text/javascript"
        },

        contents: {
            xml: /xml/,
            html: /html/,
            json: /json/
        },

        responseFields: {
            xml: "responseXML",
            text: "responseText",
            json: "responseJSON"
        },

        // Data converters
        // Keys separate source (or catchall "*") and destination types with a single space
        converters: {

            // Convert anything to text
            "* text": String,

            // Text to html (true = no transformation)
            "text html": true,

            // Evaluate text as a json expression
            "text json": jQuery.parseJSON,

            // Parse text as xml
            "text xml": jQuery.parseXML
        },

        // For options that shouldn't be deep extended:
        // you can add your own custom options here if
        // and when you create one that shouldn't be
        // deep extended (see ajaxExtend)
        flatOptions: {
            url: true,
            context: true
        }
    },

    // Creates a full fledged settings object into target
    // with both ajaxSettings and settings fields.
    // If target is omitted, writes into ajaxSettings.
    ajaxSetup: function( target, settings ) {
        return settings ?

            // Building a settings object
            ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

            // Extending ajaxSettings
            ajaxExtend( jQuery.ajaxSettings, target );
    },

    ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
    ajaxTransport: addToPrefiltersOrTransports( transports ),

    // Main method
    ajax: function( url, options ) {

        // If url is an object, simulate pre-1.5 signature
        if ( typeof url === "object" ) {
            options = url;
            url = undefined;
        }

        // Force options to be an object
        options = options || {};

        var // Cross-domain detection vars
            parts,
            // Loop variable
            i,
            // URL without anti-cache param
            cacheURL,
            // Response headers as string
            responseHeadersString,
            // timeout handle
            timeoutTimer,

            // To know if global events are to be dispatched
            fireGlobals,

            transport,
            // Response headers
            responseHeaders,
            // Create the final options object
            s = jQuery.ajaxSetup( {}, options ),
            // Callbacks context
            callbackContext = s.context || s,
            // Context for global events is callbackContext if it is a DOM node or jQuery collection
            globalEventContext = s.context && ( callbackContext.nodeType || callbackContext.jquery ) ?
                jQuery( callbackContext ) :
                jQuery.event,
            // Deferreds
            deferred = jQuery.Deferred(),
            completeDeferred = jQuery.Callbacks("once memory"),
            // Status-dependent callbacks
            statusCode = s.statusCode || {},
            // Headers (they are sent all at once)
            requestHeaders = {},
            requestHeadersNames = {},
            // The jqXHR state
            state = 0,
            // Default abort message
            strAbort = "canceled",
            // Fake xhr
            jqXHR = {
                readyState: 0,

                // Builds headers hashtable if needed
                getResponseHeader: function( key ) {
                    var match;
                    if ( state === 2 ) {
                        if ( !responseHeaders ) {
                            responseHeaders = {};
                            while ( (match = rheaders.exec( responseHeadersString )) ) {
                                responseHeaders[ match[1].toLowerCase() ] = match[ 2 ];
                            }
                        }
                        match = responseHeaders[ key.toLowerCase() ];
                    }
                    return match == null ? null : match;
                },

                // Raw string
                getAllResponseHeaders: function() {
                    return state === 2 ? responseHeadersString : null;
                },

                // Caches the header
                setRequestHeader: function( name, value ) {
                    var lname = name.toLowerCase();
                    if ( !state ) {
                        name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
                        requestHeaders[ name ] = value;
                    }
                    return this;
                },

                // Overrides response content-type header
                overrideMimeType: function( type ) {
                    if ( !state ) {
                        s.mimeType = type;
                    }
                    return this;
                },

                // Status-dependent callbacks
                statusCode: function( map ) {
                    var code;
                    if ( map ) {
                        if ( state < 2 ) {
                            for ( code in map ) {
                                // Lazy-add the new callback in a way that preserves old ones
                                statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
                            }
                        } else {
                            // Execute the appropriate callbacks
                            jqXHR.always( map[ jqXHR.status ] );
                        }
                    }
                    return this;
                },

                // Cancel the request
                abort: function( statusText ) {
                    var finalText = statusText || strAbort;
                    if ( transport ) {
                        transport.abort( finalText );
                    }
                    done( 0, finalText );
                    return this;
                }
            };

        // Attach deferreds
        deferred.promise( jqXHR ).complete = completeDeferred.add;
        jqXHR.success = jqXHR.done;
        jqXHR.error = jqXHR.fail;

        // Remove hash character (#7531: and string promotion)
        // Add protocol if not provided (#5866: IE7 issue with protocol-less urls)
        // Handle falsy url in the settings object (#10093: consistency with old signature)
        // We also use the url parameter if available
        s.url = ( ( url || s.url || ajaxLocation ) + "" ).replace( rhash, "" ).replace( rprotocol, ajaxLocParts[ 1 ] + "//" );

        // Alias method option to type as per ticket #12004
        s.type = options.method || options.type || s.method || s.type;

        // Extract dataTypes list
        s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];

        // A cross-domain request is in order when we have a protocol:host:port mismatch
        if ( s.crossDomain == null ) {
            parts = rurl.exec( s.url.toLowerCase() );
            s.crossDomain = !!( parts &&
                ( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||
                    ( parts[ 3 ] || ( parts[ 1 ] === "http:" ? "80" : "443" ) ) !==
                        ( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? "80" : "443" ) ) )
            );
        }

        // Convert data if not already a string
        if ( s.data && s.processData && typeof s.data !== "string" ) {
            s.data = jQuery.param( s.data, s.traditional );
        }

        // Apply prefilters
        inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

        // If request was aborted inside a prefilter, stop there
        if ( state === 2 ) {
            return jqXHR;
        }

        // We can fire global events as of now if asked to
        // Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
        fireGlobals = jQuery.event && s.global;

        // Watch for a new set of requests
        if ( fireGlobals && jQuery.active++ === 0 ) {
            jQuery.event.trigger("ajaxStart");
        }

        // Uppercase the type
        s.type = s.type.toUpperCase();

        // Determine if request has content
        s.hasContent = !rnoContent.test( s.type );

        // Save the URL in case we're toying with the If-Modified-Since
        // and/or If-None-Match header later on
        cacheURL = s.url;

        // More options handling for requests with no content
        if ( !s.hasContent ) {

            // If data is available, append data to url
            if ( s.data ) {
                cacheURL = ( s.url += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data );
                // #9682: remove data so that it's not used in an eventual retry
                delete s.data;
            }

            // Add anti-cache in url if needed
            if ( s.cache === false ) {
                s.url = rts.test( cacheURL ) ?

                    // If there is already a '_' parameter, set its value
                    cacheURL.replace( rts, "$1_=" + nonce++ ) :

                    // Otherwise add one to the end
                    cacheURL + ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + nonce++;
            }
        }

        // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
        if ( s.ifModified ) {
            if ( jQuery.lastModified[ cacheURL ] ) {
                jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
            }
            if ( jQuery.etag[ cacheURL ] ) {
                jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
            }
        }

        // Set the correct header, if data is being sent
        if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
            jqXHR.setRequestHeader( "Content-Type", s.contentType );
        }

        // Set the Accepts header for the server, depending on the dataType
        jqXHR.setRequestHeader(
            "Accept",
            s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?
                s.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
                s.accepts[ "*" ]
        );

        // Check for headers option
        for ( i in s.headers ) {
            jqXHR.setRequestHeader( i, s.headers[ i ] );
        }

        // Allow custom headers/mimetypes and early abort
        if ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
            // Abort if not done already and return
            return jqXHR.abort();
        }

        // aborting is no longer a cancellation
        strAbort = "abort";

        // Install callbacks on deferreds
        for ( i in { success: 1, error: 1, complete: 1 } ) {
            jqXHR[ i ]( s[ i ] );
        }

        // Get transport
        transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

        // If no transport, we auto-abort
        if ( !transport ) {
            done( -1, "No Transport" );
        } else {
            jqXHR.readyState = 1;

            // Send global event
            if ( fireGlobals ) {
                globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
            }
            // Timeout
            if ( s.async && s.timeout > 0 ) {
                timeoutTimer = setTimeout(function() {
                    jqXHR.abort("timeout");
                }, s.timeout );
            }

            try {
                state = 1;
                transport.send( requestHeaders, done );
            } catch ( e ) {
                // Propagate exception as error if not done
                if ( state < 2 ) {
                    done( -1, e );
                // Simply rethrow otherwise
                } else {
                    throw e;
                }
            }
        }

        // Callback for when everything is done
        function done( status, nativeStatusText, responses, headers ) {
            var isSuccess, success, error, response, modified,
                statusText = nativeStatusText;

            // Called once
            if ( state === 2 ) {
                return;
            }

            // State is "done" now
            state = 2;

            // Clear timeout if it exists
            if ( timeoutTimer ) {
                clearTimeout( timeoutTimer );
            }

            // Dereference transport for early garbage collection
            // (no matter how long the jqXHR object will be used)
            transport = undefined;

            // Cache response headers
            responseHeadersString = headers || "";

            // Set readyState
            jqXHR.readyState = status > 0 ? 4 : 0;

            // Determine if successful
            isSuccess = status >= 200 && status < 300 || status === 304;

            // Get response data
            if ( responses ) {
                response = ajaxHandleResponses( s, jqXHR, responses );
            }

            // Convert no matter what (that way responseXXX fields are always set)
            response = ajaxConvert( s, response, jqXHR, isSuccess );

            // If successful, handle type chaining
            if ( isSuccess ) {

                // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
                if ( s.ifModified ) {
                    modified = jqXHR.getResponseHeader("Last-Modified");
                    if ( modified ) {
                        jQuery.lastModified[ cacheURL ] = modified;
                    }
                    modified = jqXHR.getResponseHeader("etag");
                    if ( modified ) {
                        jQuery.etag[ cacheURL ] = modified;
                    }
                }

                // if no content
                if ( status === 204 || s.type === "HEAD" ) {
                    statusText = "nocontent";

                // if not modified
                } else if ( status === 304 ) {
                    statusText = "notmodified";

                // If we have data, let's convert it
                } else {
                    statusText = response.state;
                    success = response.data;
                    error = response.error;
                    isSuccess = !error;
                }
            } else {
                // We extract error from statusText
                // then normalize statusText and status for non-aborts
                error = statusText;
                if ( status || !statusText ) {
                    statusText = "error";
                    if ( status < 0 ) {
                        status = 0;
                    }
                }
            }

            // Set data for the fake xhr object
            jqXHR.status = status;
            jqXHR.statusText = ( nativeStatusText || statusText ) + "";

            // Success/Error
            if ( isSuccess ) {
                deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
            } else {
                deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
            }

            // Status-dependent callbacks
            jqXHR.statusCode( statusCode );
            statusCode = undefined;

            if ( fireGlobals ) {
                globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
                    [ jqXHR, s, isSuccess ? success : error ] );
            }

            // Complete
            completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

            if ( fireGlobals ) {
                globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
                // Handle the global AJAX counter
                if ( !( --jQuery.active ) ) {
                    jQuery.event.trigger("ajaxStop");
                }
            }
        }

        return jqXHR;
    },

    getJSON: function( url, data, callback ) {
        return jQuery.get( url, data, callback, "json" );
    },

    getScript: function( url, callback ) {
        return jQuery.get( url, undefined, callback, "script" );
    }
});

jQuery.each( [ "get", "post" ], function( i, method ) {
    jQuery[ method ] = function( url, data, callback, type ) {
        // shift arguments if data argument was omitted
        if ( jQuery.isFunction( data ) ) {
            type = type || callback;
            callback = data;
            data = undefined;
        }

        return jQuery.ajax({
            url: url,
            type: method,
            dataType: type,
            data: data,
            success: callback
        });
    };
});


jQuery._evalUrl = function( url ) {
    return jQuery.ajax({
        url: url,
        type: "GET",
        dataType: "script",
        async: false,
        global: false,
        "throws": true
    });
};


jQuery.fn.extend({
    wrapAll: function( html ) {
        if ( jQuery.isFunction( html ) ) {
            return this.each(function(i) {
                jQuery(this).wrapAll( html.call(this, i) );
            });
        }

        if ( this[0] ) {
            // The elements to wrap the target around
            var wrap = jQuery( html, this[0].ownerDocument ).eq(0).clone(true);

            if ( this[0].parentNode ) {
                wrap.insertBefore( this[0] );
            }

            wrap.map(function() {
                var elem = this;

                while ( elem.firstChild && elem.firstChild.nodeType === 1 ) {
                    elem = elem.firstChild;
                }

                return elem;
            }).append( this );
        }

        return this;
    },

    wrapInner: function( html ) {
        if ( jQuery.isFunction( html ) ) {
            return this.each(function(i) {
                jQuery(this).wrapInner( html.call(this, i) );
            });
        }

        return this.each(function() {
            var self = jQuery( this ),
                contents = self.contents();

            if ( contents.length ) {
                contents.wrapAll( html );

            } else {
                self.append( html );
            }
        });
    },

    wrap: function( html ) {
        var isFunction = jQuery.isFunction( html );

        return this.each(function(i) {
            jQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );
        });
    },

    unwrap: function() {
        return this.parent().each(function() {
            if ( !jQuery.nodeName( this, "body" ) ) {
                jQuery( this ).replaceWith( this.childNodes );
            }
        }).end();
    }
});


jQuery.expr.filters.hidden = function( elem ) {
    // Support: Opera <= 12.12
    // Opera reports offsetWidths and offsetHeights less than zero on some elements
    return elem.offsetWidth <= 0 && elem.offsetHeight <= 0 ||
        (!support.reliableHiddenOffsets() &&
            ((elem.style && elem.style.display) || jQuery.css( elem, "display" )) === "none");
};

jQuery.expr.filters.visible = function( elem ) {
    return !jQuery.expr.filters.hidden( elem );
};




var r20 = /%20/g,
    rbracket = /\[\]$/,
    rCRLF = /\r?\n/g,
    rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
    rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
    var name;

    if ( jQuery.isArray( obj ) ) {
        // Serialize array item.
        jQuery.each( obj, function( i, v ) {
            if ( traditional || rbracket.test( prefix ) ) {
                // Treat each array item as a scalar.
                add( prefix, v );

            } else {
                // Item is non-scalar (array or object), encode its numeric index.
                buildParams( prefix + "[" + ( typeof v === "object" ? i : "" ) + "]", v, traditional, add );
            }
        });

    } else if ( !traditional && jQuery.type( obj ) === "object" ) {
        // Serialize object item.
        for ( name in obj ) {
            buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
        }

    } else {
        // Serialize scalar item.
        add( prefix, obj );
    }
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
    var prefix,
        s = [],
        add = function( key, value ) {
            // If value is a function, invoke it and return its value
            value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
            s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
        };

    // Set traditional to true for jQuery <= 1.3.2 behavior.
    if ( traditional === undefined ) {
        traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
    }

    // If an array was passed in, assume that it is an array of form elements.
    if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
        // Serialize the form elements
        jQuery.each( a, function() {
            add( this.name, this.value );
        });

    } else {
        // If traditional, encode the "old" way (the way 1.3.2 or older
        // did it), otherwise encode params recursively.
        for ( prefix in a ) {
            buildParams( prefix, a[ prefix ], traditional, add );
        }
    }

    // Return the resulting serialization
    return s.join( "&" ).replace( r20, "+" );
};

jQuery.fn.extend({
    serialize: function() {
        return jQuery.param( this.serializeArray() );
    },
    serializeArray: function() {
        return this.map(function() {
            // Can add propHook for "elements" to filter or add form elements
            var elements = jQuery.prop( this, "elements" );
            return elements ? jQuery.makeArray( elements ) : this;
        })
        .filter(function() {
            var type = this.type;
            // Use .is(":disabled") so that fieldset[disabled] works
            return this.name && !jQuery( this ).is( ":disabled" ) &&
                rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
                ( this.checked || !rcheckableType.test( type ) );
        })
        .map(function( i, elem ) {
            var val = jQuery( this ).val();

            return val == null ?
                null :
                jQuery.isArray( val ) ?
                    jQuery.map( val, function( val ) {
                        return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
                    }) :
                    { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
        }).get();
    }
});


// Create the request object
// (This is still attached to ajaxSettings for backward compatibility)
jQuery.ajaxSettings.xhr = window.ActiveXObject !== undefined ?
    // Support: IE6+
    function() {

        // XHR cannot access local files, always use ActiveX for that case
        return !this.isLocal &&

            // Support: IE7-8
            // oldIE XHR does not support non-RFC2616 methods (#13240)
            // See http://msdn.microsoft.com/en-us/library/ie/ms536648(v=vs.85).aspx
            // and http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9
            // Although this check for six methods instead of eight
            // since IE also does not support "trace" and "connect"
            /^(get|post|head|put|delete|options)$/i.test( this.type ) &&

            createStandardXHR() || createActiveXHR();
    } :
    // For all other browsers, use the standard XMLHttpRequest object
    createStandardXHR;

var xhrId = 0,
    xhrCallbacks = {},
    xhrSupported = jQuery.ajaxSettings.xhr();

// Support: IE<10
// Open requests must be manually aborted on unload (#5280)
// See https://support.microsoft.com/kb/2856746 for more info
if ( window.attachEvent ) {
    window.attachEvent( "onunload", function() {
        for ( var key in xhrCallbacks ) {
            xhrCallbacks[ key ]( undefined, true );
        }
    });
}

// Determine support properties
support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
xhrSupported = support.ajax = !!xhrSupported;

// Create transport if the browser can provide an xhr
if ( xhrSupported ) {

    jQuery.ajaxTransport(function( options ) {
        // Cross domain only allowed if supported through XMLHttpRequest
        if ( !options.crossDomain || support.cors ) {

            var callback;

            return {
                send: function( headers, complete ) {
                    var i,
                        xhr = options.xhr(),
                        id = ++xhrId;

                    // Open the socket
                    xhr.open( options.type, options.url, options.async, options.username, options.password );

                    // Apply custom fields if provided
                    if ( options.xhrFields ) {
                        for ( i in options.xhrFields ) {
                            xhr[ i ] = options.xhrFields[ i ];
                        }
                    }

                    // Override mime type if needed
                    if ( options.mimeType && xhr.overrideMimeType ) {
                        xhr.overrideMimeType( options.mimeType );
                    }

                    // X-Requested-With header
                    // For cross-domain requests, seeing as conditions for a preflight are
                    // akin to a jigsaw puzzle, we simply never set it to be sure.
                    // (it can always be set on a per-request basis or even using ajaxSetup)
                    // For same-domain requests, won't change header if already provided.
                    if ( !options.crossDomain && !headers["X-Requested-With"] ) {
                        headers["X-Requested-With"] = "XMLHttpRequest";
                    }

                    // Set headers
                    for ( i in headers ) {
                        // Support: IE<9
                        // IE's ActiveXObject throws a 'Type Mismatch' exception when setting
                        // request header to a null-value.
                        //
                        // To keep consistent with other XHR implementations, cast the value
                        // to string and ignore `undefined`.
                        if ( headers[ i ] !== undefined ) {
                            xhr.setRequestHeader( i, headers[ i ] + "" );
                        }
                    }

                    // Do send the request
                    // This may raise an exception which is actually
                    // handled in jQuery.ajax (so no try/catch here)
                    xhr.send( ( options.hasContent && options.data ) || null );

                    // Listener
                    callback = function( _, isAbort ) {
                        var status, statusText, responses;

                        // Was never called and is aborted or complete
                        if ( callback && ( isAbort || xhr.readyState === 4 ) ) {
                            // Clean up
                            delete xhrCallbacks[ id ];
                            callback = undefined;
                            xhr.onreadystatechange = jQuery.noop;

                            // Abort manually if needed
                            if ( isAbort ) {
                                if ( xhr.readyState !== 4 ) {
                                    xhr.abort();
                                }
                            } else {
                                responses = {};
                                status = xhr.status;

                                // Support: IE<10
                                // Accessing binary-data responseText throws an exception
                                // (#11426)
                                if ( typeof xhr.responseText === "string" ) {
                                    responses.text = xhr.responseText;
                                }

                                // Firefox throws an exception when accessing
                                // statusText for faulty cross-domain requests
                                try {
                                    statusText = xhr.statusText;
                                } catch( e ) {
                                    // We normalize with Webkit giving an empty statusText
                                    statusText = "";
                                }

                                // Filter status for non standard behaviors

                                // If the request is local and we have data: assume a success
                                // (success with no data won't get notified, that's the best we
                                // can do given current implementations)
                                if ( !status && options.isLocal && !options.crossDomain ) {
                                    status = responses.text ? 200 : 404;
                                // IE - #1450: sometimes returns 1223 when it should be 204
                                } else if ( status === 1223 ) {
                                    status = 204;
                                }
                            }
                        }

                        // Call complete if needed
                        if ( responses ) {
                            complete( status, statusText, responses, xhr.getAllResponseHeaders() );
                        }
                    };

                    if ( !options.async ) {
                        // if we're in sync mode we fire the callback
                        callback();
                    } else if ( xhr.readyState === 4 ) {
                        // (IE6 & IE7) if it's in cache and has been
                        // retrieved directly we need to fire the callback
                        setTimeout( callback );
                    } else {
                        // Add to the list of active xhr callbacks
                        xhr.onreadystatechange = xhrCallbacks[ id ] = callback;
                    }
                },

                abort: function() {
                    if ( callback ) {
                        callback( undefined, true );
                    }
                }
            };
        }
    });
}

// Functions to create xhrs
function createStandardXHR() {
    try {
        return new window.XMLHttpRequest();
    } catch( e ) {}
}

function createActiveXHR() {
    try {
        return new window.ActiveXObject( "Microsoft.XMLHTTP" );
    } catch( e ) {}
}




// Install script dataType
jQuery.ajaxSetup({
    accepts: {
        script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
    },
    contents: {
        script: /(?:java|ecma)script/
    },
    converters: {
        "text script": function( text ) {
            jQuery.globalEval( text );
            return text;
        }
    }
});

// Handle cache's special case and global
jQuery.ajaxPrefilter( "script", function( s ) {
    if ( s.cache === undefined ) {
        s.cache = false;
    }
    if ( s.crossDomain ) {
        s.type = "GET";
        s.global = false;
    }
});

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function(s) {

    // This transport only deals with cross domain requests
    if ( s.crossDomain ) {

        var script,
            head = document.head || jQuery("head")[0] || document.documentElement;

        return {

            send: function( _, callback ) {

                script = document.createElement("script");

                script.async = true;

                if ( s.scriptCharset ) {
                    script.charset = s.scriptCharset;
                }

                script.src = s.url;

                // Attach handlers for all browsers
                script.onload = script.onreadystatechange = function( _, isAbort ) {

                    if ( isAbort || !script.readyState || /loaded|complete/.test( script.readyState ) ) {

                        // Handle memory leak in IE
                        script.onload = script.onreadystatechange = null;

                        // Remove the script
                        if ( script.parentNode ) {
                            script.parentNode.removeChild( script );
                        }

                        // Dereference the script
                        script = null;

                        // Callback if not abort
                        if ( !isAbort ) {
                            callback( 200, "success" );
                        }
                    }
                };

                // Circumvent IE6 bugs with base elements (#2709 and #4378) by prepending
                // Use native DOM manipulation to avoid our domManip AJAX trickery
                head.insertBefore( script, head.firstChild );
            },

            abort: function() {
                if ( script ) {
                    script.onload( undefined, true );
                }
            }
        };
    }
});




var oldCallbacks = [],
    rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup({
    jsonp: "callback",
    jsonpCallback: function() {
        var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
        this[ callback ] = true;
        return callback;
    }
});

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

    var callbackName, overwritten, responseContainer,
        jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
            "url" :
            typeof s.data === "string" && !( s.contentType || "" ).indexOf("application/x-www-form-urlencoded") && rjsonp.test( s.data ) && "data"
        );

    // Handle iff the expected data type is "jsonp" or we have a parameter to set
    if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

        // Get callback name, remembering preexisting value associated with it
        callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
            s.jsonpCallback() :
            s.jsonpCallback;

        // Insert callback into url or form data
        if ( jsonProp ) {
            s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
        } else if ( s.jsonp !== false ) {
            s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
        }

        // Use data converter to retrieve json after script execution
        s.converters["script json"] = function() {
            if ( !responseContainer ) {
                jQuery.error( callbackName + " was not called" );
            }
            return responseContainer[ 0 ];
        };

        // force json dataType
        s.dataTypes[ 0 ] = "json";

        // Install callback
        overwritten = window[ callbackName ];
        window[ callbackName ] = function() {
            responseContainer = arguments;
        };

        // Clean-up function (fires after converters)
        jqXHR.always(function() {
            // Restore preexisting value
            window[ callbackName ] = overwritten;

            // Save back as free
            if ( s[ callbackName ] ) {
                // make sure that re-using the options doesn't screw things around
                s.jsonpCallback = originalSettings.jsonpCallback;

                // save the callback name for future use
                oldCallbacks.push( callbackName );
            }

            // Call if it was a function and we have a response
            if ( responseContainer && jQuery.isFunction( overwritten ) ) {
                overwritten( responseContainer[ 0 ] );
            }

            responseContainer = overwritten = undefined;
        });

        // Delegate to script
        return "script";
    }
});




// data: string of html
// context (optional): If specified, the fragment will be created in this context, defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
    if ( !data || typeof data !== "string" ) {
        return null;
    }
    if ( typeof context === "boolean" ) {
        keepScripts = context;
        context = false;
    }
    context = context || document;

    var parsed = rsingleTag.exec( data ),
        scripts = !keepScripts && [];

    // Single tag
    if ( parsed ) {
        return [ context.createElement( parsed[1] ) ];
    }

    parsed = jQuery.buildFragment( [ data ], context, scripts );

    if ( scripts && scripts.length ) {
        jQuery( scripts ).remove();
    }

    return jQuery.merge( [], parsed.childNodes );
};


// Keep a copy of the old load method
var _load = jQuery.fn.load;

/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
    if ( typeof url !== "string" && _load ) {
        return _load.apply( this, arguments );
    }

    var selector, response, type,
        self = this,
        off = url.indexOf(" ");

    if ( off >= 0 ) {
        selector = jQuery.trim( url.slice( off, url.length ) );
        url = url.slice( 0, off );
    }

    // If it's a function
    if ( jQuery.isFunction( params ) ) {

        // We assume that it's the callback
        callback = params;
        params = undefined;

    // Otherwise, build a param string
    } else if ( params && typeof params === "object" ) {
        type = "POST";
    }

    // If we have elements to modify, make the request
    if ( self.length > 0 ) {
        jQuery.ajax({
            url: url,

            // if "type" variable is undefined, then "GET" method will be used
            type: type,
            dataType: "html",
            data: params
        }).done(function( responseText ) {

            // Save response for use in complete callback
            response = arguments;

            self.html( selector ?

                // If a selector was specified, locate the right elements in a dummy div
                // Exclude scripts to avoid IE 'Permission Denied' errors
                jQuery("<div>").append( jQuery.parseHTML( responseText ) ).find( selector ) :

                // Otherwise use the full result
                responseText );

        }).complete( callback && function( jqXHR, status ) {
            self.each( callback, response || [ jqXHR.responseText, status, jqXHR ] );
        });
    }

    return this;
};




// Attach a bunch of functions for handling common AJAX events
jQuery.each( [ "ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend" ], function( i, type ) {
    jQuery.fn[ type ] = function( fn ) {
        return this.on( type, fn );
    };
});




jQuery.expr.filters.animated = function( elem ) {
    return jQuery.grep(jQuery.timers, function( fn ) {
        return elem === fn.elem;
    }).length;
};





var docElem = window.document.documentElement;

/**
 * Gets a window from an element
 */
function getWindow( elem ) {
    return jQuery.isWindow( elem ) ?
        elem :
        elem.nodeType === 9 ?
            elem.defaultView || elem.parentWindow :
            false;
}

jQuery.offset = {
    setOffset: function( elem, options, i ) {
        var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
            position = jQuery.css( elem, "position" ),
            curElem = jQuery( elem ),
            props = {};

        // set position first, in-case top/left are set even on static elem
        if ( position === "static" ) {
            elem.style.position = "relative";
        }

        curOffset = curElem.offset();
        curCSSTop = jQuery.css( elem, "top" );
        curCSSLeft = jQuery.css( elem, "left" );
        calculatePosition = ( position === "absolute" || position === "fixed" ) &&
            jQuery.inArray("auto", [ curCSSTop, curCSSLeft ] ) > -1;

        // need to be able to calculate position if either top or left is auto and position is either absolute or fixed
        if ( calculatePosition ) {
            curPosition = curElem.position();
            curTop = curPosition.top;
            curLeft = curPosition.left;
        } else {
            curTop = parseFloat( curCSSTop ) || 0;
            curLeft = parseFloat( curCSSLeft ) || 0;
        }

        if ( jQuery.isFunction( options ) ) {
            options = options.call( elem, i, curOffset );
        }

        if ( options.top != null ) {
            props.top = ( options.top - curOffset.top ) + curTop;
        }
        if ( options.left != null ) {
            props.left = ( options.left - curOffset.left ) + curLeft;
        }

        if ( "using" in options ) {
            options.using.call( elem, props );
        } else {
            curElem.css( props );
        }
    }
};

jQuery.fn.extend({
    offset: function( options ) {
        if ( arguments.length ) {
            return options === undefined ?
                this :
                this.each(function( i ) {
                    jQuery.offset.setOffset( this, options, i );
                });
        }

        var docElem, win,
            box = { top: 0, left: 0 },
            elem = this[ 0 ],
            doc = elem && elem.ownerDocument;

        if ( !doc ) {
            return;
        }

        docElem = doc.documentElement;

        // Make sure it's not a disconnected DOM node
        if ( !jQuery.contains( docElem, elem ) ) {
            return box;
        }

        // If we don't have gBCR, just use 0,0 rather than error
        // BlackBerry 5, iOS 3 (original iPhone)
        if ( typeof elem.getBoundingClientRect !== strundefined ) {
            box = elem.getBoundingClientRect();
        }
        win = getWindow( doc );
        return {
            top: box.top  + ( win.pageYOffset || docElem.scrollTop )  - ( docElem.clientTop  || 0 ),
            left: box.left + ( win.pageXOffset || docElem.scrollLeft ) - ( docElem.clientLeft || 0 )
        };
    },

    position: function() {
        if ( !this[ 0 ] ) {
            return;
        }

        var offsetParent, offset,
            parentOffset = { top: 0, left: 0 },
            elem = this[ 0 ];

        // fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is its only offset parent
        if ( jQuery.css( elem, "position" ) === "fixed" ) {
            // we assume that getBoundingClientRect is available when computed position is fixed
            offset = elem.getBoundingClientRect();
        } else {
            // Get *real* offsetParent
            offsetParent = this.offsetParent();

            // Get correct offsets
            offset = this.offset();
            if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
                parentOffset = offsetParent.offset();
            }

            // Add offsetParent borders
            parentOffset.top  += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
            parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
        }

        // Subtract parent offsets and element margins
        // note: when an element has margin: auto the offsetLeft and marginLeft
        // are the same in Safari causing offset.left to incorrectly be 0
        return {
            top:  offset.top  - parentOffset.top - jQuery.css( elem, "marginTop", true ),
            left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true)
        };
    },

    offsetParent: function() {
        return this.map(function() {
            var offsetParent = this.offsetParent || docElem;

            while ( offsetParent && ( !jQuery.nodeName( offsetParent, "html" ) && jQuery.css( offsetParent, "position" ) === "static" ) ) {
                offsetParent = offsetParent.offsetParent;
            }
            return offsetParent || docElem;
        });
    }
});

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
    var top = /Y/.test( prop );

    jQuery.fn[ method ] = function( val ) {
        return access( this, function( elem, method, val ) {
            var win = getWindow( elem );

            if ( val === undefined ) {
                return win ? (prop in win) ? win[ prop ] :
                    win.document.documentElement[ method ] :
                    elem[ method ];
            }

            if ( win ) {
                win.scrollTo(
                    !top ? val : jQuery( win ).scrollLeft(),
                    top ? val : jQuery( win ).scrollTop()
                );

            } else {
                elem[ method ] = val;
            }
        }, method, val, arguments.length, null );
    };
});

// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// getComputedStyle returns percent when specified for top/left/bottom/right
// rather than make the css module depend on the offset module, we just check for it here
jQuery.each( [ "top", "left" ], function( i, prop ) {
    jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
        function( elem, computed ) {
            if ( computed ) {
                computed = curCSS( elem, prop );
                // if curCSS returns percentage, fallback to offset
                return rnumnonpx.test( computed ) ?
                    jQuery( elem ).position()[ prop ] + "px" :
                    computed;
            }
        }
    );
});


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
    jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name }, function( defaultExtra, funcName ) {
        // margin is only for outerHeight, outerWidth
        jQuery.fn[ funcName ] = function( margin, value ) {
            var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
                extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

            return access( this, function( elem, type, value ) {
                var doc;

                if ( jQuery.isWindow( elem ) ) {
                    // As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
                    // isn't a whole lot we can do. See pull request at this URL for discussion:
                    // https://github.com/jquery/jquery/pull/764
                    return elem.document.documentElement[ "client" + name ];
                }

                // Get document width or height
                if ( elem.nodeType === 9 ) {
                    doc = elem.documentElement;

                    // Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height], whichever is greatest
                    // unfortunately, this causes bug #3838 in IE6/8 only, but there is currently no good, small way to fix it.
                    return Math.max(
                        elem.body[ "scroll" + name ], doc[ "scroll" + name ],
                        elem.body[ "offset" + name ], doc[ "offset" + name ],
                        doc[ "client" + name ]
                    );
                }

                return value === undefined ?
                    // Get width or height on the element, requesting but not forcing parseFloat
                    jQuery.css( elem, type, extra ) :

                    // Set width or height on the element
                    jQuery.style( elem, type, value, extra );
            }, type, chainable ? margin : undefined, chainable, null );
        };
    });
});


// The number of elements contained in the matched element set
jQuery.fn.size = function() {
    return this.length;
};

jQuery.fn.andSelf = jQuery.fn.addBack;




// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( typeof define === "function" && define.amd ) {
    define( "jquery", [], function() {
        return jQuery;
    });
}




var
    // Map over jQuery in case of overwrite
    _jQuery = window.jQuery,

    // Map over the $ in case of overwrite
    _$ = window.$;

jQuery.noConflict = function( deep ) {
    if ( window.$ === jQuery ) {
        window.$ = _$;
    }

    if ( deep && window.jQuery === jQuery ) {
        window.jQuery = _jQuery;
    }

    return jQuery;
};

// Expose jQuery and $ identifiers, even in
// AMD (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( typeof noGlobal === strundefined ) {
    window.jQuery = window.$ = jQuery;
}




return jQuery;

}));

;
;
/* perfect-scrollbar v0.6.7 */
!function t(e,n,r){function o(l,s){if(!n[l]){if(!e[l]){var a="function"==typeof require&&require;if(!s&&a)return a(l,!0);if(i)return i(l,!0);var c=new Error("Cannot find module '"+l+"'");throw c.code="MODULE_NOT_FOUND",c}var u=n[l]={exports:{}};e[l][0].call(u.exports,function(t){var n=e[l][1][t];return o(n?n:t)},u,u.exports,t,e,n,r)}return n[l].exports}for(var i="function"==typeof require&&require,l=0;l<r.length;l++)o(r[l]);return o}({1:[function(t,e,n){"use strict";function r(t){t.fn.perfectScrollbar=function(e){return this.each(function(){if("object"==typeof e||"undefined"==typeof e){var n=e;i.get(this)||o.initialize(this,n)}else{var r=e;"update"===r?o.update(this):"destroy"===r&&o.destroy(this)}return t(this)})}}var o=t("../main"),i=t("../plugin/instances");if("function"==typeof define&&define.amd)define(["jquery"],r);else{var l=window.jQuery?window.jQuery:window.$;"undefined"!=typeof l&&r(l)}e.exports=r},{"../main":7,"../plugin/instances":18}],2:[function(t,e,n){"use strict";function r(t,e){var n=t.className.split(" ");n.indexOf(e)<0&&n.push(e),t.className=n.join(" ")}function o(t,e){var n=t.className.split(" "),r=n.indexOf(e);r>=0&&n.splice(r,1),t.className=n.join(" ")}n.add=function(t,e){t.classList?t.classList.add(e):r(t,e)},n.remove=function(t,e){t.classList?t.classList.remove(e):o(t,e)},n.list=function(t){return t.classList?Array.prototype.slice.apply(t.classList):t.className.split(" ")}},{}],3:[function(t,e,n){"use strict";function r(t,e){return window.getComputedStyle(t)[e]}function o(t,e,n){return"number"==typeof n&&(n=n.toString()+"px"),t.style[e]=n,t}function i(t,e){for(var n in e){var r=e[n];"number"==typeof r&&(r=r.toString()+"px"),t.style[n]=r}return t}var l={};l.e=function(t,e){var n=document.createElement(t);return n.className=e,n},l.appendTo=function(t,e){return e.appendChild(t),t},l.css=function(t,e,n){return"object"==typeof e?i(t,e):"undefined"==typeof n?r(t,e):o(t,e,n)},l.matches=function(t,e){return"undefined"!=typeof t.matches?t.matches(e):"undefined"!=typeof t.matchesSelector?t.matchesSelector(e):"undefined"!=typeof t.webkitMatchesSelector?t.webkitMatchesSelector(e):"undefined"!=typeof t.mozMatchesSelector?t.mozMatchesSelector(e):"undefined"!=typeof t.msMatchesSelector?t.msMatchesSelector(e):void 0},l.remove=function(t){"undefined"!=typeof t.remove?t.remove():t.parentNode&&t.parentNode.removeChild(t)},l.queryChildren=function(t,e){return Array.prototype.filter.call(t.childNodes,function(t){return l.matches(t,e)})},e.exports=l},{}],4:[function(t,e,n){"use strict";var r=function(t){this.element=t,this.events={}};r.prototype.bind=function(t,e){"undefined"==typeof this.events[t]&&(this.events[t]=[]),this.events[t].push(e),this.element.addEventListener(t,e,!1)},r.prototype.unbind=function(t,e){var n="undefined"!=typeof e;this.events[t]=this.events[t].filter(function(r){return n&&r!==e?!0:(this.element.removeEventListener(t,r,!1),!1)},this)},r.prototype.unbindAll=function(){for(var t in this.events)this.unbind(t)};var o=function(){this.eventElements=[]};o.prototype.eventElement=function(t){var e=this.eventElements.filter(function(e){return e.element===t})[0];return"undefined"==typeof e&&(e=new r(t),this.eventElements.push(e)),e},o.prototype.bind=function(t,e,n){this.eventElement(t).bind(e,n)},o.prototype.unbind=function(t,e,n){this.eventElement(t).unbind(e,n)},o.prototype.unbindAll=function(){for(var t=0;t<this.eventElements.length;t++)this.eventElements[t].unbindAll()},o.prototype.once=function(t,e,n){var r=this.eventElement(t),o=function(t){r.unbind(e,o),n(t)};r.bind(e,o)},e.exports=o},{}],5:[function(t,e,n){"use strict";e.exports=function(){function t(){return Math.floor(65536*(1+Math.random())).toString(16).substring(1)}return function(){return t()+t()+"-"+t()+"-"+t()+"-"+t()+"-"+t()+t()+t()}}()},{}],6:[function(t,e,n){"use strict";var r=t("./class"),o=t("./dom");n.toInt=function(t){return parseInt(t,10)||0},n.clone=function(t){if(null===t)return null;if("object"==typeof t){var e={};for(var n in t)e[n]=this.clone(t[n]);return e}return t},n.extend=function(t,e){var n=this.clone(t);for(var r in e)n[r]=this.clone(e[r]);return n},n.isEditable=function(t){return o.matches(t,"input,[contenteditable]")||o.matches(t,"select,[contenteditable]")||o.matches(t,"textarea,[contenteditable]")||o.matches(t,"button,[contenteditable]")},n.removePsClasses=function(t){for(var e=r.list(t),n=0;n<e.length;n++){var o=e[n];0===o.indexOf("ps-")&&r.remove(t,o)}},n.outerWidth=function(t){return this.toInt(o.css(t,"width"))+this.toInt(o.css(t,"paddingLeft"))+this.toInt(o.css(t,"paddingRight"))+this.toInt(o.css(t,"borderLeftWidth"))+this.toInt(o.css(t,"borderRightWidth"))},n.startScrolling=function(t,e){r.add(t,"ps-in-scrolling"),"undefined"!=typeof e?r.add(t,"ps-"+e):(r.add(t,"ps-x"),r.add(t,"ps-y"))},n.stopScrolling=function(t,e){r.remove(t,"ps-in-scrolling"),"undefined"!=typeof e?r.remove(t,"ps-"+e):(r.remove(t,"ps-x"),r.remove(t,"ps-y"))},n.env={isWebKit:"WebkitAppearance"in document.documentElement.style,supportsTouch:"ontouchstart"in window||window.DocumentTouch&&document instanceof window.DocumentTouch,supportsIePointer:null!==window.navigator.msMaxTouchPoints}},{"./class":2,"./dom":3}],7:[function(t,e,n){"use strict";var r=t("./plugin/destroy"),o=t("./plugin/initialize"),i=t("./plugin/update");e.exports={initialize:o,update:i,destroy:r}},{"./plugin/destroy":9,"./plugin/initialize":17,"./plugin/update":21}],8:[function(t,e,n){"use strict";e.exports={maxScrollbarLength:null,minScrollbarLength:null,scrollXMarginOffset:0,scrollYMarginOffset:0,stopPropagationOnClick:!0,suppressScrollX:!1,suppressScrollY:!1,swipePropagation:!0,useBothWheelAxes:!1,useKeyboard:!0,useSelectionScroll:!1,wheelPropagation:!1,wheelSpeed:1}},{}],9:[function(t,e,n){"use strict";var r=t("../lib/dom"),o=t("../lib/helper"),i=t("./instances");e.exports=function(t){var e=i.get(t);e&&(e.event.unbindAll(),r.remove(e.scrollbarX),r.remove(e.scrollbarY),r.remove(e.scrollbarXRail),r.remove(e.scrollbarYRail),o.removePsClasses(t),i.remove(t))}},{"../lib/dom":3,"../lib/helper":6,"./instances":18}],10:[function(t,e,n){"use strict";function r(t,e){function n(t){return t.getBoundingClientRect()}var r=window.Event.prototype.stopPropagation.bind;e.settings.stopPropagationOnClick&&e.event.bind(e.scrollbarY,"click",r),e.event.bind(e.scrollbarYRail,"click",function(r){var i=o.toInt(e.scrollbarYHeight/2),a=e.railYRatio*(r.pageY-window.scrollY-n(e.scrollbarYRail).top-i),c=e.railYRatio*(e.railYHeight-e.scrollbarYHeight),u=a/c;0>u?u=0:u>1&&(u=1),s(t,"top",(e.contentHeight-e.containerHeight)*u),l(t),r.stopPropagation()}),e.settings.stopPropagationOnClick&&e.event.bind(e.scrollbarX,"click",r),e.event.bind(e.scrollbarXRail,"click",function(r){var i=o.toInt(e.scrollbarXWidth/2),a=e.railXRatio*(r.pageX-window.scrollX-n(e.scrollbarXRail).left-i),c=e.railXRatio*(e.railXWidth-e.scrollbarXWidth),u=a/c;0>u?u=0:u>1&&(u=1),s(t,"left",(e.contentWidth-e.containerWidth)*u-e.negativeScrollAdjustment),l(t),r.stopPropagation()})}var o=t("../../lib/helper"),i=t("../instances"),l=t("../update-geometry"),s=t("../update-scroll");e.exports=function(t){var e=i.get(t);r(t,e)}},{"../../lib/helper":6,"../instances":18,"../update-geometry":19,"../update-scroll":20}],11:[function(t,e,n){"use strict";function r(t,e){function n(n){var o=r+n*e.railXRatio,i=e.scrollbarXRail.getBoundingClientRect().left+e.railXRatio*(e.railXWidth-e.scrollbarXWidth);0>o?e.scrollbarXLeft=0:o>i?e.scrollbarXLeft=i:e.scrollbarXLeft=o;var s=l.toInt(e.scrollbarXLeft*(e.contentWidth-e.containerWidth)/(e.containerWidth-e.railXRatio*e.scrollbarXWidth))-e.negativeScrollAdjustment;c(t,"left",s)}var r=null,o=null,s=function(e){n(e.pageX-o),a(t),e.stopPropagation(),e.preventDefault()},u=function(){l.stopScrolling(t,"x"),e.event.unbind(e.ownerDocument,"mousemove",s)};e.event.bind(e.scrollbarX,"mousedown",function(n){o=n.pageX,r=l.toInt(i.css(e.scrollbarX,"left"))*e.railXRatio,l.startScrolling(t,"x"),e.event.bind(e.ownerDocument,"mousemove",s),e.event.once(e.ownerDocument,"mouseup",u),n.stopPropagation(),n.preventDefault()})}function o(t,e){function n(n){var o=r+n*e.railYRatio,i=e.scrollbarYRail.getBoundingClientRect().top+e.railYRatio*(e.railYHeight-e.scrollbarYHeight);0>o?e.scrollbarYTop=0:o>i?e.scrollbarYTop=i:e.scrollbarYTop=o;var s=l.toInt(e.scrollbarYTop*(e.contentHeight-e.containerHeight)/(e.containerHeight-e.railYRatio*e.scrollbarYHeight));c(t,"top",s)}var r=null,o=null,s=function(e){n(e.pageY-o),a(t),e.stopPropagation(),e.preventDefault()},u=function(){l.stopScrolling(t,"y"),e.event.unbind(e.ownerDocument,"mousemove",s)};e.event.bind(e.scrollbarY,"mousedown",function(n){o=n.pageY,r=l.toInt(i.css(e.scrollbarY,"top"))*e.railYRatio,l.startScrolling(t,"y"),e.event.bind(e.ownerDocument,"mousemove",s),e.event.once(e.ownerDocument,"mouseup",u),n.stopPropagation(),n.preventDefault()})}var i=t("../../lib/dom"),l=t("../../lib/helper"),s=t("../instances"),a=t("../update-geometry"),c=t("../update-scroll");e.exports=function(t){var e=s.get(t);r(t,e),o(t,e)}},{"../../lib/dom":3,"../../lib/helper":6,"../instances":18,"../update-geometry":19,"../update-scroll":20}],12:[function(t,e,n){"use strict";function r(t,e){function n(n,r){var o=t.scrollTop;if(0===n){if(!e.scrollbarYActive)return!1;if(0===o&&r>0||o>=e.contentHeight-e.containerHeight&&0>r)return!e.settings.wheelPropagation}var i=t.scrollLeft;if(0===r){if(!e.scrollbarXActive)return!1;if(0===i&&0>n||i>=e.contentWidth-e.containerWidth&&n>0)return!e.settings.wheelPropagation}return!0}var r=!1;e.event.bind(t,"mouseenter",function(){r=!0}),e.event.bind(t,"mouseleave",function(){r=!1});var i=!1;e.event.bind(e.ownerDocument,"keydown",function(a){if((!a.isDefaultPrevented||!a.isDefaultPrevented())&&r){var c=document.activeElement?document.activeElement:e.ownerDocument.activeElement;if(c){for(;c.shadowRoot;)c=c.shadowRoot.activeElement;if(o.isEditable(c))return}var u=0,d=0;switch(a.which){case 37:u=-30;break;case 38:d=30;break;case 39:u=30;break;case 40:d=-30;break;case 33:d=90;break;case 32:d=a.shiftKey?90:-90;break;case 34:d=-90;break;case 35:d=a.ctrlKey?-e.contentHeight:-e.containerHeight;break;case 36:d=a.ctrlKey?t.scrollTop:e.containerHeight;break;default:return}s(t,"top",t.scrollTop-d),s(t,"left",t.scrollLeft+u),l(t),i=n(u,d),i&&a.preventDefault()}})}var o=t("../../lib/helper"),i=t("../instances"),l=t("../update-geometry"),s=t("../update-scroll");e.exports=function(t){var e=i.get(t);r(t,e)}},{"../../lib/helper":6,"../instances":18,"../update-geometry":19,"../update-scroll":20}],13:[function(t,e,n){"use strict";function r(t,e){function n(n,r){var o=t.scrollTop;if(0===n){if(!e.scrollbarYActive)return!1;if(0===o&&r>0||o>=e.contentHeight-e.containerHeight&&0>r)return!e.settings.wheelPropagation}var i=t.scrollLeft;if(0===r){if(!e.scrollbarXActive)return!1;if(0===i&&0>n||i>=e.contentWidth-e.containerWidth&&n>0)return!e.settings.wheelPropagation}return!0}function r(t){var e=t.deltaX,n=-1*t.deltaY;return("undefined"==typeof e||"undefined"==typeof n)&&(e=-1*t.wheelDeltaX/6,n=t.wheelDeltaY/6),t.deltaMode&&1===t.deltaMode&&(e*=10,n*=10),e!==e&&n!==n&&(e=0,n=t.wheelDelta),[e,n]}function i(e,n){var r=t.querySelector("textarea:hover");if(r){var o=r.scrollHeight-r.clientHeight;if(o>0&&!(0===r.scrollTop&&n>0||r.scrollTop===o&&0>n))return!0;var i=r.scrollLeft-r.clientWidth;if(i>0&&!(0===r.scrollLeft&&0>e||r.scrollLeft===i&&e>0))return!0}return!1}function a(a){if(o.env.isWebKit||!t.querySelector("select:focus")){var u=r(a),d=u[0],p=u[1];i(d,p)||(c=!1,e.settings.useBothWheelAxes?e.scrollbarYActive&&!e.scrollbarXActive?(p?s(t,"top",t.scrollTop-p*e.settings.wheelSpeed):s(t,"top",t.scrollTop+d*e.settings.wheelSpeed),c=!0):e.scrollbarXActive&&!e.scrollbarYActive&&(d?s(t,"left",t.scrollLeft+d*e.settings.wheelSpeed):s(t,"left",t.scrollLeft-p*e.settings.wheelSpeed),c=!0):(s(t,"top",t.scrollTop-p*e.settings.wheelSpeed),s(t,"left",t.scrollLeft+d*e.settings.wheelSpeed)),l(t),c=c||n(d,p),c&&(a.stopPropagation(),a.preventDefault()))}}var c=!1;"undefined"!=typeof window.onwheel?e.event.bind(t,"wheel",a):"undefined"!=typeof window.onmousewheel&&e.event.bind(t,"mousewheel",a)}var o=t("../../lib/helper"),i=t("../instances"),l=t("../update-geometry"),s=t("../update-scroll");e.exports=function(t){var e=i.get(t);r(t,e)}},{"../../lib/helper":6,"../instances":18,"../update-geometry":19,"../update-scroll":20}],14:[function(t,e,n){"use strict";function r(t,e){e.event.bind(t,"scroll",function(){i(t)})}var o=t("../instances"),i=t("../update-geometry");e.exports=function(t){var e=o.get(t);r(t,e)}},{"../instances":18,"../update-geometry":19}],15:[function(t,e,n){"use strict";function r(t,e){function n(){var t=window.getSelection?window.getSelection():document.getSelection?document.getSelection():"";return 0===t.toString().length?null:t.getRangeAt(0).commonAncestorContainer}function r(){c||(c=setInterval(function(){return i.get(t)?(s(t,"top",t.scrollTop+u.top),s(t,"left",t.scrollLeft+u.left),void l(t)):void clearInterval(c)},50))}function a(){c&&(clearInterval(c),c=null),o.stopScrolling(t)}var c=null,u={top:0,left:0},d=!1;e.event.bind(e.ownerDocument,"selectionchange",function(){t.contains(n())?d=!0:(d=!1,a())}),e.event.bind(window,"mouseup",function(){d&&(d=!1,a())}),e.event.bind(window,"mousemove",function(e){if(d){var n={x:e.pageX,y:e.pageY},i={left:t.offsetLeft,right:t.offsetLeft+t.offsetWidth,top:t.offsetTop,bottom:t.offsetTop+t.offsetHeight};n.x<i.left+3?(u.left=-5,o.startScrolling(t,"x")):n.x>i.right-3?(u.left=5,o.startScrolling(t,"x")):u.left=0,n.y<i.top+3?(i.top+3-n.y<5?u.top=-5:u.top=-20,o.startScrolling(t,"y")):n.y>i.bottom-3?(n.y-i.bottom+3<5?u.top=5:u.top=20,o.startScrolling(t,"y")):u.top=0,0===u.top&&0===u.left?a():r()}})}var o=t("../../lib/helper"),i=t("../instances"),l=t("../update-geometry"),s=t("../update-scroll");e.exports=function(t){var e=i.get(t);r(t,e)}},{"../../lib/helper":6,"../instances":18,"../update-geometry":19,"../update-scroll":20}],16:[function(t,e,n){"use strict";function r(t,e,n,r){function s(n,r){var o=t.scrollTop,i=t.scrollLeft,l=Math.abs(n),s=Math.abs(r);if(s>l){if(0>r&&o===e.contentHeight-e.containerHeight||r>0&&0===o)return!e.settings.swipePropagation}else if(l>s&&(0>n&&i===e.contentWidth-e.containerWidth||n>0&&0===i))return!e.settings.swipePropagation;return!0}function a(e,n){l(t,"top",t.scrollTop-n),l(t,"left",t.scrollLeft-e),i(t)}function c(){Y=!0}function u(){Y=!1}function d(t){return t.targetTouches?t.targetTouches[0]:t}function p(t){return t.targetTouches&&1===t.targetTouches.length?!0:t.pointerType&&"mouse"!==t.pointerType&&t.pointerType!==t.MSPOINTER_TYPE_MOUSE?!0:!1}function f(t){if(p(t)){w=!0;var e=d(t);b.pageX=e.pageX,b.pageY=e.pageY,g=(new Date).getTime(),null!==y&&clearInterval(y),t.stopPropagation()}}function h(t){if(!Y&&w&&p(t)){var e=d(t),n={pageX:e.pageX,pageY:e.pageY},r=n.pageX-b.pageX,o=n.pageY-b.pageY;a(r,o),b=n;var i=(new Date).getTime(),l=i-g;l>0&&(m.x=r/l,m.y=o/l,g=i),s(r,o)&&(t.stopPropagation(),t.preventDefault())}}function v(){!Y&&w&&(w=!1,clearInterval(y),y=setInterval(function(){return o.get(t)?Math.abs(m.x)<.01&&Math.abs(m.y)<.01?void clearInterval(y):(a(30*m.x,30*m.y),m.x*=.8,void(m.y*=.8)):void clearInterval(y)},10))}var b={},g=0,m={},y=null,Y=!1,w=!1;n&&(e.event.bind(window,"touchstart",c),e.event.bind(window,"touchend",u),e.event.bind(t,"touchstart",f),e.event.bind(t,"touchmove",h),e.event.bind(t,"touchend",v)),r&&(window.PointerEvent?(e.event.bind(window,"pointerdown",c),e.event.bind(window,"pointerup",u),e.event.bind(t,"pointerdown",f),e.event.bind(t,"pointermove",h),e.event.bind(t,"pointerup",v)):window.MSPointerEvent&&(e.event.bind(window,"MSPointerDown",c),e.event.bind(window,"MSPointerUp",u),e.event.bind(t,"MSPointerDown",f),e.event.bind(t,"MSPointerMove",h),e.event.bind(t,"MSPointerUp",v)))}var o=t("../instances"),i=t("../update-geometry"),l=t("../update-scroll");e.exports=function(t,e,n){var i=o.get(t);r(t,i,e,n)}},{"../instances":18,"../update-geometry":19,"../update-scroll":20}],17:[function(t,e,n){"use strict";var r=t("../lib/class"),o=t("../lib/helper"),i=t("./instances"),l=t("./update-geometry"),s=t("./handler/click-rail"),a=t("./handler/drag-scrollbar"),c=t("./handler/keyboard"),u=t("./handler/mouse-wheel"),d=t("./handler/native-scroll"),p=t("./handler/selection"),f=t("./handler/touch");e.exports=function(t,e){e="object"==typeof e?e:{},r.add(t,"ps-container");var n=i.add(t);n.settings=o.extend(n.settings,e),s(t),a(t),u(t),d(t),n.settings.useSelectionScroll&&p(t),(o.env.supportsTouch||o.env.supportsIePointer)&&f(t,o.env.supportsTouch,o.env.supportsIePointer),n.settings.useKeyboard&&c(t),l(t)}},{"../lib/class":2,"../lib/helper":6,"./handler/click-rail":10,"./handler/drag-scrollbar":11,"./handler/keyboard":12,"./handler/mouse-wheel":13,"./handler/native-scroll":14,"./handler/selection":15,"./handler/touch":16,"./instances":18,"./update-geometry":19}],18:[function(t,e,n){"use strict";function r(t){var e=this;e.settings=d.clone(a),e.containerWidth=null,e.containerHeight=null,e.contentWidth=null,e.contentHeight=null,e.isRtl="rtl"===s.css(t,"direction"),e.isNegativeScroll=function(){var e=t.scrollLeft,n=null;return t.scrollLeft=-1,n=t.scrollLeft<0,t.scrollLeft=e,n}(),e.negativeScrollAdjustment=e.isNegativeScroll?t.scrollWidth-t.clientWidth:0,e.event=new c,e.ownerDocument=t.ownerDocument||document,e.scrollbarXRail=s.appendTo(s.e("div","ps-scrollbar-x-rail"),t),e.scrollbarX=s.appendTo(s.e("div","ps-scrollbar-x"),e.scrollbarXRail),e.scrollbarXActive=null,e.scrollbarXWidth=null,e.scrollbarXLeft=null,e.scrollbarXBottom=d.toInt(s.css(e.scrollbarXRail,"bottom")),e.isScrollbarXUsingBottom=e.scrollbarXBottom===e.scrollbarXBottom,e.scrollbarXTop=e.isScrollbarXUsingBottom?null:d.toInt(s.css(e.scrollbarXRail,"top")),e.railBorderXWidth=d.toInt(s.css(e.scrollbarXRail,"borderLeftWidth"))+d.toInt(s.css(e.scrollbarXRail,"borderRightWidth")),s.css(e.scrollbarXRail,"display","block"),e.railXMarginWidth=d.toInt(s.css(e.scrollbarXRail,"marginLeft"))+d.toInt(s.css(e.scrollbarXRail,"marginRight")),s.css(e.scrollbarXRail,"display",""),e.railXWidth=null,e.railXRatio=null,e.scrollbarYRail=s.appendTo(s.e("div","ps-scrollbar-y-rail"),t),e.scrollbarY=s.appendTo(s.e("div","ps-scrollbar-y"),e.scrollbarYRail),e.scrollbarYActive=null,e.scrollbarYHeight=null,e.scrollbarYTop=null,e.scrollbarYRight=d.toInt(s.css(e.scrollbarYRail,"right")),e.isScrollbarYUsingRight=e.scrollbarYRight===e.scrollbarYRight,e.scrollbarYLeft=e.isScrollbarYUsingRight?null:d.toInt(s.css(e.scrollbarYRail,"left")),e.scrollbarYOuterWidth=e.isRtl?d.outerWidth(e.scrollbarY):null,e.railBorderYWidth=d.toInt(s.css(e.scrollbarYRail,"borderTopWidth"))+d.toInt(s.css(e.scrollbarYRail,"borderBottomWidth")),s.css(e.scrollbarYRail,"display","block"),e.railYMarginHeight=d.toInt(s.css(e.scrollbarYRail,"marginTop"))+d.toInt(s.css(e.scrollbarYRail,"marginBottom")),s.css(e.scrollbarYRail,"display",""),e.railYHeight=null,e.railYRatio=null}function o(t){return"undefined"==typeof t.dataset?t.getAttribute("data-ps-id"):t.dataset.psId}function i(t,e){"undefined"==typeof t.dataset?t.setAttribute("data-ps-id",e):t.dataset.psId=e}function l(t){"undefined"==typeof t.dataset?t.removeAttribute("data-ps-id"):delete t.dataset.psId}var s=t("../lib/dom"),a=t("./default-setting"),c=t("../lib/event-manager"),u=t("../lib/guid"),d=t("../lib/helper"),p={};n.add=function(t){var e=u();return i(t,e),p[e]=new r(t),p[e]},n.remove=function(t){delete p[o(t)],l(t)},n.get=function(t){return p[o(t)]}},{"../lib/dom":3,"../lib/event-manager":4,"../lib/guid":5,"../lib/helper":6,"./default-setting":8}],19:[function(t,e,n){"use strict";function r(t,e){return t.settings.minScrollbarLength&&(e=Math.max(e,t.settings.minScrollbarLength)),t.settings.maxScrollbarLength&&(e=Math.min(e,t.settings.maxScrollbarLength)),e}function o(t,e){var n={width:e.railXWidth};e.isRtl?n.left=e.negativeScrollAdjustment+t.scrollLeft+e.containerWidth-e.contentWidth:n.left=t.scrollLeft,e.isScrollbarXUsingBottom?n.bottom=e.scrollbarXBottom-t.scrollTop:n.top=e.scrollbarXTop+t.scrollTop,l.css(e.scrollbarXRail,n);var r={top:t.scrollTop,height:e.railYHeight};e.isScrollbarYUsingRight?e.isRtl?r.right=e.contentWidth-(e.negativeScrollAdjustment+t.scrollLeft)-e.scrollbarYRight-e.scrollbarYOuterWidth:r.right=e.scrollbarYRight-t.scrollLeft:e.isRtl?r.left=e.negativeScrollAdjustment+t.scrollLeft+2*e.containerWidth-e.contentWidth-e.scrollbarYLeft-e.scrollbarYOuterWidth:r.left=e.scrollbarYLeft+t.scrollLeft,l.css(e.scrollbarYRail,r),l.css(e.scrollbarX,{left:e.scrollbarXLeft,width:e.scrollbarXWidth-e.railBorderXWidth}),l.css(e.scrollbarY,{top:e.scrollbarYTop,height:e.scrollbarYHeight-e.railBorderYWidth})}var i=t("../lib/class"),l=t("../lib/dom"),s=t("../lib/helper"),a=t("./instances"),c=t("./update-scroll");e.exports=function(t){var e=a.get(t);e.containerWidth=t.clientWidth,e.containerHeight=t.clientHeight,e.contentWidth=t.scrollWidth,e.contentHeight=t.scrollHeight;var n;t.contains(e.scrollbarXRail)||(n=l.queryChildren(t,".ps-scrollbar-x-rail"),n.length>0&&n.forEach(function(t){l.remove(t)}),l.appendTo(e.scrollbarXRail,t)),t.contains(e.scrollbarYRail)||(n=l.queryChildren(t,".ps-scrollbar-y-rail"),n.length>0&&n.forEach(function(t){l.remove(t)}),l.appendTo(e.scrollbarYRail,t)),!e.settings.suppressScrollX&&e.containerWidth+e.settings.scrollXMarginOffset<e.contentWidth?(e.scrollbarXActive=!0,e.railXWidth=e.containerWidth-e.railXMarginWidth,e.railXRatio=e.containerWidth/e.railXWidth,e.scrollbarXWidth=r(e,s.toInt(e.railXWidth*e.containerWidth/e.contentWidth)),e.scrollbarXLeft=s.toInt((e.negativeScrollAdjustment+t.scrollLeft)*(e.railXWidth-e.scrollbarXWidth)/(e.contentWidth-e.containerWidth))):(e.scrollbarXActive=!1,e.scrollbarXWidth=0,e.scrollbarXLeft=0,t.scrollLeft=0),!e.settings.suppressScrollY&&e.containerHeight+e.settings.scrollYMarginOffset<e.contentHeight?(e.scrollbarYActive=!0,e.railYHeight=e.containerHeight-e.railYMarginHeight,e.railYRatio=e.containerHeight/e.railYHeight,e.scrollbarYHeight=r(e,s.toInt(e.railYHeight*e.containerHeight/e.contentHeight)),e.scrollbarYTop=s.toInt(t.scrollTop*(e.railYHeight-e.scrollbarYHeight)/(e.contentHeight-e.containerHeight))):(e.scrollbarYActive=!1,e.scrollbarYHeight=0,e.scrollbarYTop=0,c(t,"top",0)),e.scrollbarXLeft>=e.railXWidth-e.scrollbarXWidth&&(e.scrollbarXLeft=e.railXWidth-e.scrollbarXWidth),e.scrollbarYTop>=e.railYHeight-e.scrollbarYHeight&&(e.scrollbarYTop=e.railYHeight-e.scrollbarYHeight),o(t,e),i[e.scrollbarXActive?"add":"remove"](t,"ps-active-x"),i[e.scrollbarYActive?"add":"remove"](t,"ps-active-y")}},{"../lib/class":2,"../lib/dom":3,"../lib/helper":6,"./instances":18,"./update-scroll":20}],20:[function(t,e,n){"use strict";var r,o,i=t("./instances"),l=document.createEvent("Event"),s=document.createEvent("Event"),a=document.createEvent("Event"),c=document.createEvent("Event"),u=document.createEvent("Event"),d=document.createEvent("Event"),p=document.createEvent("Event"),f=document.createEvent("Event"),h=document.createEvent("Event"),v=document.createEvent("Event");l.initEvent("ps-scroll-up",!0,!0),s.initEvent("ps-scroll-down",!0,!0),a.initEvent("ps-scroll-left",!0,!0),c.initEvent("ps-scroll-right",!0,!0),u.initEvent("ps-scroll-y",!0,!0),d.initEvent("ps-scroll-x",!0,!0),p.initEvent("ps-x-reach-start",!0,!0),f.initEvent("ps-x-reach-end",!0,!0),h.initEvent("ps-y-reach-start",!0,!0),v.initEvent("ps-y-reach-end",!0,!0),e.exports=function(t,e,n){if("undefined"==typeof t)throw"You must provide an element to the update-scroll function";if("undefined"==typeof e)throw"You must provide an axis to the update-scroll function";if("undefined"==typeof n)throw"You must provide a value to the update-scroll function";if("top"===e&&0>=n)return t.scrollTop=0,void t.dispatchEvent(h);if("left"===e&&0>=n)return t.scrollLeft=0,void t.dispatchEvent(p);var b=i.get(t);return"top"===e&&n>b.contentHeight-b.containerHeight?(t.scrollTop=b.contentHeight-b.containerHeight,void t.dispatchEvent(v)):"left"===e&&n>b.contentWidth-b.containerWidth?(t.scrollLeft=b.contentWidth-b.containerWidth,void t.dispatchEvent(f)):(r||(r=t.scrollTop),o||(o=t.scrollLeft),"top"===e&&r>n&&t.dispatchEvent(l),"top"===e&&n>r&&t.dispatchEvent(s),"left"===e&&o>n&&t.dispatchEvent(a),"left"===e&&n>o&&t.dispatchEvent(c),"top"===e&&(t.scrollTop=r=n,t.dispatchEvent(u)),void("left"===e&&(t.scrollLeft=o=n,t.dispatchEvent(d))))}},{"./instances":18}],21:[function(t,e,n){"use strict";var r=t("../lib/dom"),o=t("../lib/helper"),i=t("./instances"),l=t("./update-geometry");e.exports=function(t){var e=i.get(t);e&&(e.negativeScrollAdjustment=e.isNegativeScroll?t.scrollWidth-t.clientWidth:0,r.css(e.scrollbarXRail,"display","block"),r.css(e.scrollbarYRail,"display","block"),e.railXMarginWidth=o.toInt(r.css(e.scrollbarXRail,"marginLeft"))+o.toInt(r.css(e.scrollbarXRail,"marginRight")),e.railYMarginHeight=o.toInt(r.css(e.scrollbarYRail,"marginTop"))+o.toInt(r.css(e.scrollbarYRail,"marginBottom")),r.css(e.scrollbarXRail,"display","none"),r.css(e.scrollbarYRail,"display","none"),l(t),r.css(e.scrollbarXRail,"display",""),r.css(e.scrollbarYRail,"display",""))}},{"../lib/dom":3,"../lib/helper":6,"./instances":18,"./update-geometry":19}]},{},[1]);

;
;
/* @preserve
 * The MIT License (MIT)
 *
 * Copyright (c) 2013-2015 Petka Antonov
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 */
/**
 * bluebird build version 3.0.5
 * Features enabled: core, race, call_get, generators, map, nodeify, promisify, props, reduce, settle, some, using, timers, filter, any, each
*/
!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var f;"undefined"!=typeof window?f=window:"undefined"!=typeof global?f=global:"undefined"!=typeof self&&(f=self),f.Promise=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof _dereq_=="function"&&_dereq_;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof _dereq_=="function"&&_dereq_;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
"use strict";
module.exports = function(Promise) {
var SomePromiseArray = Promise._SomePromiseArray;
function any(promises) {
    var ret = new SomePromiseArray(promises);
    var promise = ret.promise();
    ret.setHowMany(1);
    ret.setUnwrap();
    ret.init();
    return promise;
}

Promise.any = function (promises) {
    return any(promises);
};

Promise.prototype.any = function () {
    return any(this);
};

};

},{}],2:[function(_dereq_,module,exports){
"use strict";
var firstLineError;
try {throw new Error(); } catch (e) {firstLineError = e;}
var schedule = _dereq_("./schedule");
var Queue = _dereq_("./queue");
var util = _dereq_("./util");

function Async() {
    this._isTickUsed = false;
    this._lateQueue = new Queue(16);
    this._normalQueue = new Queue(16);
    this._haveDrainedQueues = false;
    this._trampolineEnabled = true;
    var self = this;
    this.drainQueues = function () {
        self._drainQueues();
    };
    this._schedule =
        schedule.isStatic ? schedule(this.drainQueues) : schedule;
}

Async.prototype.disableTrampolineIfNecessary = function() {
    if (util.hasDevTools) {
        this._trampolineEnabled = false;
    }
};

Async.prototype.haveItemsQueued = function () {
    return this._isTickUsed || this._haveDrainedQueues;
};


Async.prototype.fatalError = function(e, isNode) {
    if (isNode) {
        process.stderr.write("Fatal " + (e instanceof Error ? e.stack : e));
        process.exit(2);
    } else {
        this.throwLater(e);
    }
};

Async.prototype.throwLater = function(fn, arg) {
    if (arguments.length === 1) {
        arg = fn;
        fn = function () { throw arg; };
    }
    if (typeof setTimeout !== "undefined") {
        setTimeout(function() {
            fn(arg);
        }, 0);
    } else try {
        this._schedule(function() {
            fn(arg);
        });
    } catch (e) {
        throw new Error("No async scheduler available\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
    }
};

function AsyncInvokeLater(fn, receiver, arg) {
    this._lateQueue.push(fn, receiver, arg);
    this._queueTick();
}

function AsyncInvoke(fn, receiver, arg) {
    this._normalQueue.push(fn, receiver, arg);
    this._queueTick();
}

function AsyncSettlePromises(promise) {
    this._normalQueue._pushOne(promise);
    this._queueTick();
}

if (!util.hasDevTools) {
    Async.prototype.invokeLater = AsyncInvokeLater;
    Async.prototype.invoke = AsyncInvoke;
    Async.prototype.settlePromises = AsyncSettlePromises;
} else {
    if (schedule.isStatic) {
        schedule = function(fn) { setTimeout(fn, 0); };
    }
    Async.prototype.invokeLater = function (fn, receiver, arg) {
        if (this._trampolineEnabled) {
            AsyncInvokeLater.call(this, fn, receiver, arg);
        } else {
            this._schedule(function() {
                setTimeout(function() {
                    fn.call(receiver, arg);
                }, 100);
            });
        }
    };

    Async.prototype.invoke = function (fn, receiver, arg) {
        if (this._trampolineEnabled) {
            AsyncInvoke.call(this, fn, receiver, arg);
        } else {
            this._schedule(function() {
                fn.call(receiver, arg);
            });
        }
    };

    Async.prototype.settlePromises = function(promise) {
        if (this._trampolineEnabled) {
            AsyncSettlePromises.call(this, promise);
        } else {
            this._schedule(function() {
                promise._settlePromises();
            });
        }
    };
}

Async.prototype.invokeFirst = function (fn, receiver, arg) {
    this._normalQueue.unshift(fn, receiver, arg);
    this._queueTick();
};

Async.prototype._drainQueue = function(queue) {
    while (queue.length() > 0) {
        var fn = queue.shift();
        if (typeof fn !== "function") {
            fn._settlePromises();
            continue;
        }
        var receiver = queue.shift();
        var arg = queue.shift();
        fn.call(receiver, arg);
    }
};

Async.prototype._drainQueues = function () {
    this._drainQueue(this._normalQueue);
    this._reset();
    this._haveDrainedQueues = true;
    this._drainQueue(this._lateQueue);
};

Async.prototype._queueTick = function () {
    if (!this._isTickUsed) {
        this._isTickUsed = true;
        this._schedule(this.drainQueues);
    }
};

Async.prototype._reset = function () {
    this._isTickUsed = false;
};

module.exports = Async;
module.exports.firstLineError = firstLineError;

},{"./queue":26,"./schedule":29,"./util":36}],3:[function(_dereq_,module,exports){
"use strict";
module.exports = function(Promise, INTERNAL, tryConvertToPromise, debug) {
var calledBind = false;
var rejectThis = function(_, e) {
    this._reject(e);
};

var targetRejected = function(e, context) {
    context.promiseRejectionQueued = true;
    context.bindingPromise._then(rejectThis, rejectThis, null, this, e);
};

var bindingResolved = function(thisArg, context) {
    if (((this._bitField & 50397184) === 0)) {
        this._resolveCallback(context.target);
    }
};

var bindingRejected = function(e, context) {
    if (!context.promiseRejectionQueued) this._reject(e);
};

Promise.prototype.bind = function (thisArg) {
    if (!calledBind) {
        calledBind = true;
        Promise.prototype._propagateFrom = debug.propagateFromFunction();
        Promise.prototype._boundValue = debug.boundValueFunction();
    }
    var maybePromise = tryConvertToPromise(thisArg);
    var ret = new Promise(INTERNAL);
    ret._propagateFrom(this, 1);
    var target = this._target();
    ret._setBoundTo(maybePromise);
    if (maybePromise instanceof Promise) {
        var context = {
            promiseRejectionQueued: false,
            promise: ret,
            target: target,
            bindingPromise: maybePromise
        };
        target._then(INTERNAL, targetRejected, undefined, ret, context);
        maybePromise._then(
            bindingResolved, bindingRejected, undefined, ret, context);
        ret._setOnCancel(maybePromise);
    } else {
        ret._resolveCallback(target);
    }
    return ret;
};

Promise.prototype._setBoundTo = function (obj) {
    if (obj !== undefined) {
        this._bitField = this._bitField | 2097152;
        this._boundTo = obj;
    } else {
        this._bitField = this._bitField & (~2097152);
    }
};

Promise.prototype._isBound = function () {
    return (this._bitField & 2097152) === 2097152;
};

Promise.bind = function (thisArg, value) {
    return Promise.resolve(value).bind(thisArg);
};
};

},{}],4:[function(_dereq_,module,exports){
"use strict";
var old;
if (typeof Promise !== "undefined") old = Promise;
function noConflict() {
    try { if (Promise === bluebird) Promise = old; }
    catch (e) {}
    return bluebird;
}
var bluebird = _dereq_("./promise")();
bluebird.noConflict = noConflict;
module.exports = bluebird;

},{"./promise":22}],5:[function(_dereq_,module,exports){
"use strict";
var cr = Object.create;
if (cr) {
    var callerCache = cr(null);
    var getterCache = cr(null);
    callerCache[" size"] = getterCache[" size"] = 0;
}

module.exports = function(Promise) {
var util = _dereq_("./util");
var canEvaluate = util.canEvaluate;
var isIdentifier = util.isIdentifier;

var getMethodCaller;
var getGetter;
if (!true) {
var makeMethodCaller = function (methodName) {
    return new Function("ensureMethod", "                                    \n\
        return function(obj) {                                               \n\
            'use strict'                                                     \n\
            var len = this.length;                                           \n\
            ensureMethod(obj, 'methodName');                                 \n\
            switch(len) {                                                    \n\
                case 1: return obj.methodName(this[0]);                      \n\
                case 2: return obj.methodName(this[0], this[1]);             \n\
                case 3: return obj.methodName(this[0], this[1], this[2]);    \n\
                case 0: return obj.methodName();                             \n\
                default:                                                     \n\
                    return obj.methodName.apply(obj, this);                  \n\
            }                                                                \n\
        };                                                                   \n\
        ".replace(/methodName/g, methodName))(ensureMethod);
};

var makeGetter = function (propertyName) {
    return new Function("obj", "                                             \n\
        'use strict';                                                        \n\
        return obj.propertyName;                                             \n\
        ".replace("propertyName", propertyName));
};

var getCompiled = function(name, compiler, cache) {
    var ret = cache[name];
    if (typeof ret !== "function") {
        if (!isIdentifier(name)) {
            return null;
        }
        ret = compiler(name);
        cache[name] = ret;
        cache[" size"]++;
        if (cache[" size"] > 512) {
            var keys = Object.keys(cache);
            for (var i = 0; i < 256; ++i) delete cache[keys[i]];
            cache[" size"] = keys.length - 256;
        }
    }
    return ret;
};

getMethodCaller = function(name) {
    return getCompiled(name, makeMethodCaller, callerCache);
};

getGetter = function(name) {
    return getCompiled(name, makeGetter, getterCache);
};
}

function ensureMethod(obj, methodName) {
    var fn;
    if (obj != null) fn = obj[methodName];
    if (typeof fn !== "function") {
        var message = "Object " + util.classString(obj) + " has no method '" +
            util.toString(methodName) + "'";
        throw new Promise.TypeError(message);
    }
    return fn;
}

function caller(obj) {
    var methodName = this.pop();
    var fn = ensureMethod(obj, methodName);
    return fn.apply(obj, this);
}
Promise.prototype.call = function (methodName) {
    var args = [].slice.call(arguments, 1);;
    if (!true) {
        if (canEvaluate) {
            var maybeCaller = getMethodCaller(methodName);
            if (maybeCaller !== null) {
                return this._then(
                    maybeCaller, undefined, undefined, args, undefined);
            }
        }
    }
    args.push(methodName);
    return this._then(caller, undefined, undefined, args, undefined);
};

function namedGetter(obj) {
    return obj[this];
}
function indexedGetter(obj) {
    var index = +this;
    if (index < 0) index = Math.max(0, index + obj.length);
    return obj[index];
}
Promise.prototype.get = function (propertyName) {
    var isIndex = (typeof propertyName === "number");
    var getter;
    if (!isIndex) {
        if (canEvaluate) {
            var maybeGetter = getGetter(propertyName);
            getter = maybeGetter !== null ? maybeGetter : namedGetter;
        } else {
            getter = namedGetter;
        }
    } else {
        getter = indexedGetter;
    }
    return this._then(getter, undefined, undefined, propertyName, undefined);
};
};

},{"./util":36}],6:[function(_dereq_,module,exports){
"use strict";
module.exports = function(Promise, PromiseArray, apiRejection, debug) {
var util = _dereq_("./util");
var tryCatch = util.tryCatch;
var errorObj = util.errorObj;
var async = Promise._async;

Promise.prototype["break"] = Promise.prototype.cancel = function() {
    if (!debug.cancellation()) return this._warn("cancellation is disabled");

    var promise = this;
    var child = promise;
    while (promise.isCancellable()) {
        if (!promise._cancelBy(child)) {
            if (child._isFollowing()) {
                child._followee().cancel();
            } else {
                child._cancelBranched();
            }
            break;
        }

        var parent = promise._cancellationParent;
        if (parent == null || !parent.isCancellable()) {
            if (promise._isFollowing()) {
                promise._followee().cancel();
            } else {
                promise._cancelBranched();
            }
            break;
        } else {
            if (promise._isFollowing()) promise._followee().cancel();
            child = promise;
            promise = parent;
        }
    }
};

Promise.prototype._branchHasCancelled = function() {
    this._branchesRemainingToCancel--;
};

Promise.prototype._enoughBranchesHaveCancelled = function() {
    return this._branchesRemainingToCancel === undefined ||
           this._branchesRemainingToCancel <= 0;
};

Promise.prototype._cancelBy = function(canceller) {
    if (canceller === this) {
        this._branchesRemainingToCancel = 0;
        this._invokeOnCancel();
        return true;
    } else {
        this._branchHasCancelled();
        if (this._enoughBranchesHaveCancelled()) {
            this._invokeOnCancel();
            return true;
        }
    }
    return false;
};

Promise.prototype._cancelBranched = function() {
    if (this._enoughBranchesHaveCancelled()) {
        this._cancel();
    }
};

Promise.prototype._cancel = function() {
    if (!this.isCancellable()) return;

    this._setCancelled();
    async.invoke(this._cancelPromises, this, undefined);
};

Promise.prototype._cancelPromises = function() {
    if (this._length() > 0) this._settlePromises();
};

Promise.prototype._unsetOnCancel = function() {
    this._onCancelField = undefined;
};

Promise.prototype.isCancellable = function() {
    return this.isPending() && !this.isCancelled();
};

Promise.prototype._doInvokeOnCancel = function(onCancelCallback, internalOnly) {
    if (util.isArray(onCancelCallback)) {
        for (var i = 0; i < onCancelCallback.length; ++i) {
            this._doInvokeOnCancel(onCancelCallback[i], internalOnly);
        }
    } else if (onCancelCallback !== undefined) {
        if (typeof onCancelCallback === "function") {
            if (!internalOnly) {
                var e = tryCatch(onCancelCallback).call(this._boundValue());
                if (e === errorObj) {
                    this._attachExtraTrace(e.e);
                    async.throwLater(e.e);
                }
            }
        } else {
            onCancelCallback._resultCancelled(this);
        }
    }
};

Promise.prototype._invokeOnCancel = function() {
    var onCancelCallback = this._onCancel();
    this._unsetOnCancel();
    async.invoke(this._doInvokeOnCancel, this, onCancelCallback);
};

Promise.prototype._invokeInternalOnCancel = function() {
    if (this.isCancellable()) {
        this._doInvokeOnCancel(this._onCancel(), true);
        this._unsetOnCancel();
    }
};

Promise.prototype._resultCancelled = function() {
    this.cancel();
};

};

},{"./util":36}],7:[function(_dereq_,module,exports){
"use strict";
module.exports = function(NEXT_FILTER) {
var util = _dereq_("./util");
var getKeys = _dereq_("./es5").keys;
var tryCatch = util.tryCatch;
var errorObj = util.errorObj;

function catchFilter(instances, cb, promise) {
    return function(e) {
        var boundTo = promise._boundValue();
        predicateLoop: for (var i = 0; i < instances.length; ++i) {
            var item = instances[i];

            if (item === Error ||
                (item != null && item.prototype instanceof Error)) {
                if (e instanceof item) {
                    return tryCatch(cb).call(boundTo, e);
                }
            } else if (typeof item === "function") {
                var matchesPredicate = tryCatch(item).call(boundTo, e);
                if (matchesPredicate === errorObj) {
                    return matchesPredicate;
                } else if (matchesPredicate) {
                    return tryCatch(cb).call(boundTo, e);
                }
            } else if (util.isObject(e)) {
                var keys = getKeys(item);
                for (var j = 0; j < keys.length; ++j) {
                    var key = keys[j];
                    if (item[key] != e[key]) {
                        continue predicateLoop;
                    }
                }
                return tryCatch(cb).call(boundTo, e);
            }
        }
        return NEXT_FILTER;
    };
}

return catchFilter;
};

},{"./es5":13,"./util":36}],8:[function(_dereq_,module,exports){
"use strict";
module.exports = function(Promise) {
var longStackTraces = false;
var contextStack = [];

Promise.prototype._promiseCreated = function() {};
Promise.prototype._pushContext = function() {};
Promise.prototype._popContext = function() {return null;};
Promise._peekContext = Promise.prototype._peekContext = function() {};

function Context() {
    this._trace = new Context.CapturedTrace(peekContext());
}
Context.prototype._pushContext = function () {
    if (this._trace !== undefined) {
        this._trace._promiseCreated = null;
        contextStack.push(this._trace);
    }
};

Context.prototype._popContext = function () {
    if (this._trace !== undefined) {
        var trace = contextStack.pop();
        var ret = trace._promiseCreated;
        trace._promiseCreated = null;
        return ret;
    }
    return null;
};

function createContext() {
    if (longStackTraces) return new Context();
}

function peekContext() {
    var lastIndex = contextStack.length - 1;
    if (lastIndex >= 0) {
        return contextStack[lastIndex];
    }
    return undefined;
}
Context.CapturedTrace = null;
Context.create = createContext;
Context.activateLongStackTraces = function() {
    longStackTraces = true;
    Promise.prototype._pushContext = Context.prototype._pushContext;
    Promise.prototype._popContext = Context.prototype._popContext;
    Promise._peekContext = Promise.prototype._peekContext = peekContext;
    Promise.prototype._promiseCreated = function() {
        var ctx = this._peekContext();
        if (ctx && ctx._promiseCreated == null) ctx._promiseCreated = this;
    };
};
return Context;
};

},{}],9:[function(_dereq_,module,exports){
"use strict";
module.exports = function(Promise, Context) {
var getDomain = Promise._getDomain;
var async = Promise._async;
var Warning = _dereq_("./errors").Warning;
var util = _dereq_("./util");
var canAttachTrace = util.canAttachTrace;
var unhandledRejectionHandled;
var possiblyUnhandledRejection;
var bluebirdFramePattern =
    /[\\\/]bluebird[\\\/]js[\\\/](release|debug|instrumented)/;
var stackFramePattern = null;
var formatStack = null;
var indentStackFrames = false;
var printWarning;
var debugging = !!(util.env("BLUEBIRD_DEBUG") != 0 &&
                        (true ||
                         util.env("BLUEBIRD_DEBUG") ||
                         util.env("NODE_ENV") === "development"));
var warnings = !!(util.env("BLUEBIRD_WARNINGS") != 0 &&
    (debugging || util.env("BLUEBIRD_WARNINGS")));
var longStackTraces = !!(util.env("BLUEBIRD_LONG_STACK_TRACES") != 0 &&
    (debugging || util.env("BLUEBIRD_LONG_STACK_TRACES")));

Promise.prototype.suppressUnhandledRejections = function() {
    var target = this._target();
    target._bitField = ((target._bitField & (~1048576)) |
                      2097152);
};

Promise.prototype._ensurePossibleRejectionHandled = function () {
    if ((this._bitField & 2097152) !== 0) return;
    this._setRejectionIsUnhandled();
    async.invokeLater(this._notifyUnhandledRejection, this, undefined);
};

Promise.prototype._notifyUnhandledRejectionIsHandled = function () {
    fireRejectionEvent("rejectionHandled",
                                  unhandledRejectionHandled, undefined, this);
};

Promise.prototype._notifyUnhandledRejection = function () {
    if (this._isRejectionUnhandled()) {
        var reason = this._settledValue();
        this._setUnhandledRejectionIsNotified();
        fireRejectionEvent("unhandledRejection",
                                      possiblyUnhandledRejection, reason, this);
    }
};

Promise.prototype._setUnhandledRejectionIsNotified = function () {
    this._bitField = this._bitField | 262144;
};

Promise.prototype._unsetUnhandledRejectionIsNotified = function () {
    this._bitField = this._bitField & (~262144);
};

Promise.prototype._isUnhandledRejectionNotified = function () {
    return (this._bitField & 262144) > 0;
};

Promise.prototype._setRejectionIsUnhandled = function () {
    this._bitField = this._bitField | 1048576;
};

Promise.prototype._unsetRejectionIsUnhandled = function () {
    this._bitField = this._bitField & (~1048576);
    if (this._isUnhandledRejectionNotified()) {
        this._unsetUnhandledRejectionIsNotified();
        this._notifyUnhandledRejectionIsHandled();
    }
};

Promise.prototype._isRejectionUnhandled = function () {
    return (this._bitField & 1048576) > 0;
};

Promise.prototype._warn = function(message, shouldUseOwnTrace, promise) {
    return warn(message, shouldUseOwnTrace, promise || this);
};

Promise.onPossiblyUnhandledRejection = function (fn) {
    var domain = getDomain();
    possiblyUnhandledRejection =
        typeof fn === "function" ? (domain === null ? fn : domain.bind(fn))
                                 : undefined;
};

Promise.onUnhandledRejectionHandled = function (fn) {
    var domain = getDomain();
    unhandledRejectionHandled =
        typeof fn === "function" ? (domain === null ? fn : domain.bind(fn))
                                 : undefined;
};

Promise.longStackTraces = function () {
    if (async.haveItemsQueued() && !config.longStackTraces) {
        throw new Error("cannot enable long stack traces after promises have been created\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
    }
    if (!config.longStackTraces && longStackTracesIsSupported()) {
        config.longStackTraces = true;
        Promise.prototype._captureStackTrace = longStackTracesCaptureStackTrace;
        Promise.prototype._attachExtraTrace = longStackTracesAttachExtraTrace;
        Context.activateLongStackTraces();
        async.disableTrampolineIfNecessary();
    }
};

Promise.hasLongStackTraces = function () {
    return config.longStackTraces && longStackTracesIsSupported();
};

Promise.config = function(opts) {
    opts = Object(opts);
    if ("longStackTraces" in opts && opts.longStackTraces) {
        Promise.longStackTraces();
    }
    if ("warnings" in opts) {
        config.warnings = !!opts.warnings;
    }
    if ("cancellation" in opts && opts.cancellation && !config.cancellation) {
        if (async.haveItemsQueued()) {
            throw new Error(
                "cannot enable cancellation after promises are in use");
        }
        Promise.prototype._clearCancellationData =
            cancellationClearCancellationData;
        Promise.prototype._propagateFrom = cancellationPropagateFrom;
        Promise.prototype._onCancel = cancellationOnCancel;
        Promise.prototype._setOnCancel = cancellationSetOnCancel;
        Promise.prototype._attachCancellationCallback =
            cancellationAttachCancellationCallback;
        Promise.prototype._execute = cancellationExecute;
        propagateFromFunction = cancellationPropagateFrom;
        config.cancellation = true;
    }
};

Promise.prototype._execute = function(executor, resolve, reject) {
    try {
        executor(resolve, reject);
    } catch (e) {
        return e;
    }
};
Promise.prototype._onCancel = function () {};
Promise.prototype._setOnCancel = function (handler) { ; };
Promise.prototype._attachCancellationCallback = function(onCancel) {
    ;
};
Promise.prototype._captureStackTrace = function () {};
Promise.prototype._attachExtraTrace = function () {};
Promise.prototype._clearCancellationData = function() {};
Promise.prototype._propagateFrom = function (parent, flags) {
    ;
    ;
};

function cancellationExecute(executor, resolve, reject) {
    var promise = this;
    try {
        executor(resolve, reject, function(onCancel) {
            if (typeof onCancel !== "function") {
                throw new TypeError("onCancel must be a function, got: " +
                                    util.toString(onCancel));
            }
            promise._attachCancellationCallback(onCancel);
        });
    } catch (e) {
        return e;
    }
}

function cancellationAttachCancellationCallback(onCancel) {
    if (!this.isCancellable()) return this;

    var previousOnCancel = this._onCancel();
    if (previousOnCancel !== undefined) {
        if (util.isArray(previousOnCancel)) {
            previousOnCancel.push(onCancel);
        } else {
            this._setOnCancel([previousOnCancel, onCancel]);
        }
    } else {
        this._setOnCancel(onCancel);
    }
}

function cancellationOnCancel() {
    return this._onCancelField;
}

function cancellationSetOnCancel(onCancel) {
    this._onCancelField = onCancel;
}

function cancellationClearCancellationData() {
    this._cancellationParent = undefined;
    this._onCancelField = undefined;
}

function cancellationPropagateFrom(parent, flags) {
    if ((flags & 1) !== 0) {
        this._cancellationParent = parent;
        var branchesRemainingToCancel = parent._branchesRemainingToCancel;
        if (branchesRemainingToCancel === undefined) {
            branchesRemainingToCancel = 0;
        }
        parent._branchesRemainingToCancel = branchesRemainingToCancel + 1;
    }
    if ((flags & 2) !== 0 && parent._isBound()) {
        this._setBoundTo(parent._boundTo);
    }
}

function bindingPropagateFrom(parent, flags) {
    if ((flags & 2) !== 0 && parent._isBound()) {
        this._setBoundTo(parent._boundTo);
    }
}
var propagateFromFunction = bindingPropagateFrom;

function boundValueFunction() {
    var ret = this._boundTo;
    if (ret !== undefined) {
        if (ret instanceof Promise) {
            if (ret.isFulfilled()) {
                return ret.value();
            } else {
                return undefined;
            }
        }
    }
    return ret;
}

function longStackTracesCaptureStackTrace() {
    this._trace = new CapturedTrace(this._peekContext());
}

function longStackTracesAttachExtraTrace(error, ignoreSelf) {
    if (canAttachTrace(error)) {
        var trace = this._trace;
        if (trace !== undefined) {
            if (ignoreSelf) trace = trace._parent;
        }
        if (trace !== undefined) {
            trace.attachExtraTrace(error);
        } else if (!error.__stackCleaned__) {
            var parsed = parseStackAndMessage(error);
            util.notEnumerableProp(error, "stack",
                parsed.message + "\n" + parsed.stack.join("\n"));
            util.notEnumerableProp(error, "__stackCleaned__", true);
        }
    }
}

function checkForgottenReturns(returnValue, promiseCreated, name, promise) {
    if (returnValue === undefined &&
        promiseCreated !== null &&
        config.longStackTraces &&
        config.warnings) {
        var msg = "a promise was created in a " + name +
            " handler but was not returned from it";
        promise._warn(msg, true, promiseCreated);
    }
}

function deprecated(name, replacement) {
    var message = name +
        " is deprecated and will be removed in a future version.";
    if (replacement) message += " Use " + replacement + " instead.";
    return warn(message);
}

function warn(message, shouldUseOwnTrace, promise) {
    if (!config.warnings) return;
    var warning = new Warning(message);
    var ctx;
    if (shouldUseOwnTrace) {
        promise._attachExtraTrace(warning);
    } else if (config.longStackTraces && (ctx = Promise._peekContext())) {
        ctx.attachExtraTrace(warning);
    } else {
        var parsed = parseStackAndMessage(warning);
        warning.stack = parsed.message + "\n" + parsed.stack.join("\n");
    }
    formatAndLogError(warning, "", true);
}

function reconstructStack(message, stacks) {
    for (var i = 0; i < stacks.length - 1; ++i) {
        stacks[i].push("From previous event:");
        stacks[i] = stacks[i].join("\n");
    }
    if (i < stacks.length) {
        stacks[i] = stacks[i].join("\n");
    }
    return message + "\n" + stacks.join("\n");
}

function removeDuplicateOrEmptyJumps(stacks) {
    for (var i = 0; i < stacks.length; ++i) {
        if (stacks[i].length === 0 ||
            ((i + 1 < stacks.length) && stacks[i][0] === stacks[i+1][0])) {
            stacks.splice(i, 1);
            i--;
        }
    }
}

function removeCommonRoots(stacks) {
    var current = stacks[0];
    for (var i = 1; i < stacks.length; ++i) {
        var prev = stacks[i];
        var currentLastIndex = current.length - 1;
        var currentLastLine = current[currentLastIndex];
        var commonRootMeetPoint = -1;

        for (var j = prev.length - 1; j >= 0; --j) {
            if (prev[j] === currentLastLine) {
                commonRootMeetPoint = j;
                break;
            }
        }

        for (var j = commonRootMeetPoint; j >= 0; --j) {
            var line = prev[j];
            if (current[currentLastIndex] === line) {
                current.pop();
                currentLastIndex--;
            } else {
                break;
            }
        }
        current = prev;
    }
}

function cleanStack(stack) {
    var ret = [];
    for (var i = 0; i < stack.length; ++i) {
        var line = stack[i];
        var isTraceLine = "    (No stack trace)" === line ||
            stackFramePattern.test(line);
        var isInternalFrame = isTraceLine && shouldIgnore(line);
        if (isTraceLine && !isInternalFrame) {
            if (indentStackFrames && line.charAt(0) !== " ") {
                line = "    " + line;
            }
            ret.push(line);
        }
    }
    return ret;
}

function stackFramesAsArray(error) {
    var stack = error.stack.replace(/\s+$/g, "").split("\n");
    for (var i = 0; i < stack.length; ++i) {
        var line = stack[i];
        if ("    (No stack trace)" === line || stackFramePattern.test(line)) {
            break;
        }
    }
    if (i > 0) {
        stack = stack.slice(i);
    }
    return stack;
}

function parseStackAndMessage(error) {
    var stack = error.stack;
    var message = error.toString();
    stack = typeof stack === "string" && stack.length > 0
                ? stackFramesAsArray(error) : ["    (No stack trace)"];
    return {
        message: message,
        stack: cleanStack(stack)
    };
}

function formatAndLogError(error, title, isSoft) {
    if (typeof console !== "undefined") {
        var message;
        if (util.isObject(error)) {
            var stack = error.stack;
            message = title + formatStack(stack, error);
        } else {
            message = title + String(error);
        }
        if (typeof printWarning === "function") {
            printWarning(message, isSoft);
        } else if (typeof console.log === "function" ||
            typeof console.log === "object") {
            console.log(message);
        }
    }
}

function fireRejectionEvent(name, localHandler, reason, promise) {
    var localEventFired = false;
    try {
        if (typeof localHandler === "function") {
            localEventFired = true;
            if (name === "rejectionHandled") {
                localHandler(promise);
            } else {
                localHandler(reason, promise);
            }
        }
    } catch (e) {
        async.throwLater(e);
    }

    var globalEventFired = false;
    try {
        globalEventFired = fireGlobalEvent(name, reason, promise);
    } catch (e) {
        globalEventFired = true;
        async.throwLater(e);
    }

    var domEventFired = false;
    if (fireDomEvent) {
        try {
            domEventFired = fireDomEvent(name.toLowerCase(), {
                reason: reason,
                promise: promise
            });
        } catch (e) {
            domEventFired = true;
            async.throwLater(e);
        }
    }

    if (!globalEventFired && !localEventFired && !domEventFired &&
        name === "unhandledRejection") {
        formatAndLogError(reason, "Unhandled rejection ");
    }
}

function formatNonError(obj) {
    var str;
    if (typeof obj === "function") {
        str = "[function " +
            (obj.name || "anonymous") +
            "]";
    } else {
        str = obj && typeof obj.toString === "function"
            ? obj.toString() : util.toString(obj);
        var ruselessToString = /\[object [a-zA-Z0-9$_]+\]/;
        if (ruselessToString.test(str)) {
            try {
                var newStr = JSON.stringify(obj);
                str = newStr;
            }
            catch(e) {

            }
        }
        if (str.length === 0) {
            str = "(empty array)";
        }
    }
    return ("(<" + snip(str) + ">, no stack trace)");
}

function snip(str) {
    var maxChars = 41;
    if (str.length < maxChars) {
        return str;
    }
    return str.substr(0, maxChars - 3) + "...";
}

function longStackTracesIsSupported() {
    return typeof captureStackTrace === "function";
}

var shouldIgnore = function() { return false; };
var parseLineInfoRegex = /[\/<\(]([^:\/]+):(\d+):(?:\d+)\)?\s*$/;
function parseLineInfo(line) {
    var matches = line.match(parseLineInfoRegex);
    if (matches) {
        return {
            fileName: matches[1],
            line: parseInt(matches[2], 10)
        };
    }
}

function setBounds(firstLineError, lastLineError) {
    if (!longStackTracesIsSupported()) return;
    var firstStackLines = firstLineError.stack.split("\n");
    var lastStackLines = lastLineError.stack.split("\n");
    var firstIndex = -1;
    var lastIndex = -1;
    var firstFileName;
    var lastFileName;
    for (var i = 0; i < firstStackLines.length; ++i) {
        var result = parseLineInfo(firstStackLines[i]);
        if (result) {
            firstFileName = result.fileName;
            firstIndex = result.line;
            break;
        }
    }
    for (var i = 0; i < lastStackLines.length; ++i) {
        var result = parseLineInfo(lastStackLines[i]);
        if (result) {
            lastFileName = result.fileName;
            lastIndex = result.line;
            break;
        }
    }
    if (firstIndex < 0 || lastIndex < 0 || !firstFileName || !lastFileName ||
        firstFileName !== lastFileName || firstIndex >= lastIndex) {
        return;
    }

    shouldIgnore = function(line) {
        if (bluebirdFramePattern.test(line)) return true;
        var info = parseLineInfo(line);
        if (info) {
            if (info.fileName === firstFileName &&
                (firstIndex <= info.line && info.line <= lastIndex)) {
                return true;
            }
        }
        return false;
    };
}

function CapturedTrace(parent) {
    this._parent = parent;
    this._promisesCreated = 0;
    var length = this._length = 1 + (parent === undefined ? 0 : parent._length);
    captureStackTrace(this, CapturedTrace);
    if (length > 32) this.uncycle();
}
util.inherits(CapturedTrace, Error);
Context.CapturedTrace = CapturedTrace;

CapturedTrace.prototype.uncycle = function() {
    var length = this._length;
    if (length < 2) return;
    var nodes = [];
    var stackToIndex = {};

    for (var i = 0, node = this; node !== undefined; ++i) {
        nodes.push(node);
        node = node._parent;
    }
    length = this._length = i;
    for (var i = length - 1; i >= 0; --i) {
        var stack = nodes[i].stack;
        if (stackToIndex[stack] === undefined) {
            stackToIndex[stack] = i;
        }
    }
    for (var i = 0; i < length; ++i) {
        var currentStack = nodes[i].stack;
        var index = stackToIndex[currentStack];
        if (index !== undefined && index !== i) {
            if (index > 0) {
                nodes[index - 1]._parent = undefined;
                nodes[index - 1]._length = 1;
            }
            nodes[i]._parent = undefined;
            nodes[i]._length = 1;
            var cycleEdgeNode = i > 0 ? nodes[i - 1] : this;

            if (index < length - 1) {
                cycleEdgeNode._parent = nodes[index + 1];
                cycleEdgeNode._parent.uncycle();
                cycleEdgeNode._length =
                    cycleEdgeNode._parent._length + 1;
            } else {
                cycleEdgeNode._parent = undefined;
                cycleEdgeNode._length = 1;
            }
            var currentChildLength = cycleEdgeNode._length + 1;
            for (var j = i - 2; j >= 0; --j) {
                nodes[j]._length = currentChildLength;
                currentChildLength++;
            }
            return;
        }
    }
};

CapturedTrace.prototype.attachExtraTrace = function(error) {
    if (error.__stackCleaned__) return;
    this.uncycle();
    var parsed = parseStackAndMessage(error);
    var message = parsed.message;
    var stacks = [parsed.stack];

    var trace = this;
    while (trace !== undefined) {
        stacks.push(cleanStack(trace.stack.split("\n")));
        trace = trace._parent;
    }
    removeCommonRoots(stacks);
    removeDuplicateOrEmptyJumps(stacks);
    util.notEnumerableProp(error, "stack", reconstructStack(message, stacks));
    util.notEnumerableProp(error, "__stackCleaned__", true);
};

var captureStackTrace = (function stackDetection() {
    var v8stackFramePattern = /^\s*at\s*/;
    var v8stackFormatter = function(stack, error) {
        if (typeof stack === "string") return stack;

        if (error.name !== undefined &&
            error.message !== undefined) {
            return error.toString();
        }
        return formatNonError(error);
    };

    if (typeof Error.stackTraceLimit === "number" &&
        typeof Error.captureStackTrace === "function") {
        Error.stackTraceLimit += 6;
        stackFramePattern = v8stackFramePattern;
        formatStack = v8stackFormatter;
        var captureStackTrace = Error.captureStackTrace;

        shouldIgnore = function(line) {
            return bluebirdFramePattern.test(line);
        };
        return function(receiver, ignoreUntil) {
            Error.stackTraceLimit += 6;
            captureStackTrace(receiver, ignoreUntil);
            Error.stackTraceLimit -= 6;
        };
    }
    var err = new Error();

    if (typeof err.stack === "string" &&
        err.stack.split("\n")[0].indexOf("stackDetection@") >= 0) {
        stackFramePattern = /@/;
        formatStack = v8stackFormatter;
        indentStackFrames = true;
        return function captureStackTrace(o) {
            o.stack = new Error().stack;
        };
    }

    var hasStackAfterThrow;
    try { throw new Error(); }
    catch(e) {
        hasStackAfterThrow = ("stack" in e);
    }
    if (!("stack" in err) && hasStackAfterThrow &&
        typeof Error.stackTraceLimit === "number") {
        stackFramePattern = v8stackFramePattern;
        formatStack = v8stackFormatter;
        return function captureStackTrace(o) {
            Error.stackTraceLimit += 6;
            try { throw new Error(); }
            catch(e) { o.stack = e.stack; }
            Error.stackTraceLimit -= 6;
        };
    }

    formatStack = function(stack, error) {
        if (typeof stack === "string") return stack;

        if ((typeof error === "object" ||
            typeof error === "function") &&
            error.name !== undefined &&
            error.message !== undefined) {
            return error.toString();
        }
        return formatNonError(error);
    };

    return null;

})([]);

var fireDomEvent;
var fireGlobalEvent = (function() {
    if (util.isNode) {
        return function(name, reason, promise) {
            if (name === "rejectionHandled") {
                return process.emit(name, promise);
            } else {
                return process.emit(name, reason, promise);
            }
        };
    } else {
        var customEventWorks = false;
        var anyEventWorks = true;
        try {
            var ev = new self.CustomEvent("test");
            customEventWorks = ev instanceof CustomEvent;
        } catch (e) {}
        if (!customEventWorks) {
            try {
                var event = document.createEvent("CustomEvent");
                event.initCustomEvent("testingtheevent", false, true, {});
                self.dispatchEvent(event);
            } catch (e) {
                anyEventWorks = false;
            }
        }
        if (anyEventWorks) {
            fireDomEvent = function(type, detail) {
                var event;
                if (customEventWorks) {
                    event = new self.CustomEvent(type, {
                        detail: detail,
                        bubbles: false,
                        cancelable: true
                    });
                } else if (self.dispatchEvent) {
                    event = document.createEvent("CustomEvent");
                    event.initCustomEvent(type, false, true, detail);
                }

                return event ? !self.dispatchEvent(event) : false;
            };
        }

        var toWindowMethodNameMap = {};
        toWindowMethodNameMap["unhandledRejection"] = ("on" +
            "unhandledRejection").toLowerCase();
        toWindowMethodNameMap["rejectionHandled"] = ("on" +
            "rejectionHandled").toLowerCase();

        return function(name, reason, promise) {
            var methodName = toWindowMethodNameMap[name];
            var method = self[methodName];
            if (!method) return false;
            if (name === "rejectionHandled") {
                method.call(self, promise);
            } else {
                method.call(self, reason, promise);
            }
            return true;
        };
    }
})();

if (typeof console !== "undefined" && typeof console.warn !== "undefined") {
    printWarning = function (message) {
        console.warn(message);
    };
    if (util.isNode && process.stderr.isTTY) {
        printWarning = function(message, isSoft) {
            var color = isSoft ? "\u001b[33m" : "\u001b[31m";
            console.warn(color + message + "\u001b[0m\n");
        };
    } else if (!util.isNode && typeof (new Error().stack) === "string") {
        printWarning = function(message, isSoft) {
            console.warn("%c" + message,
                        isSoft ? "color: darkorange" : "color: red");
        };
    }
}

var config = {
    warnings: warnings,
    longStackTraces: false,
    cancellation: false
};

if (longStackTraces) Promise.longStackTraces();

return {
    longStackTraces: function() {
        return config.longStackTraces;
    },
    warnings: function() {
        return config.warnings;
    },
    cancellation: function() {
        return config.cancellation;
    },
    propagateFromFunction: function() {
        return propagateFromFunction;
    },
    boundValueFunction: function() {
        return boundValueFunction;
    },
    checkForgottenReturns: checkForgottenReturns,
    setBounds: setBounds,
    warn: warn,
    deprecated: deprecated,
    CapturedTrace: CapturedTrace
};
};

},{"./errors":12,"./util":36}],10:[function(_dereq_,module,exports){
"use strict";
module.exports = function(Promise) {
function returner() {
    return this.value;
}
function thrower() {
    throw this.reason;
}

Promise.prototype["return"] =
Promise.prototype.thenReturn = function (value) {
    if (value instanceof Promise) value.suppressUnhandledRejections();
    return this._then(
        returner, undefined, undefined, {value: value}, undefined);
};

Promise.prototype["throw"] =
Promise.prototype.thenThrow = function (reason) {
    return this._then(
        thrower, undefined, undefined, {reason: reason}, undefined);
};

Promise.prototype.catchThrow = function (reason) {
    if (arguments.length <= 1) {
        return this._then(
            undefined, thrower, undefined, {reason: reason}, undefined);
    } else {
        var _reason = arguments[1];
        var handler = function() {throw _reason;};
        return this.caught(reason, handler);
    }
};

Promise.prototype.catchReturn = function (value) {
    if (arguments.length <= 1) {
        if (value instanceof Promise) value.suppressUnhandledRejections();
        return this._then(
            undefined, returner, undefined, {value: value}, undefined);
    } else {
        var _value = arguments[1];
        if (_value instanceof Promise) _value.suppressUnhandledRejections();
        var handler = function() {return _value;};
        return this.caught(value, handler);
    }
};
};

},{}],11:[function(_dereq_,module,exports){
"use strict";
module.exports = function(Promise, INTERNAL) {
var PromiseReduce = Promise.reduce;
var PromiseAll = Promise.all;

function promiseAllThis() {
    return PromiseAll(this);
}

function PromiseMapSeries(promises, fn) {
    return PromiseReduce(promises, fn, INTERNAL, INTERNAL);
}

Promise.prototype.each = function (fn) {
    return this.mapSeries(fn)
            ._then(promiseAllThis, undefined, undefined, this, undefined);
};

Promise.prototype.mapSeries = function (fn) {
    return PromiseReduce(this, fn, INTERNAL, INTERNAL);
};

Promise.each = function (promises, fn) {
    return PromiseMapSeries(promises, fn)
            ._then(promiseAllThis, undefined, undefined, promises, undefined);
};

Promise.mapSeries = PromiseMapSeries;
};

},{}],12:[function(_dereq_,module,exports){
"use strict";
var es5 = _dereq_("./es5");
var Objectfreeze = es5.freeze;
var util = _dereq_("./util");
var inherits = util.inherits;
var notEnumerableProp = util.notEnumerableProp;

function subError(nameProperty, defaultMessage) {
    function SubError(message) {
        if (!(this instanceof SubError)) return new SubError(message);
        notEnumerableProp(this, "message",
            typeof message === "string" ? message : defaultMessage);
        notEnumerableProp(this, "name", nameProperty);
        if (Error.captureStackTrace) {
            Error.captureStackTrace(this, this.constructor);
        } else {
            Error.call(this);
        }
    }
    inherits(SubError, Error);
    return SubError;
}

var _TypeError, _RangeError;
var Warning = subError("Warning", "warning");
var CancellationError = subError("CancellationError", "cancellation error");
var TimeoutError = subError("TimeoutError", "timeout error");
var AggregateError = subError("AggregateError", "aggregate error");
try {
    _TypeError = TypeError;
    _RangeError = RangeError;
} catch(e) {
    _TypeError = subError("TypeError", "type error");
    _RangeError = subError("RangeError", "range error");
}

var methods = ("join pop push shift unshift slice filter forEach some " +
    "every map indexOf lastIndexOf reduce reduceRight sort reverse").split(" ");

for (var i = 0; i < methods.length; ++i) {
    if (typeof Array.prototype[methods[i]] === "function") {
        AggregateError.prototype[methods[i]] = Array.prototype[methods[i]];
    }
}

es5.defineProperty(AggregateError.prototype, "length", {
    value: 0,
    configurable: false,
    writable: true,
    enumerable: true
});
AggregateError.prototype["isOperational"] = true;
var level = 0;
AggregateError.prototype.toString = function() {
    var indent = Array(level * 4 + 1).join(" ");
    var ret = "\n" + indent + "AggregateError of:" + "\n";
    level++;
    indent = Array(level * 4 + 1).join(" ");
    for (var i = 0; i < this.length; ++i) {
        var str = this[i] === this ? "[Circular AggregateError]" : this[i] + "";
        var lines = str.split("\n");
        for (var j = 0; j < lines.length; ++j) {
            lines[j] = indent + lines[j];
        }
        str = lines.join("\n");
        ret += str + "\n";
    }
    level--;
    return ret;
};

function OperationalError(message) {
    if (!(this instanceof OperationalError))
        return new OperationalError(message);
    notEnumerableProp(this, "name", "OperationalError");
    notEnumerableProp(this, "message", message);
    this.cause = message;
    this["isOperational"] = true;

    if (message instanceof Error) {
        notEnumerableProp(this, "message", message.message);
        notEnumerableProp(this, "stack", message.stack);
    } else if (Error.captureStackTrace) {
        Error.captureStackTrace(this, this.constructor);
    }

}
inherits(OperationalError, Error);

var errorTypes = Error["__BluebirdErrorTypes__"];
if (!errorTypes) {
    errorTypes = Objectfreeze({
        CancellationError: CancellationError,
        TimeoutError: TimeoutError,
        OperationalError: OperationalError,
        RejectionError: OperationalError,
        AggregateError: AggregateError
    });
    notEnumerableProp(Error, "__BluebirdErrorTypes__", errorTypes);
}

module.exports = {
    Error: Error,
    TypeError: _TypeError,
    RangeError: _RangeError,
    CancellationError: errorTypes.CancellationError,
    OperationalError: errorTypes.OperationalError,
    TimeoutError: errorTypes.TimeoutError,
    AggregateError: errorTypes.AggregateError,
    Warning: Warning
};

},{"./es5":13,"./util":36}],13:[function(_dereq_,module,exports){
var isES5 = (function(){
    "use strict";
    return this === undefined;
})();

if (isES5) {
    module.exports = {
        freeze: Object.freeze,
        defineProperty: Object.defineProperty,
        getDescriptor: Object.getOwnPropertyDescriptor,
        keys: Object.keys,
        names: Object.getOwnPropertyNames,
        getPrototypeOf: Object.getPrototypeOf,
        isArray: Array.isArray,
        isES5: isES5,
        propertyIsWritable: function(obj, prop) {
            var descriptor = Object.getOwnPropertyDescriptor(obj, prop);
            return !!(!descriptor || descriptor.writable || descriptor.set);
        }
    };
} else {
    var has = {}.hasOwnProperty;
    var str = {}.toString;
    var proto = {}.constructor.prototype;

    var ObjectKeys = function (o) {
        var ret = [];
        for (var key in o) {
            if (has.call(o, key)) {
                ret.push(key);
            }
        }
        return ret;
    };

    var ObjectGetDescriptor = function(o, key) {
        return {value: o[key]};
    };

    var ObjectDefineProperty = function (o, key, desc) {
        o[key] = desc.value;
        return o;
    };

    var ObjectFreeze = function (obj) {
        return obj;
    };

    var ObjectGetPrototypeOf = function (obj) {
        try {
            return Object(obj).constructor.prototype;
        }
        catch (e) {
            return proto;
        }
    };

    var ArrayIsArray = function (obj) {
        try {
            return str.call(obj) === "[object Array]";
        }
        catch(e) {
            return false;
        }
    };

    module.exports = {
        isArray: ArrayIsArray,
        keys: ObjectKeys,
        names: ObjectKeys,
        defineProperty: ObjectDefineProperty,
        getDescriptor: ObjectGetDescriptor,
        freeze: ObjectFreeze,
        getPrototypeOf: ObjectGetPrototypeOf,
        isES5: isES5,
        propertyIsWritable: function() {
            return true;
        }
    };
}

},{}],14:[function(_dereq_,module,exports){
"use strict";
module.exports = function(Promise, INTERNAL) {
var PromiseMap = Promise.map;

Promise.prototype.filter = function (fn, options) {
    return PromiseMap(this, fn, options, INTERNAL);
};

Promise.filter = function (promises, fn, options) {
    return PromiseMap(promises, fn, options, INTERNAL);
};
};

},{}],15:[function(_dereq_,module,exports){
"use strict";
module.exports = function(Promise, tryConvertToPromise) {
var util = _dereq_("./util");
var CancellationError = Promise.CancellationError;
var errorObj = util.errorObj;

function FinallyHandlerCancelReaction(finallyHandler) {
    this.finallyHandler = finallyHandler;
}

FinallyHandlerCancelReaction.prototype._resultCancelled = function() {
    checkCancel(this.finallyHandler);
};

function checkCancel(ctx, reason) {
    if (ctx.cancelPromise != null) {
        if (arguments.length > 1) {
            ctx.cancelPromise._reject(reason);
        } else {
            ctx.cancelPromise._cancel();
        }
        ctx.cancelPromise = null;
        return true;
    }
    return false;
}

function succeed() {
    return finallyHandler.call(this, this.promise._target()._settledValue());
}
function fail(reason) {
    if (checkCancel(this, reason)) return;
    errorObj.e = reason;
    return errorObj;
}
function finallyHandler(reasonOrValue) {
    var promise = this.promise;
    var handler = this.handler;

    if (!this.called) {
        this.called = true;
        var ret = this.type === 0
            ? handler.call(promise._boundValue())
            : handler.call(promise._boundValue(), reasonOrValue);
        if (ret !== undefined) {
            var maybePromise = tryConvertToPromise(ret, promise);
            if (maybePromise instanceof Promise) {
                if (this.cancelPromise != null) {
                    if (maybePromise.isCancelled()) {
                        var reason =
                            new CancellationError("late cancellation observer");
                        promise._attachExtraTrace(reason);
                        errorObj.e = reason;
                        return errorObj;
                    } else if (maybePromise.isPending()) {
                        maybePromise._attachCancellationCallback(
                            new FinallyHandlerCancelReaction(this));
                    }
                }
                return maybePromise._then(
                    succeed, fail, undefined, this, undefined);
            }
        }
    }

    if (promise.isRejected()) {
        checkCancel(this);
        errorObj.e = reasonOrValue;
        return errorObj;
    } else {
        checkCancel(this);
        return reasonOrValue;
    }
}

Promise.prototype._passThrough = function(handler, type, success, fail) {
    if (typeof handler !== "function") return this.then();
    return this._then(success, fail, undefined, {
        promise: this,
        handler: handler,
        called: false,
        cancelPromise: null,
        type: type
    }, undefined);
};

Promise.prototype.lastly =
Promise.prototype["finally"] = function (handler) {
    return this._passThrough(handler,
                             0,
                             finallyHandler,
                             finallyHandler);
};

Promise.prototype.tap = function (handler) {
    return this._passThrough(handler, 1, finallyHandler);
};

return finallyHandler;
};

},{"./util":36}],16:[function(_dereq_,module,exports){
"use strict";
module.exports = function(Promise,
                          apiRejection,
                          INTERNAL,
                          tryConvertToPromise,
                          Proxyable,
                          debug) {
var errors = _dereq_("./errors");
var TypeError = errors.TypeError;
var util = _dereq_("./util");
var errorObj = util.errorObj;
var tryCatch = util.tryCatch;
var yieldHandlers = [];

function promiseFromYieldHandler(value, yieldHandlers, traceParent) {
    for (var i = 0; i < yieldHandlers.length; ++i) {
        traceParent._pushContext();
        var result = tryCatch(yieldHandlers[i])(value);
        traceParent._popContext();
        if (result === errorObj) {
            traceParent._pushContext();
            var ret = Promise.reject(errorObj.e);
            traceParent._popContext();
            return ret;
        }
        var maybePromise = tryConvertToPromise(result, traceParent);
        if (maybePromise instanceof Promise) return maybePromise;
    }
    return null;
}

function PromiseSpawn(generatorFunction, receiver, yieldHandler, stack) {
    var promise = this._promise = new Promise(INTERNAL);
    promise._captureStackTrace();
    promise._setOnCancel(this);
    this._stack = stack;
    this._generatorFunction = generatorFunction;
    this._receiver = receiver;
    this._generator = undefined;
    this._yieldHandlers = typeof yieldHandler === "function"
        ? [yieldHandler].concat(yieldHandlers)
        : yieldHandlers;
    this._yieldedPromise = null;
}
util.inherits(PromiseSpawn, Proxyable);

PromiseSpawn.prototype._isResolved = function() {
    return this.promise === null;
};

PromiseSpawn.prototype._cleanup = function() {
    this._promise = this._generator = null;
};

PromiseSpawn.prototype._promiseCancelled = function() {
    if (this._isResolved()) return;
    var implementsReturn = typeof this._generator["return"] !== "undefined";

    var result;
    if (!implementsReturn) {
        var reason = new Promise.CancellationError(
            "generator .return() sentinel");
        Promise.coroutine.returnSentinel = reason;
        this._promise._attachExtraTrace(reason);
        this._promise._pushContext();
        result = tryCatch(this._generator["throw"]).call(this._generator,
                                                         reason);
        this._promise._popContext();
        if (result === errorObj && result.e === reason) {
            result = null;
        }
    } else {
        this._promise._pushContext();
        result = tryCatch(this._generator["return"]).call(this._generator,
                                                          undefined);
        this._promise._popContext();
    }
    var promise = this._promise;
    this._cleanup();
    if (result === errorObj) {
        promise._rejectCallback(result.e, false);
    } else {
        promise.cancel();
    }
};

PromiseSpawn.prototype._promiseFulfilled = function(value) {
    this._yieldedPromise = null;
    this._promise._pushContext();
    var result = tryCatch(this._generator.next).call(this._generator, value);
    this._promise._popContext();
    this._continue(result);
};

PromiseSpawn.prototype._promiseRejected = function(reason) {
    this._yieldedPromise = null;
    this._promise._attachExtraTrace(reason);
    this._promise._pushContext();
    var result = tryCatch(this._generator["throw"])
        .call(this._generator, reason);
    this._promise._popContext();
    this._continue(result);
};

PromiseSpawn.prototype._resultCancelled = function() {
    if (this._yieldedPromise instanceof Promise) {
        var promise = this._yieldedPromise;
        this._yieldedPromise = null;
        promise.cancel();
    }
};

PromiseSpawn.prototype.promise = function () {
    return this._promise;
};

PromiseSpawn.prototype._run = function () {
    this._generator = this._generatorFunction.call(this._receiver);
    this._receiver =
        this._generatorFunction = undefined;
    this._promiseFulfilled(undefined);
};

PromiseSpawn.prototype._continue = function (result) {
    var promise = this._promise;
    if (result === errorObj) {
        this._cleanup();
        return promise._rejectCallback(result.e, false);
    }

    var value = result.value;
    if (result.done === true) {
        this._cleanup();
        return promise._resolveCallback(value);
    } else {
        var maybePromise = tryConvertToPromise(value, this._promise);
        if (!(maybePromise instanceof Promise)) {
            maybePromise =
                promiseFromYieldHandler(maybePromise,
                                        this._yieldHandlers,
                                        this._promise);
            if (maybePromise === null) {
                this._promiseRejected(
                    new TypeError(
                        "A value %s was yielded that could not be treated as a promise\u000a\u000a    See http://goo.gl/MqrFmX\u000a\u000a".replace("%s", value) +
                        "From coroutine:\u000a" +
                        this._stack.split("\n").slice(1, -7).join("\n")
                    )
                );
                return;
            }
        }
        maybePromise = maybePromise._target();
        var bitField = maybePromise._bitField;
        ;
        if (((bitField & 50397184) === 0)) {
            this._yieldedPromise = maybePromise;
            maybePromise._proxy(this, null);
        } else if (((bitField & 33554432) !== 0)) {
            this._promiseFulfilled(maybePromise._value());
        } else if (((bitField & 16777216) !== 0)) {
            this._promiseRejected(maybePromise._reason());
        } else {
            this._promiseCancelled();
        }
    }
};

Promise.coroutine = function (generatorFunction, options) {
    if (typeof generatorFunction !== "function") {
        throw new TypeError("generatorFunction must be a function\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
    }
    var yieldHandler = Object(options).yieldHandler;
    var PromiseSpawn$ = PromiseSpawn;
    var stack = new Error().stack;
    return function () {
        var generator = generatorFunction.apply(this, arguments);
        var spawn = new PromiseSpawn$(undefined, undefined, yieldHandler,
                                      stack);
        var ret = spawn.promise();
        spawn._generator = generator;
        spawn._promiseFulfilled(undefined);
        return ret;
    };
};

Promise.coroutine.addYieldHandler = function(fn) {
    if (typeof fn !== "function") {
        throw new TypeError("expecting a function but got " + util.classString(fn));
    }
    yieldHandlers.push(fn);
};

Promise.spawn = function (generatorFunction) {
    debug.deprecated("Promise.spawn()", "Promise.coroutine()");
    if (typeof generatorFunction !== "function") {
        return apiRejection("generatorFunction must be a function\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
    }
    var spawn = new PromiseSpawn(generatorFunction, this);
    var ret = spawn.promise();
    spawn._run(Promise.spawn);
    return ret;
};
};

},{"./errors":12,"./util":36}],17:[function(_dereq_,module,exports){
"use strict";
module.exports =
function(Promise, PromiseArray, tryConvertToPromise, INTERNAL) {
var util = _dereq_("./util");
var canEvaluate = util.canEvaluate;
var tryCatch = util.tryCatch;
var errorObj = util.errorObj;
var reject;

if (!true) {
if (canEvaluate) {
    var thenCallback = function(i) {
        return new Function("value", "holder", "                             \n\
            'use strict';                                                    \n\
            holder.pIndex = value;                                           \n\
            holder.checkFulfillment(this);                                   \n\
            ".replace(/Index/g, i));
    };

    var promiseSetter = function(i) {
        return new Function("promise", "holder", "                           \n\
            'use strict';                                                    \n\
            holder.pIndex = promise;                                         \n\
            ".replace(/Index/g, i));
    };

    var generateHolderClass = function(total) {
        var props = new Array(total);
        for (var i = 0; i < props.length; ++i) {
            props[i] = "this.p" + (i+1);
        }
        var assignment = props.join(" = ") + " = null;";
        var cancellationCode= "var promise;\n" + props.map(function(prop) {
            return "                                                         \n\
                promise = " + prop + ";                                      \n\
                if (promise instanceof Promise) {                            \n\
                    promise.cancel();                                        \n\
                }                                                            \n\
            ";
        }).join("\n");
        var passedArguments = props.join(", ");
        var name = "Holder$" + total;


        var code = "return function(tryCatch, errorObj, Promise) {           \n\
            'use strict';                                                    \n\
            function [TheName](fn) {                                         \n\
                [TheProperties]                                              \n\
                this.fn = fn;                                                \n\
                this.now = 0;                                                \n\
            }                                                                \n\
            [TheName].prototype.checkFulfillment = function(promise) {       \n\
                var now = ++this.now;                                        \n\
                if (now === [TheTotal]) {                                    \n\
                    promise._pushContext();                                  \n\
                    var callback = this.fn;                                  \n\
                    var ret = tryCatch(callback)([ThePassedArguments]);      \n\
                    promise._popContext();                                   \n\
                    if (ret === errorObj) {                                  \n\
                        promise._rejectCallback(ret.e, false);               \n\
                    } else {                                                 \n\
                        promise._resolveCallback(ret);                       \n\
                    }                                                        \n\
                }                                                            \n\
            };                                                               \n\
                                                                             \n\
            [TheName].prototype._resultCancelled = function() {              \n\
                [CancellationCode]                                           \n\
            };                                                               \n\
                                                                             \n\
            return [TheName];                                                \n\
        }(tryCatch, errorObj, Promise);                                      \n\
        ";

        code = code.replace(/\[TheName\]/g, name)
            .replace(/\[TheTotal\]/g, total)
            .replace(/\[ThePassedArguments\]/g, passedArguments)
            .replace(/\[TheProperties\]/g, assignment)
            .replace(/\[CancellationCode\]/g, cancellationCode);

        return new Function("tryCatch", "errorObj", "Promise", code)
                           (tryCatch, errorObj, Promise);
    };

    var holderClasses = [];
    var thenCallbacks = [];
    var promiseSetters = [];

    for (var i = 0; i < 8; ++i) {
        holderClasses.push(generateHolderClass(i + 1));
        thenCallbacks.push(thenCallback(i + 1));
        promiseSetters.push(promiseSetter(i + 1));
    }

    reject = function (reason) {
        this._reject(reason);
    };
}}

Promise.join = function () {
    var last = arguments.length - 1;
    var fn;
    if (last > 0 && typeof arguments[last] === "function") {
        fn = arguments[last];
        if (!true) {
            if (last <= 8 && canEvaluate) {
                var ret = new Promise(INTERNAL);
                ret._captureStackTrace();
                var HolderClass = holderClasses[last - 1];
                var holder = new HolderClass(fn);
                var callbacks = thenCallbacks;

                for (var i = 0; i < last; ++i) {
                    var maybePromise = tryConvertToPromise(arguments[i], ret);
                    if (maybePromise instanceof Promise) {
                        maybePromise = maybePromise._target();
                        var bitField = maybePromise._bitField;
                        ;
                        if (((bitField & 50397184) === 0)) {
                            maybePromise._then(callbacks[i], reject,
                                               undefined, ret, holder);
                            promiseSetters[i](maybePromise, holder);
                        } else if (((bitField & 33554432) !== 0)) {
                            callbacks[i].call(ret,
                                              maybePromise._value(), holder);
                        } else if (((bitField & 16777216) !== 0)) {
                            ret._reject(maybePromise._reason());
                        } else {
                            ret._cancel();
                        }
                    } else {
                        callbacks[i].call(ret, maybePromise, holder);
                    }
                }
                if (!ret._isFateSealed()) {
                    ret._setAsyncGuaranteed();
                    ret._setOnCancel(holder);
                }
                return ret;
            }
        }
    }
    var args = [].slice.call(arguments);;
    if (fn) args.pop();
    var ret = new PromiseArray(args).promise();
    return fn !== undefined ? ret.spread(fn) : ret;
};

};

},{"./util":36}],18:[function(_dereq_,module,exports){
"use strict";
module.exports = function(Promise,
                          PromiseArray,
                          apiRejection,
                          tryConvertToPromise,
                          INTERNAL,
                          debug) {
var getDomain = Promise._getDomain;
var util = _dereq_("./util");
var tryCatch = util.tryCatch;
var errorObj = util.errorObj;
var EMPTY_ARRAY = [];

function MappingPromiseArray(promises, fn, limit, _filter) {
    this.constructor$(promises);
    this._promise._captureStackTrace();
    var domain = getDomain();
    this._callback = domain === null ? fn : domain.bind(fn);
    this._preservedValues = _filter === INTERNAL
        ? new Array(this.length())
        : null;
    this._limit = limit;
    this._inFlight = 0;
    this._queue = limit >= 1 ? [] : EMPTY_ARRAY;
    this._init$(undefined, -2);
}
util.inherits(MappingPromiseArray, PromiseArray);

MappingPromiseArray.prototype._init = function () {};

MappingPromiseArray.prototype._promiseFulfilled = function (value, index) {
    var values = this._values;
    var length = this.length();
    var preservedValues = this._preservedValues;
    var limit = this._limit;

    if (index < 0) {
        index = (index * -1) - 1;
        values[index] = value;
        if (limit >= 1) {
            this._inFlight--;
            this._drainQueue();
            if (this._isResolved()) return true;
        }
    } else {
        if (limit >= 1 && this._inFlight >= limit) {
            values[index] = value;
            this._queue.push(index);
            return false;
        }
        if (preservedValues !== null) preservedValues[index] = value;

        var promise = this._promise;
        var callback = this._callback;
        var receiver = promise._boundValue();
        promise._pushContext();
        var ret = tryCatch(callback).call(receiver, value, index, length);
        var promiseCreated = promise._popContext();
        debug.checkForgottenReturns(
            ret,
            promiseCreated,
            preservedValues !== null ? "Promise.filter" : "Promise.map",
            promise
        );
        if (ret === errorObj) {
            this._reject(ret.e);
            return true;
        }

        var maybePromise = tryConvertToPromise(ret, this._promise);
        if (maybePromise instanceof Promise) {
            maybePromise = maybePromise._target();
            var bitField = maybePromise._bitField;
            ;
            if (((bitField & 50397184) === 0)) {
                if (limit >= 1) this._inFlight++;
                values[index] = maybePromise;
                maybePromise._proxy(this, (index + 1) * -1);
                return false;
            } else if (((bitField & 33554432) !== 0)) {
                ret = maybePromise._value();
            } else if (((bitField & 16777216) !== 0)) {
                this._reject(maybePromise._reason());
                return true;
            } else {
                this._cancel();
                return true;
            }
        }
        values[index] = ret;
    }
    var totalResolved = ++this._totalResolved;
    if (totalResolved >= length) {
        if (preservedValues !== null) {
            this._filter(values, preservedValues);
        } else {
            this._resolve(values);
        }
        return true;
    }
    return false;
};

MappingPromiseArray.prototype._drainQueue = function () {
    var queue = this._queue;
    var limit = this._limit;
    var values = this._values;
    while (queue.length > 0 && this._inFlight < limit) {
        if (this._isResolved()) return;
        var index = queue.pop();
        this._promiseFulfilled(values[index], index);
    }
};

MappingPromiseArray.prototype._filter = function (booleans, values) {
    var len = values.length;
    var ret = new Array(len);
    var j = 0;
    for (var i = 0; i < len; ++i) {
        if (booleans[i]) ret[j++] = values[i];
    }
    ret.length = j;
    this._resolve(ret);
};

MappingPromiseArray.prototype.preservedValues = function () {
    return this._preservedValues;
};

function map(promises, fn, options, _filter) {
    if (typeof fn !== "function") {
        return apiRejection("expecting a function but got " + util.classString(fn));
    }
    var limit = typeof options === "object" && options !== null
        ? options.concurrency
        : 0;
    limit = typeof limit === "number" &&
        isFinite(limit) && limit >= 1 ? limit : 0;
    return new MappingPromiseArray(promises, fn, limit, _filter).promise();
}

Promise.prototype.map = function (fn, options) {
    return map(this, fn, options, null);
};

Promise.map = function (promises, fn, options, _filter) {
    return map(promises, fn, options, _filter);
};


};

},{"./util":36}],19:[function(_dereq_,module,exports){
"use strict";
module.exports =
function(Promise, INTERNAL, tryConvertToPromise, apiRejection, debug) {
var util = _dereq_("./util");
var tryCatch = util.tryCatch;

Promise.method = function (fn) {
    if (typeof fn !== "function") {
        throw new Promise.TypeError("expecting a function but got " + util.classString(fn));
    }
    return function () {
        var ret = new Promise(INTERNAL);
        ret._captureStackTrace();
        ret._pushContext();
        var value = tryCatch(fn).apply(this, arguments);
        var promiseCreated = ret._popContext();
        debug.checkForgottenReturns(
            value, promiseCreated, "Promise.method", ret);
        ret._resolveFromSyncValue(value);
        return ret;
    };
};

Promise.attempt = Promise["try"] = function (fn) {
    if (typeof fn !== "function") {
        return apiRejection("expecting a function but got " + util.classString(fn));
    }
    var ret = new Promise(INTERNAL);
    ret._captureStackTrace();
    ret._pushContext();
    var value;
    if (arguments.length > 1) {
        debug.deprecated("calling Promise.try with more than 1 argument");
        var arg = arguments[1];
        var ctx = arguments[2];
        value = util.isArray(arg) ? tryCatch(fn).apply(ctx, arg)
                                  : tryCatch(fn).call(ctx, arg);
    } else {
        value = tryCatch(fn)();
    }
    var promiseCreated = ret._popContext();
    debug.checkForgottenReturns(
        value, promiseCreated, "Promise.try", ret);
    ret._resolveFromSyncValue(value);
    return ret;
};

Promise.prototype._resolveFromSyncValue = function (value) {
    if (value === util.errorObj) {
        this._rejectCallback(value.e, false);
    } else {
        this._resolveCallback(value, true);
    }
};
};

},{"./util":36}],20:[function(_dereq_,module,exports){
"use strict";
var util = _dereq_("./util");
var maybeWrapAsError = util.maybeWrapAsError;
var errors = _dereq_("./errors");
var OperationalError = errors.OperationalError;
var es5 = _dereq_("./es5");

function isUntypedError(obj) {
    return obj instanceof Error &&
        es5.getPrototypeOf(obj) === Error.prototype;
}

var rErrorKey = /^(?:name|message|stack|cause)$/;
function wrapAsOperationalError(obj) {
    var ret;
    if (isUntypedError(obj)) {
        ret = new OperationalError(obj);
        ret.name = obj.name;
        ret.message = obj.message;
        ret.stack = obj.stack;
        var keys = es5.keys(obj);
        for (var i = 0; i < keys.length; ++i) {
            var key = keys[i];
            if (!rErrorKey.test(key)) {
                ret[key] = obj[key];
            }
        }
        return ret;
    }
    util.markAsOriginatingFromRejection(obj);
    return obj;
}

function nodebackForPromise(promise, multiArgs) {
    return function(err, value) {
        if (promise === null) return;
        if (err) {
            var wrapped = wrapAsOperationalError(maybeWrapAsError(err));
            promise._attachExtraTrace(wrapped);
            promise._reject(wrapped);
        } else if (!multiArgs) {
            promise._fulfill(value);
        } else {
            var args = [].slice.call(arguments, 1);;
            promise._fulfill(args);
        }
        promise = null;
    };
}

module.exports = nodebackForPromise;

},{"./errors":12,"./es5":13,"./util":36}],21:[function(_dereq_,module,exports){
"use strict";
module.exports = function(Promise) {
var util = _dereq_("./util");
var async = Promise._async;
var tryCatch = util.tryCatch;
var errorObj = util.errorObj;

function spreadAdapter(val, nodeback) {
    var promise = this;
    if (!util.isArray(val)) return successAdapter.call(promise, val, nodeback);
    var ret =
        tryCatch(nodeback).apply(promise._boundValue(), [null].concat(val));
    if (ret === errorObj) {
        async.throwLater(ret.e);
    }
}

function successAdapter(val, nodeback) {
    var promise = this;
    var receiver = promise._boundValue();
    var ret = val === undefined
        ? tryCatch(nodeback).call(receiver, null)
        : tryCatch(nodeback).call(receiver, null, val);
    if (ret === errorObj) {
        async.throwLater(ret.e);
    }
}
function errorAdapter(reason, nodeback) {
    var promise = this;
    if (!reason) {
        var newReason = new Error(reason + "");
        newReason.cause = reason;
        reason = newReason;
    }
    var ret = tryCatch(nodeback).call(promise._boundValue(), reason);
    if (ret === errorObj) {
        async.throwLater(ret.e);
    }
}

Promise.prototype.asCallback = Promise.prototype.nodeify = function (nodeback,
                                                                     options) {
    if (typeof nodeback == "function") {
        var adapter = successAdapter;
        if (options !== undefined && Object(options).spread) {
            adapter = spreadAdapter;
        }
        this._then(
            adapter,
            errorAdapter,
            undefined,
            this,
            nodeback
        );
    }
    return this;
};
};

},{"./util":36}],22:[function(_dereq_,module,exports){
"use strict";
module.exports = function() {
var makeSelfResolutionError = function () {
    return new TypeError("circular promise resolution chain\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
};
var reflectHandler = function() {
    return new Promise.PromiseInspection(this._target());
};
var apiRejection = function(msg) {
    return Promise.reject(new TypeError(msg));
};
function Proxyable() {}
var UNDEFINED_BINDING = {};
var util = _dereq_("./util");

var getDomain;
if (util.isNode) {
    getDomain = function() {
        var ret = process.domain;
        if (ret === undefined) ret = null;
        return ret;
    };
} else {
    getDomain = function() {
        return null;
    };
}
util.notEnumerableProp(Promise, "_getDomain", getDomain);

var es5 = _dereq_("./es5");
var Async = _dereq_("./async");
var async = new Async();
es5.defineProperty(Promise, "_async", {value: async});
var errors = _dereq_("./errors");
var TypeError = Promise.TypeError = errors.TypeError;
Promise.RangeError = errors.RangeError;
var CancellationError = Promise.CancellationError = errors.CancellationError;
Promise.TimeoutError = errors.TimeoutError;
Promise.OperationalError = errors.OperationalError;
Promise.RejectionError = errors.OperationalError;
Promise.AggregateError = errors.AggregateError;
var INTERNAL = function(){};
var APPLY = {};
var NEXT_FILTER = {};
var tryConvertToPromise = _dereq_("./thenables")(Promise, INTERNAL);
var PromiseArray =
    _dereq_("./promise_array")(Promise, INTERNAL,
                               tryConvertToPromise, apiRejection, Proxyable);
var Context = _dereq_("./context")(Promise);
 /*jshint unused:false*/
var createContext = Context.create;
var debug = _dereq_("./debuggability")(Promise, Context);
var CapturedTrace = debug.CapturedTrace;
var finallyHandler = _dereq_("./finally")(Promise, tryConvertToPromise);
var catchFilter = _dereq_("./catch_filter")(NEXT_FILTER);
var nodebackForPromise = _dereq_("./nodeback");
var errorObj = util.errorObj;
var tryCatch = util.tryCatch;
function check(self, executor) {
    if (typeof executor !== "function") {
        throw new TypeError("expecting a function but got " + util.classString(executor));
    }
    if (self.constructor !== Promise) {
        throw new TypeError("the promise constructor cannot be invoked directly\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
    }
}

function Promise(executor) {
    this._bitField = 0;
    this._fulfillmentHandler0 = undefined;
    this._rejectionHandler0 = undefined;
    this._promise0 = undefined;
    this._receiver0 = undefined;
    if (executor !== INTERNAL) {
        check(this, executor);
        this._resolveFromExecutor(executor);
    }
    this._promiseCreated();
}

Promise.prototype.toString = function () {
    return "[object Promise]";
};

Promise.prototype.caught = Promise.prototype["catch"] = function (fn) {
    var len = arguments.length;
    if (len > 1) {
        var catchInstances = new Array(len - 1),
            j = 0, i;
        for (i = 0; i < len - 1; ++i) {
            var item = arguments[i];
            if (util.isObject(item)) {
                catchInstances[j++] = item;
            } else {
                return apiRejection("expecting an object but got " + util.classString(item));
            }
        }
        catchInstances.length = j;
        fn = arguments[i];
        return this.then(undefined, catchFilter(catchInstances, fn, this));
    }
    return this.then(undefined, fn);
};

Promise.prototype.reflect = function () {
    return this._then(reflectHandler,
        reflectHandler, undefined, this, undefined);
};

Promise.prototype.then = function (didFulfill, didReject) {
    if (debug.warnings() && arguments.length > 0 &&
        typeof didFulfill !== "function" &&
        typeof didReject !== "function") {
        var msg = ".then() only accepts functions but was passed: " +
                util.classString(didFulfill);
        if (arguments.length > 1) {
            msg += ", " + util.classString(didReject);
        }
        this._warn(msg);
    }
    return this._then(didFulfill, didReject, undefined, undefined, undefined);
};

Promise.prototype.done = function (didFulfill, didReject) {
    var promise =
        this._then(didFulfill, didReject, undefined, undefined, undefined);
    promise._setIsFinal();
};

Promise.prototype.spread = function (fn) {
    if (typeof fn !== "function") {
        return apiRejection("expecting a function but got " + util.classString(fn));
    }
    return this.all()._then(fn, undefined, undefined, APPLY, undefined);
};

Promise.prototype.toJSON = function () {
    var ret = {
        isFulfilled: false,
        isRejected: false,
        fulfillmentValue: undefined,
        rejectionReason: undefined
    };
    if (this.isFulfilled()) {
        ret.fulfillmentValue = this.value();
        ret.isFulfilled = true;
    } else if (this.isRejected()) {
        ret.rejectionReason = this.reason();
        ret.isRejected = true;
    }
    return ret;
};

Promise.prototype.all = function () {
    if (arguments.length > 0) {
        this._warn(".all() was passed arguments but it does not take any");
    }
    return new PromiseArray(this).promise();
};

Promise.prototype.error = function (fn) {
    return this.caught(util.originatesFromRejection, fn);
};

Promise.is = function (val) {
    return val instanceof Promise;
};

Promise.fromNode = Promise.fromCallback = function(fn) {
    var ret = new Promise(INTERNAL);
    var multiArgs = arguments.length > 1 ? !!Object(arguments[1]).multiArgs
                                         : false;
    var result = tryCatch(fn)(nodebackForPromise(ret, multiArgs));
    if (result === errorObj) {
        ret._rejectCallback(result.e, true);
    }
    if (!ret._isFateSealed()) ret._setAsyncGuaranteed();
    return ret;
};

Promise.all = function (promises) {
    return new PromiseArray(promises).promise();
};

Promise.cast = function (obj) {
    var ret = tryConvertToPromise(obj);
    if (!(ret instanceof Promise)) {
        ret = new Promise(INTERNAL);
        ret._setFulfilled();
        ret._rejectionHandler0 = obj;
    }
    return ret;
};

Promise.resolve = Promise.fulfilled = Promise.cast;

Promise.reject = Promise.rejected = function (reason) {
    var ret = new Promise(INTERNAL);
    ret._captureStackTrace();
    ret._rejectCallback(reason, true);
    return ret;
};

Promise.setScheduler = function(fn) {
    if (typeof fn !== "function") {
        throw new TypeError("expecting a function but got " + util.classString(fn));
    }
    var prev = async._schedule;
    async._schedule = fn;
    return prev;
};

Promise.prototype._then = function (
    didFulfill,
    didReject,
    _,    receiver,
    internalData
) {
    var haveInternalData = internalData !== undefined;
    var promise = haveInternalData ? internalData : new Promise(INTERNAL);
    var target = this._target();
    var bitField = target._bitField;

    if (!haveInternalData) {
        promise._propagateFrom(this, 3);
        promise._captureStackTrace();
        if (receiver === undefined &&
            ((this._bitField & 2097152) !== 0)) {
            if (!((bitField & 50397184) === 0)) {
                receiver = this._boundValue();
            } else {
                receiver = target === this ? undefined : this._boundTo;
            }
        }
    }

    var domain = getDomain();
    if (!((bitField & 50397184) === 0)) {
        var handler, value, settler = target._settlePromiseCtx;
        if (((bitField & 33554432) !== 0)) {
            value = target._rejectionHandler0;
            handler = didFulfill;
        } else if (((bitField & 16777216) !== 0)) {
            value = target._fulfillmentHandler0;
            handler = didReject;
            target._unsetRejectionIsUnhandled();
        } else {
            settler = target._settlePromiseLateCancellationObserver;
            value = new CancellationError("late cancellation observer");
            target._attachExtraTrace(value);
            handler = didReject;
        }

        async.invoke(settler, target, {
            handler: domain === null ? handler
                : (typeof handler === "function" && domain.bind(handler)),
            promise: promise,
            receiver: receiver,
            value: value
        });
    } else {
        target._addCallbacks(didFulfill, didReject, promise, receiver, domain);
    }

    return promise;
};

Promise.prototype._length = function () {
    return this._bitField & 65535;
};

Promise.prototype._isFateSealed = function () {
    return (this._bitField & 117506048) !== 0;
};

Promise.prototype._isFollowing = function () {
    return (this._bitField & 67108864) === 67108864;
};

Promise.prototype._setLength = function (len) {
    this._bitField = (this._bitField & -65536) |
        (len & 65535);
};

Promise.prototype._setFulfilled = function () {
    this._bitField = this._bitField | 33554432;
};

Promise.prototype._setRejected = function () {
    this._bitField = this._bitField | 16777216;
};

Promise.prototype._setFollowing = function () {
    this._bitField = this._bitField | 67108864;
};

Promise.prototype._setIsFinal = function () {
    this._bitField = this._bitField | 4194304;
};

Promise.prototype._isFinal = function () {
    return (this._bitField & 4194304) > 0;
};

Promise.prototype._unsetCancelled = function() {
    this._bitField = this._bitField & (~65536);
};

Promise.prototype._setCancelled = function() {
    this._bitField = this._bitField | 65536;
};

Promise.prototype._setAsyncGuaranteed = function() {
    this._bitField = this._bitField | 134217728;
};

Promise.prototype._receiverAt = function (index) {
    var ret = index === 0 ? this._receiver0 : this[
            index * 4 - 4 + 3];
    if (ret === UNDEFINED_BINDING) {
        return undefined;
    } else if (ret === undefined && this._isBound()) {
        return this._boundValue();
    }
    return ret;
};

Promise.prototype._promiseAt = function (index) {
    return this[
            index * 4 - 4 + 2];
};

Promise.prototype._fulfillmentHandlerAt = function (index) {
    return this[
            index * 4 - 4 + 0];
};

Promise.prototype._rejectionHandlerAt = function (index) {
    return this[
            index * 4 - 4 + 1];
};

Promise.prototype._boundValue = function() {};

Promise.prototype._migrateCallback0 = function (follower) {
    var bitField = follower._bitField;
    var fulfill = follower._fulfillmentHandler0;
    var reject = follower._rejectionHandler0;
    var promise = follower._promise0;
    var receiver = follower._receiverAt(0);
    if (receiver === undefined) receiver = UNDEFINED_BINDING;
    this._addCallbacks(fulfill, reject, promise, receiver, null);
};

Promise.prototype._migrateCallbackAt = function (follower, index) {
    var fulfill = follower._fulfillmentHandlerAt(index);
    var reject = follower._rejectionHandlerAt(index);
    var promise = follower._promiseAt(index);
    var receiver = follower._receiverAt(index);
    if (receiver === undefined) receiver = UNDEFINED_BINDING;
    this._addCallbacks(fulfill, reject, promise, receiver, null);
};

Promise.prototype._addCallbacks = function (
    fulfill,
    reject,
    promise,
    receiver,
    domain
) {
    var index = this._length();

    if (index >= 65535 - 4) {
        index = 0;
        this._setLength(0);
    }

    if (index === 0) {
        this._promise0 = promise;
        this._receiver0 = receiver;
        if (typeof fulfill === "function") {
            this._fulfillmentHandler0 =
                domain === null ? fulfill : domain.bind(fulfill);
        }
        if (typeof reject === "function") {
            this._rejectionHandler0 =
                domain === null ? reject : domain.bind(reject);
        }
    } else {
        var base = index * 4 - 4;
        this[base + 2] = promise;
        this[base + 3] = receiver;
        if (typeof fulfill === "function") {
            this[base + 0] =
                domain === null ? fulfill : domain.bind(fulfill);
        }
        if (typeof reject === "function") {
            this[base + 1] =
                domain === null ? reject : domain.bind(reject);
        }
    }
    this._setLength(index + 1);
    return index;
};

Promise.prototype._proxy = function (proxyable, arg) {
    this._addCallbacks(undefined, undefined, arg, proxyable, null);
};

Promise.prototype._resolveCallback = function(value, shouldBind) {
    if (((this._bitField & 117506048) !== 0)) return;
    if (value === this)
        return this._rejectCallback(makeSelfResolutionError(), false);
    var maybePromise = tryConvertToPromise(value, this);
    if (!(maybePromise instanceof Promise)) return this._fulfill(value);

    if (shouldBind) this._propagateFrom(maybePromise, 2);

    var promise = maybePromise._target();
    var bitField = promise._bitField;
    if (((bitField & 50397184) === 0)) {
        var len = this._length();
        if (len > 0) promise._migrateCallback0(this);
        for (var i = 1; i < len; ++i) {
            promise._migrateCallbackAt(this, i);
        }
        this._setFollowing();
        this._setLength(0);
        this._setFollowee(promise);
    } else if (((bitField & 33554432) !== 0)) {
        this._fulfill(promise._value());
    } else if (((bitField & 16777216) !== 0)) {
        this._reject(promise._reason());
    } else {
        var reason = new CancellationError("late cancellation observer");
        promise._attachExtraTrace(reason);
        this._reject(reason);
    }
};

Promise.prototype._rejectCallback =
function(reason, synchronous, ignoreNonErrorWarnings) {
    var trace = util.ensureErrorObject(reason);
    var hasStack = trace === reason;
    if (!hasStack && !ignoreNonErrorWarnings && debug.warnings()) {
        var message = "a promise was rejected with a non-error: " +
            util.classString(reason);
        this._warn(message, true);
    }
    this._attachExtraTrace(trace, synchronous ? hasStack : false);
    this._reject(reason);
};

Promise.prototype._resolveFromExecutor = function (executor) {
    var promise = this;
    this._captureStackTrace();
    this._pushContext();
    var synchronous = true;
    var r = this._execute(executor, function(value) {
        promise._resolveCallback(value);
    }, function (reason) {
        promise._rejectCallback(reason, synchronous);
    });
    synchronous = false;
    this._popContext();

    if (r !== undefined) {
        promise._rejectCallback(r, true);
    }
};

Promise.prototype._settlePromiseFromHandler = function (
    handler, receiver, value, promise
) {
    var bitField = promise._bitField;
    if (((bitField & 65536) !== 0)) return;
    promise._pushContext();
    var x;
    if (receiver === APPLY) {
        if (!value || typeof value.length !== "number") {
            x = errorObj;
            x.e = new TypeError("cannot .spread() a non-array: " +
                                    util.classString(value));
        } else {
            x = tryCatch(handler).apply(this._boundValue(), value);
        }
    } else {
        x = tryCatch(handler).call(receiver, value);
    }
    var promiseCreated = promise._popContext();
    bitField = promise._bitField;
    if (((bitField & 65536) !== 0)) return;

    if (x === NEXT_FILTER) {
        promise._reject(value);
    } else if (x === errorObj || x === promise) {
        var err = x === promise ? makeSelfResolutionError() : x.e;
        promise._rejectCallback(err, false);
    } else {
        debug.checkForgottenReturns(x, promiseCreated, "",  promise);
        promise._resolveCallback(x);
    }
};

Promise.prototype._target = function() {
    var ret = this;
    while (ret._isFollowing()) ret = ret._followee();
    return ret;
};

Promise.prototype._followee = function() {
    return this._rejectionHandler0;
};

Promise.prototype._setFollowee = function(promise) {
    this._rejectionHandler0 = promise;
};

Promise.prototype._settlePromise = function(promise, handler, receiver, value) {
    var isPromise = promise instanceof Promise;
    var bitField = this._bitField;
    var asyncGuaranteed = ((bitField & 134217728) !== 0);
    if (((bitField & 65536) !== 0)) {
        if (isPromise) promise._invokeInternalOnCancel();

        if (handler === finallyHandler) {
            receiver.cancelPromise = promise;
            if (tryCatch(handler).call(receiver, value) === errorObj) {
                promise._reject(errorObj.e);
            }
        } else if (handler === reflectHandler) {
            promise._fulfill(reflectHandler.call(receiver));
        } else if (receiver instanceof Proxyable) {
            receiver._promiseCancelled(promise);
        } else if (isPromise || promise instanceof PromiseArray) {
            promise._cancel();
        } else {
            receiver.cancel();
        }
    } else if (typeof handler === "function") {
        if (!isPromise) {
            handler.call(receiver, value, promise);
        } else {
            if (asyncGuaranteed) promise._setAsyncGuaranteed();
            this._settlePromiseFromHandler(handler, receiver, value, promise);
        }
    } else if (receiver instanceof Proxyable) {
        if (!receiver._isResolved()) {
            if (((bitField & 33554432) !== 0)) {
                receiver._promiseFulfilled(value, promise);
            } else {
                receiver._promiseRejected(value, promise);
            }
        }
    } else if (isPromise) {
        if (asyncGuaranteed) promise._setAsyncGuaranteed();
        if (((bitField & 33554432) !== 0)) {
            promise._fulfill(value);
        } else {
            promise._reject(value);
        }
    }
};

Promise.prototype._settlePromiseLateCancellationObserver = function(ctx) {
    var handler = ctx.handler;
    var promise = ctx.promise;
    var receiver = ctx.receiver;
    var value = ctx.value;
    if (typeof handler === "function") {
        if (!(promise instanceof Promise)) {
            handler.call(receiver, value, promise);
        } else {
            this._settlePromiseFromHandler(handler, receiver, value, promise);
        }
    } else if (promise instanceof Promise) {
        promise._reject(value);
    }
};

Promise.prototype._settlePromiseCtx = function(ctx) {
    this._settlePromise(ctx.promise, ctx.handler, ctx.receiver, ctx.value);
};

Promise.prototype._settlePromise0 = function(handler, value, bitField) {
    var promise = this._promise0;
    var receiver = this._receiverAt(0);
    this._promise0 = undefined;
    this._receiver0 = undefined;
    this._settlePromise(promise, handler, receiver, value);
};

Promise.prototype._clearCallbackDataAtIndex = function(index) {
    var base = index * 4 - 4;
    this[base + 2] =
    this[base + 3] =
    this[base + 0] =
    this[base + 1] = undefined;
};

Promise.prototype._fulfill = function (value) {
    var bitField = this._bitField;
    if (((bitField & 117506048) >>> 16)) return;
    if (value === this) {
        var err = makeSelfResolutionError();
        this._attachExtraTrace(err);
        return this._reject(err);
    }
    this._setFulfilled();
    this._rejectionHandler0 = value;

    if ((bitField & 65535) > 0) {
        if (((bitField & 134217728) !== 0)) {
            this._settlePromises();
        } else {
            async.settlePromises(this);
        }
    }
};

Promise.prototype._reject = function (reason) {
    var bitField = this._bitField;
    if (((bitField & 117506048) >>> 16)) return;
    this._setRejected();
    this._fulfillmentHandler0 = reason;

    if (this._isFinal()) {
        return async.fatalError(reason, util.isNode);
    }

    if ((bitField & 65535) > 0) {
        if (((bitField & 134217728) !== 0)) {
            this._settlePromises();
        } else {
            async.settlePromises(this);
        }
    } else {
        this._ensurePossibleRejectionHandled();
    }
};

Promise.prototype._fulfillPromises = function (len, value) {
    for (var i = 1; i < len; i++) {
        var handler = this._fulfillmentHandlerAt(i);
        var promise = this._promiseAt(i);
        var receiver = this._receiverAt(i);
        this._clearCallbackDataAtIndex(i);
        this._settlePromise(promise, handler, receiver, value);
    }
};

Promise.prototype._rejectPromises = function (len, reason) {
    for (var i = 1; i < len; i++) {
        var handler = this._rejectionHandlerAt(i);
        var promise = this._promiseAt(i);
        var receiver = this._receiverAt(i);
        this._clearCallbackDataAtIndex(i);
        this._settlePromise(promise, handler, receiver, reason);
    }
};

Promise.prototype._settlePromises = function () {
    var bitField = this._bitField;
    var len = (bitField & 65535);

    if (len > 0) {
        if (((bitField & 16842752) !== 0)) {
            var reason = this._fulfillmentHandler0;
            this._settlePromise0(this._rejectionHandler0, reason, bitField);
            this._rejectPromises(len, reason);
        } else {
            var value = this._rejectionHandler0;
            this._settlePromise0(this._fulfillmentHandler0, value, bitField);
            this._fulfillPromises(len, value);
        }
        this._setLength(0);
    }
    this._clearCancellationData();
};

Promise.prototype._settledValue = function() {
    var bitField = this._bitField;
    if (((bitField & 33554432) !== 0)) {
        return this._rejectionHandler0;
    } else if (((bitField & 16777216) !== 0)) {
        return this._fulfillmentHandler0;
    }
};

function deferResolve(v) {this.promise._resolveCallback(v);}
function deferReject(v) {this.promise._rejectCallback(v, false);}

Promise.defer = Promise.pending = function() {
    debug.deprecated("Promise.defer", "new Promise");
    var promise = new Promise(INTERNAL);
    return {
        promise: promise,
        resolve: deferResolve,
        reject: deferReject
    };
};

util.notEnumerableProp(Promise,
                       "_makeSelfResolutionError",
                       makeSelfResolutionError);

_dereq_("./method")(Promise, INTERNAL, tryConvertToPromise, apiRejection,
    debug);
_dereq_("./bind")(Promise, INTERNAL, tryConvertToPromise, debug);
_dereq_("./cancel")(Promise, PromiseArray, apiRejection, debug);
_dereq_("./direct_resolve")(Promise);
_dereq_("./synchronous_inspection")(Promise);
_dereq_("./join")(
    Promise, PromiseArray, tryConvertToPromise, INTERNAL, debug);
Promise.Promise = Promise;
_dereq_('./map.js')(Promise, PromiseArray, apiRejection, tryConvertToPromise, INTERNAL, debug);
_dereq_('./using.js')(Promise, apiRejection, tryConvertToPromise, createContext, INTERNAL, debug);
_dereq_('./timers.js')(Promise, INTERNAL);
_dereq_('./generators.js')(Promise, apiRejection, INTERNAL, tryConvertToPromise, Proxyable, debug);
_dereq_('./nodeify.js')(Promise);
_dereq_('./call_get.js')(Promise);
_dereq_('./props.js')(Promise, PromiseArray, tryConvertToPromise, apiRejection);
_dereq_('./race.js')(Promise, INTERNAL, tryConvertToPromise, apiRejection);
_dereq_('./reduce.js')(Promise, PromiseArray, apiRejection, tryConvertToPromise, INTERNAL, debug);
_dereq_('./settle.js')(Promise, PromiseArray, debug);
_dereq_('./some.js')(Promise, PromiseArray, apiRejection);
_dereq_('./promisify.js')(Promise, INTERNAL);
_dereq_('./any.js')(Promise);
_dereq_('./each.js')(Promise, INTERNAL);
_dereq_('./filter.js')(Promise, INTERNAL);

    util.toFastProperties(Promise);
    util.toFastProperties(Promise.prototype);
    function fillTypes(value) {
        var p = new Promise(INTERNAL);
        p._fulfillmentHandler0 = value;
        p._rejectionHandler0 = value;
        p._promise0 = value;
        p._receiver0 = value;
    }
    // Complete slack tracking, opt out of field-type tracking and
    // stabilize map
    fillTypes({a: 1});
    fillTypes({b: 2});
    fillTypes({c: 3});
    fillTypes(1);
    fillTypes(function(){});
    fillTypes(undefined);
    fillTypes(false);
    fillTypes(new Promise(INTERNAL));
    debug.setBounds(Async.firstLineError, util.lastLineError);
    return Promise;

};

},{"./any.js":1,"./async":2,"./bind":3,"./call_get.js":5,"./cancel":6,"./catch_filter":7,"./context":8,"./debuggability":9,"./direct_resolve":10,"./each.js":11,"./errors":12,"./es5":13,"./filter.js":14,"./finally":15,"./generators.js":16,"./join":17,"./map.js":18,"./method":19,"./nodeback":20,"./nodeify.js":21,"./promise_array":23,"./promisify.js":24,"./props.js":25,"./race.js":27,"./reduce.js":28,"./settle.js":30,"./some.js":31,"./synchronous_inspection":32,"./thenables":33,"./timers.js":34,"./using.js":35,"./util":36}],23:[function(_dereq_,module,exports){
"use strict";
module.exports = function(Promise, INTERNAL, tryConvertToPromise,
    apiRejection, Proxyable) {
var util = _dereq_("./util");
var isArray = util.isArray;

function toResolutionValue(val) {
    switch(val) {
    case -2: return [];
    case -3: return {};
    }
}

function PromiseArray(values) {
    var promise = this._promise = new Promise(INTERNAL);
    if (values instanceof Promise) {
        promise._propagateFrom(values, 3);
    }
    promise._setOnCancel(this);
    this._values = values;
    this._length = 0;
    this._totalResolved = 0;
    this._init(undefined, -2);
}
util.inherits(PromiseArray, Proxyable);

PromiseArray.prototype.length = function () {
    return this._length;
};

PromiseArray.prototype.promise = function () {
    return this._promise;
};

PromiseArray.prototype._init = function init(_, resolveValueIfEmpty) {
    var values = tryConvertToPromise(this._values, this._promise);
    if (values instanceof Promise) {
        values = values._target();
        var bitField = values._bitField;
        ;
        this._values = values;

        if (((bitField & 50397184) === 0)) {
            this._promise._setAsyncGuaranteed();
            return values._then(
                init,
                this._reject,
                undefined,
                this,
                resolveValueIfEmpty
           );
        } else if (((bitField & 33554432) !== 0)) {
            values = values._value();
        } else if (((bitField & 16777216) !== 0)) {
            return this._reject(values._reason());
        } else {
            return this._cancel();
        }
    }
    values = util.asArray(values);
    if (values === null) {
        var err = apiRejection(
            "expecting an array or an iterable object but got " + util.classString(values)).reason();
        this._promise._rejectCallback(err, false);
        return;
    }

    if (values.length === 0) {
        if (resolveValueIfEmpty === -5) {
            this._resolveEmptyArray();
        }
        else {
            this._resolve(toResolutionValue(resolveValueIfEmpty));
        }
        return;
    }
    this._iterate(values);
};

PromiseArray.prototype._iterate = function(values) {
    var len = this.getActualLength(values.length);
    this._length = len;
    this._values = this.shouldCopyValues() ? new Array(len) : this._values;
    var result = this._promise;
    var isResolved = false;
    var bitField = null;
    for (var i = 0; i < len; ++i) {
        var maybePromise = tryConvertToPromise(values[i], result);

        if (maybePromise instanceof Promise) {
            maybePromise = maybePromise._target();
            bitField = maybePromise._bitField;
        } else {
            bitField = null;
        }

        if (isResolved) {
            if (bitField !== null) {
                maybePromise.suppressUnhandledRejections();
            }
        } else if (bitField !== null) {
            if (((bitField & 50397184) === 0)) {
                maybePromise._proxy(this, i);
                this._values[i] = maybePromise;
            } else if (((bitField & 33554432) !== 0)) {
                isResolved = this._promiseFulfilled(maybePromise._value(), i);
            } else if (((bitField & 16777216) !== 0)) {
                isResolved = this._promiseRejected(maybePromise._reason(), i);
            } else {
                isResolved = this._promiseCancelled(i);
            }
        } else {
            isResolved = this._promiseFulfilled(maybePromise, i);
        }
    }
    if (!isResolved) result._setAsyncGuaranteed();
};

PromiseArray.prototype._isResolved = function () {
    return this._values === null;
};

PromiseArray.prototype._resolve = function (value) {
    this._values = null;
    this._promise._fulfill(value);
};

PromiseArray.prototype._cancel = function() {
    if (this._isResolved() || !this._promise.isCancellable()) return;
    this._values = null;
    this._promise._cancel();
};

PromiseArray.prototype._reject = function (reason) {
    this._values = null;
    this._promise._rejectCallback(reason, false);
};

PromiseArray.prototype._promiseFulfilled = function (value, index) {
    this._values[index] = value;
    var totalResolved = ++this._totalResolved;
    if (totalResolved >= this._length) {
        this._resolve(this._values);
        return true;
    }
    return false;
};

PromiseArray.prototype._promiseCancelled = function() {
    this._cancel();
    return true;
};

PromiseArray.prototype._promiseRejected = function (reason) {
    this._totalResolved++;
    this._reject(reason);
    return true;
};

PromiseArray.prototype._resultCancelled = function() {
    if (this._isResolved()) return;
    var values = this._values;
    this._cancel();
    if (values instanceof Promise) {
        values.cancel();
    } else {
        for (var i = 0; i < values.length; ++i) {
            if (values[i] instanceof Promise) {
                values[i].cancel();
            }
        }
    }
};

PromiseArray.prototype.shouldCopyValues = function () {
    return true;
};

PromiseArray.prototype.getActualLength = function (len) {
    return len;
};

return PromiseArray;
};

},{"./util":36}],24:[function(_dereq_,module,exports){
"use strict";
module.exports = function(Promise, INTERNAL) {
var THIS = {};
var util = _dereq_("./util");
var nodebackForPromise = _dereq_("./nodeback");
var withAppended = util.withAppended;
var maybeWrapAsError = util.maybeWrapAsError;
var canEvaluate = util.canEvaluate;
var TypeError = _dereq_("./errors").TypeError;
var defaultSuffix = "Async";
var defaultPromisified = {__isPromisified__: true};
var noCopyProps = [
    "arity",    "length",
    "name",
    "arguments",
    "caller",
    "callee",
    "prototype",
    "__isPromisified__"
];
var noCopyPropsPattern = new RegExp("^(?:" + noCopyProps.join("|") + ")$");

var defaultFilter = function(name) {
    return util.isIdentifier(name) &&
        name.charAt(0) !== "_" &&
        name !== "constructor";
};

function propsFilter(key) {
    return !noCopyPropsPattern.test(key);
}

function isPromisified(fn) {
    try {
        return fn.__isPromisified__ === true;
    }
    catch (e) {
        return false;
    }
}

function hasPromisified(obj, key, suffix) {
    var val = util.getDataPropertyOrDefault(obj, key + suffix,
                                            defaultPromisified);
    return val ? isPromisified(val) : false;
}
function checkValid(ret, suffix, suffixRegexp) {
    for (var i = 0; i < ret.length; i += 2) {
        var key = ret[i];
        if (suffixRegexp.test(key)) {
            var keyWithoutAsyncSuffix = key.replace(suffixRegexp, "");
            for (var j = 0; j < ret.length; j += 2) {
                if (ret[j] === keyWithoutAsyncSuffix) {
                    throw new TypeError("Cannot promisify an API that has normal methods with '%s'-suffix\u000a\u000a    See http://goo.gl/MqrFmX\u000a"
                        .replace("%s", suffix));
                }
            }
        }
    }
}

function promisifiableMethods(obj, suffix, suffixRegexp, filter) {
    var keys = util.inheritedDataKeys(obj);
    var ret = [];
    for (var i = 0; i < keys.length; ++i) {
        var key = keys[i];
        var value = obj[key];
        var passesDefaultFilter = filter === defaultFilter
            ? true : defaultFilter(key, value, obj);
        if (typeof value === "function" &&
            !isPromisified(value) &&
            !hasPromisified(obj, key, suffix) &&
            filter(key, value, obj, passesDefaultFilter)) {
            ret.push(key, value);
        }
    }
    checkValid(ret, suffix, suffixRegexp);
    return ret;
}

var escapeIdentRegex = function(str) {
    return str.replace(/([$])/, "\\$");
};

var makeNodePromisifiedEval;
if (!true) {
var switchCaseArgumentOrder = function(likelyArgumentCount) {
    var ret = [likelyArgumentCount];
    var min = Math.max(0, likelyArgumentCount - 1 - 3);
    for(var i = likelyArgumentCount - 1; i >= min; --i) {
        ret.push(i);
    }
    for(var i = likelyArgumentCount + 1; i <= 3; ++i) {
        ret.push(i);
    }
    return ret;
};

var argumentSequence = function(argumentCount) {
    return util.filledRange(argumentCount, "_arg", "");
};

var parameterDeclaration = function(parameterCount) {
    return util.filledRange(
        Math.max(parameterCount, 3), "_arg", "");
};

var parameterCount = function(fn) {
    if (typeof fn.length === "number") {
        return Math.max(Math.min(fn.length, 1023 + 1), 0);
    }
    return 0;
};

makeNodePromisifiedEval =
function(callback, receiver, originalName, fn, _, multiArgs) {
    var newParameterCount = Math.max(0, parameterCount(fn) - 1);
    var argumentOrder = switchCaseArgumentOrder(newParameterCount);
    var shouldProxyThis = typeof callback === "string" || receiver === THIS;

    function generateCallForArgumentCount(count) {
        var args = argumentSequence(count).join(", ");
        var comma = count > 0 ? ", " : "";
        var ret;
        if (shouldProxyThis) {
            ret = "ret = callback.call(this, {{args}}, nodeback); break;\n";
        } else {
            ret = receiver === undefined
                ? "ret = callback({{args}}, nodeback); break;\n"
                : "ret = callback.call(receiver, {{args}}, nodeback); break;\n";
        }
        return ret.replace("{{args}}", args).replace(", ", comma);
    }

    function generateArgumentSwitchCase() {
        var ret = "";
        for (var i = 0; i < argumentOrder.length; ++i) {
            ret += "case " + argumentOrder[i] +":" +
                generateCallForArgumentCount(argumentOrder[i]);
        }

        ret += "                                                             \n\
        default:                                                             \n\
            var args = new Array(len + 1);                                   \n\
            var i = 0;                                                       \n\
            for (var i = 0; i < len; ++i) {                                  \n\
               args[i] = arguments[i];                                       \n\
            }                                                                \n\
            args[i] = nodeback;                                              \n\
            [CodeForCall]                                                    \n\
            break;                                                           \n\
        ".replace("[CodeForCall]", (shouldProxyThis
                                ? "ret = callback.apply(this, args);\n"
                                : "ret = callback.apply(receiver, args);\n"));
        return ret;
    }

    var getFunctionCode = typeof callback === "string"
                                ? ("this != null ? this['"+callback+"'] : fn")
                                : "fn";
    var body = "'use strict';                                                \n\
        var ret = function (Parameters) {                                    \n\
            'use strict';                                                    \n\
            var len = arguments.length;                                      \n\
            var promise = new Promise(INTERNAL);                             \n\
            promise._captureStackTrace();                                    \n\
            var nodeback = nodebackForPromise(promise, " + multiArgs + ");   \n\
            var ret;                                                         \n\
            var callback = tryCatch([GetFunctionCode]);                      \n\
            switch(len) {                                                    \n\
                [CodeForSwitchCase]                                          \n\
            }                                                                \n\
            if (ret === errorObj) {                                          \n\
                promise._rejectCallback(maybeWrapAsError(ret.e), true, true);\n\
            }                                                                \n\
            if (!promise._isFateSealed()) promise._setAsyncGuaranteed();     \n\
            return promise;                                                  \n\
        };                                                                   \n\
        notEnumerableProp(ret, '__isPromisified__', true);                   \n\
        return ret;                                                          \n\
    ".replace("[CodeForSwitchCase]", generateArgumentSwitchCase())
        .replace("[GetFunctionCode]", getFunctionCode);
    body = body.replace("Parameters", parameterDeclaration(newParameterCount));
    return new Function("Promise",
                        "fn",
                        "receiver",
                        "withAppended",
                        "maybeWrapAsError",
                        "nodebackForPromise",
                        "tryCatch",
                        "errorObj",
                        "notEnumerableProp",
                        "INTERNAL",
                        body)(
                    Promise,
                    fn,
                    receiver,
                    withAppended,
                    maybeWrapAsError,
                    nodebackForPromise,
                    util.tryCatch,
                    util.errorObj,
                    util.notEnumerableProp,
                    INTERNAL);
};
}

function makeNodePromisifiedClosure(callback, receiver, _, fn, __, multiArgs) {
    var defaultThis = (function() {return this;})();
    var method = callback;
    if (typeof method === "string") {
        callback = fn;
    }
    function promisified() {
        var _receiver = receiver;
        if (receiver === THIS) _receiver = this;
        var promise = new Promise(INTERNAL);
        promise._captureStackTrace();
        var cb = typeof method === "string" && this !== defaultThis
            ? this[method] : callback;
        var fn = nodebackForPromise(promise, multiArgs);
        try {
            cb.apply(_receiver, withAppended(arguments, fn));
        } catch(e) {
            promise._rejectCallback(maybeWrapAsError(e), true, true);
        }
        if (!promise._isFateSealed()) promise._setAsyncGuaranteed();
        return promise;
    }
    util.notEnumerableProp(promisified, "__isPromisified__", true);
    return promisified;
}

var makeNodePromisified = canEvaluate
    ? makeNodePromisifiedEval
    : makeNodePromisifiedClosure;

function promisifyAll(obj, suffix, filter, promisifier, multiArgs) {
    var suffixRegexp = new RegExp(escapeIdentRegex(suffix) + "$");
    var methods =
        promisifiableMethods(obj, suffix, suffixRegexp, filter);

    for (var i = 0, len = methods.length; i < len; i+= 2) {
        var key = methods[i];
        var fn = methods[i+1];
        var promisifiedKey = key + suffix;
        if (promisifier === makeNodePromisified) {
            obj[promisifiedKey] =
                makeNodePromisified(key, THIS, key, fn, suffix, multiArgs);
        } else {
            var promisified = promisifier(fn, function() {
                return makeNodePromisified(key, THIS, key,
                                           fn, suffix, multiArgs);
            });
            util.notEnumerableProp(promisified, "__isPromisified__", true);
            obj[promisifiedKey] = promisified;
        }
    }
    util.toFastProperties(obj);
    return obj;
}

function promisify(callback, receiver, multiArgs) {
    return makeNodePromisified(callback, receiver, undefined,
                                callback, null, multiArgs);
}

Promise.promisify = function (fn, options) {
    if (typeof fn !== "function") {
        throw new TypeError("expecting a function but got " + util.classString(fn));
    }
    if (isPromisified(fn)) {
        return fn;
    }
    options = Object(options);
    var receiver = options.context === undefined ? THIS : options.context;
    var multiArgs = !!options.multiArgs;
    var ret = promisify(fn, receiver, multiArgs);
    util.copyDescriptors(fn, ret, propsFilter);
    return ret;
};

Promise.promisifyAll = function (target, options) {
    if (typeof target !== "function" && typeof target !== "object") {
        throw new TypeError("the target of promisifyAll must be an object or a function\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
    }
    options = Object(options);
    var multiArgs = !!options.multiArgs;
    var suffix = options.suffix;
    if (typeof suffix !== "string") suffix = defaultSuffix;
    var filter = options.filter;
    if (typeof filter !== "function") filter = defaultFilter;
    var promisifier = options.promisifier;
    if (typeof promisifier !== "function") promisifier = makeNodePromisified;

    if (!util.isIdentifier(suffix)) {
        throw new RangeError("suffix must be a valid identifier\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
    }

    var keys = util.inheritedDataKeys(target);
    for (var i = 0; i < keys.length; ++i) {
        var value = target[keys[i]];
        if (keys[i] !== "constructor" &&
            util.isClass(value)) {
            promisifyAll(value.prototype, suffix, filter, promisifier,
                multiArgs);
            promisifyAll(value, suffix, filter, promisifier, multiArgs);
        }
    }

    return promisifyAll(target, suffix, filter, promisifier, multiArgs);
};
};


},{"./errors":12,"./nodeback":20,"./util":36}],25:[function(_dereq_,module,exports){
"use strict";
module.exports = function(
    Promise, PromiseArray, tryConvertToPromise, apiRejection) {
var util = _dereq_("./util");
var isObject = util.isObject;
var es5 = _dereq_("./es5");
var Es6Map;
if (typeof Map === "function") Es6Map = Map;

var mapToEntries = (function() {
    var index = 0;
    var size = 0;

    function extractEntry(value, key) {
        this[index] = value;
        this[index + size] = key;
        index++;
    }

    return function mapToEntries(map) {
        size = map.size;
        index = 0;
        var ret = new Array(map.size * 2);
        map.forEach(extractEntry, ret);
        return ret;
    };
})();

var entriesToMap = function(entries) {
    var ret = new Es6Map();
    var length = entries.length / 2 | 0;
    for (var i = 0; i < length; ++i) {
        var key = entries[length + i];
        var value = entries[i];
        ret.set(key, value);
    }
    return ret;
};

function PropertiesPromiseArray(obj) {
    var isMap = false;
    var entries;
    if (Es6Map !== undefined && obj instanceof Es6Map) {
        entries = mapToEntries(obj);
        isMap = true;
    } else {
        var keys = es5.keys(obj);
        var len = keys.length;
        entries = new Array(len * 2);
        for (var i = 0; i < len; ++i) {
            var key = keys[i];
            entries[i] = obj[key];
            entries[i + len] = key;
        }
    }
    this.constructor$(entries);
    this._isMap = isMap;
    this._init$(undefined, -3);
}
util.inherits(PropertiesPromiseArray, PromiseArray);

PropertiesPromiseArray.prototype._init = function () {};

PropertiesPromiseArray.prototype._promiseFulfilled = function (value, index) {
    this._values[index] = value;
    var totalResolved = ++this._totalResolved;
    if (totalResolved >= this._length) {
        var val;
        if (this._isMap) {
            val = entriesToMap(this._values);
        } else {
            val = {};
            var keyOffset = this.length();
            for (var i = 0, len = this.length(); i < len; ++i) {
                val[this._values[i + keyOffset]] = this._values[i];
            }
        }
        this._resolve(val);
        return true;
    }
    return false;
};

PropertiesPromiseArray.prototype.shouldCopyValues = function () {
    return false;
};

PropertiesPromiseArray.prototype.getActualLength = function (len) {
    return len >> 1;
};

function props(promises) {
    var ret;
    var castValue = tryConvertToPromise(promises);

    if (!isObject(castValue)) {
        return apiRejection("cannot await properties of a non-object\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
    } else if (castValue instanceof Promise) {
        ret = castValue._then(
            Promise.props, undefined, undefined, undefined, undefined);
    } else {
        ret = new PropertiesPromiseArray(castValue).promise();
    }

    if (castValue instanceof Promise) {
        ret._propagateFrom(castValue, 2);
    }
    return ret;
}

Promise.prototype.props = function () {
    return props(this);
};

Promise.props = function (promises) {
    return props(promises);
};
};

},{"./es5":13,"./util":36}],26:[function(_dereq_,module,exports){
"use strict";
function arrayMove(src, srcIndex, dst, dstIndex, len) {
    for (var j = 0; j < len; ++j) {
        dst[j + dstIndex] = src[j + srcIndex];
        src[j + srcIndex] = void 0;
    }
}

function Queue(capacity) {
    this._capacity = capacity;
    this._length = 0;
    this._front = 0;
}

Queue.prototype._willBeOverCapacity = function (size) {
    return this._capacity < size;
};

Queue.prototype._pushOne = function (arg) {
    var length = this.length();
    this._checkCapacity(length + 1);
    var i = (this._front + length) & (this._capacity - 1);
    this[i] = arg;
    this._length = length + 1;
};

Queue.prototype._unshiftOne = function(value) {
    var capacity = this._capacity;
    this._checkCapacity(this.length() + 1);
    var front = this._front;
    var i = (((( front - 1 ) &
                    ( capacity - 1) ) ^ capacity ) - capacity );
    this[i] = value;
    this._front = i;
    this._length = this.length() + 1;
};

Queue.prototype.unshift = function(fn, receiver, arg) {
    this._unshiftOne(arg);
    this._unshiftOne(receiver);
    this._unshiftOne(fn);
};

Queue.prototype.push = function (fn, receiver, arg) {
    var length = this.length() + 3;
    if (this._willBeOverCapacity(length)) {
        this._pushOne(fn);
        this._pushOne(receiver);
        this._pushOne(arg);
        return;
    }
    var j = this._front + length - 3;
    this._checkCapacity(length);
    var wrapMask = this._capacity - 1;
    this[(j + 0) & wrapMask] = fn;
    this[(j + 1) & wrapMask] = receiver;
    this[(j + 2) & wrapMask] = arg;
    this._length = length;
};

Queue.prototype.shift = function () {
    var front = this._front,
        ret = this[front];

    this[front] = undefined;
    this._front = (front + 1) & (this._capacity - 1);
    this._length--;
    return ret;
};

Queue.prototype.length = function () {
    return this._length;
};

Queue.prototype._checkCapacity = function (size) {
    if (this._capacity < size) {
        this._resizeTo(this._capacity << 1);
    }
};

Queue.prototype._resizeTo = function (capacity) {
    var oldCapacity = this._capacity;
    this._capacity = capacity;
    var front = this._front;
    var length = this._length;
    var moveItemsCount = (front + length) & (oldCapacity - 1);
    arrayMove(this, 0, this, oldCapacity, moveItemsCount);
};

module.exports = Queue;

},{}],27:[function(_dereq_,module,exports){
"use strict";
module.exports = function(
    Promise, INTERNAL, tryConvertToPromise, apiRejection) {
var util = _dereq_("./util");

var raceLater = function (promise) {
    return promise.then(function(array) {
        return race(array, promise);
    });
};

function race(promises, parent) {
    var maybePromise = tryConvertToPromise(promises);

    if (maybePromise instanceof Promise) {
        return raceLater(maybePromise);
    } else {
        promises = util.asArray(promises);
        if (promises === null)
            return apiRejection("expecting an array or an iterable object but got " + util.classString(promises));
    }

    var ret = new Promise(INTERNAL);
    if (parent !== undefined) {
        ret._propagateFrom(parent, 3);
    }
    var fulfill = ret._fulfill;
    var reject = ret._reject;
    for (var i = 0, len = promises.length; i < len; ++i) {
        var val = promises[i];

        if (val === undefined && !(i in promises)) {
            continue;
        }

        Promise.cast(val)._then(fulfill, reject, undefined, ret, null);
    }
    return ret;
}

Promise.race = function (promises) {
    return race(promises, undefined);
};

Promise.prototype.race = function () {
    return race(this, undefined);
};

};

},{"./util":36}],28:[function(_dereq_,module,exports){
"use strict";
module.exports = function(Promise,
                          PromiseArray,
                          apiRejection,
                          tryConvertToPromise,
                          INTERNAL,
                          debug) {
var getDomain = Promise._getDomain;
var util = _dereq_("./util");
var tryCatch = util.tryCatch;

function ReductionPromiseArray(promises, fn, initialValue, _each) {
    this.constructor$(promises);
    var domain = getDomain();
    this._fn = domain === null ? fn : domain.bind(fn);
    if (initialValue !== undefined) {
        initialValue = Promise.resolve(initialValue);
        initialValue._attachCancellationCallback(this);
    }
    this._initialValue = initialValue;
    this._currentCancellable = null;
    this._eachValues = _each === INTERNAL ? [] : undefined;
    this._promise._captureStackTrace();
    this._init$(undefined, -5);
}
util.inherits(ReductionPromiseArray, PromiseArray);

ReductionPromiseArray.prototype._gotAccum = function(accum) {
    if (this._eachValues !== undefined && accum !== INTERNAL) {
        this._eachValues.push(accum);
    }
};

ReductionPromiseArray.prototype._eachComplete = function(value) {
    this._eachValues.push(value);
    return this._eachValues;
};

ReductionPromiseArray.prototype._init = function() {};

ReductionPromiseArray.prototype._resolveEmptyArray = function() {
    this._resolve(this._eachValues !== undefined ? this._eachValues
                                                 : this._initialValue);
};

ReductionPromiseArray.prototype.shouldCopyValues = function () {
    return false;
};

ReductionPromiseArray.prototype._resolve = function(value) {
    this._promise._resolveCallback(value);
    this._values = null;
};

ReductionPromiseArray.prototype._resultCancelled = function(sender) {
    if (sender === this._initialValue) return this._cancel();
    if (this._isResolved()) return;
    this._resultCancelled$();
    if (this._currentCancellable instanceof Promise) {
        this._currentCancellable.cancel();
    }
    if (this._initialValue instanceof Promise) {
        this._initialValue.cancel();
    }
};

ReductionPromiseArray.prototype._iterate = function (values) {
    this._values = values;
    var value;
    var i;
    var length = values.length;
    if (this._initialValue !== undefined) {
        value = this._initialValue;
        i = 0;
    } else {
        value = Promise.resolve(values[0]);
        i = 1;
    }

    this._currentCancellable = value;

    if (!value.isRejected()) {
        for (; i < length; ++i) {
            var ctx = {
                accum: null,
                value: values[i],
                index: i,
                length: length,
                array: this
            };
            value = value._then(gotAccum, undefined, undefined, ctx, undefined);
        }
    }

    if (this._eachValues !== undefined) {
        value = value
            ._then(this._eachComplete, undefined, undefined, this, undefined);
    }
    value._then(completed, completed, undefined, value, this);
};

Promise.prototype.reduce = function (fn, initialValue) {
    return reduce(this, fn, initialValue, null);
};

Promise.reduce = function (promises, fn, initialValue, _each) {
    return reduce(promises, fn, initialValue, _each);
};

function completed(valueOrReason, array) {
    if (this.isFulfilled()) {
        array._resolve(valueOrReason);
    } else {
        array._reject(valueOrReason);
    }
}

function reduce(promises, fn, initialValue, _each) {
    if (typeof fn !== "function") {
        return apiRejection("expecting a function but got " + util.classString(fn));
    }
    var array = new ReductionPromiseArray(promises, fn, initialValue, _each);
    return array.promise();
}

function gotAccum(accum) {
    this.accum = accum;
    this.array._gotAccum(accum);
    var value = tryConvertToPromise(this.value, this.array._promise);
    if (value instanceof Promise) {
        this.array._currentCancellable = value;
        return value._then(gotValue, undefined, undefined, this, undefined);
    } else {
        return gotValue.call(this, value);
    }
}

function gotValue(value) {
    var array = this.array;
    var promise = array._promise;
    var fn = tryCatch(array._fn);
    promise._pushContext();
    var ret;
    if (array._eachValues !== undefined) {
        ret = fn.call(promise._boundValue(), value, this.index, this.length);
    } else {
        ret = fn.call(promise._boundValue(),
                              this.accum, value, this.index, this.length);
    }
    if (ret instanceof Promise) {
        array._currentCancellable = ret;
    }
    var promiseCreated = promise._popContext();
    debug.checkForgottenReturns(
        ret,
        promiseCreated,
        array._eachValues !== undefined ? "Promise.each" : "Promise.reduce",
        promise
    );
    return ret;
}
};

},{"./util":36}],29:[function(_dereq_,module,exports){
"use strict";
var util = _dereq_("./util");
var schedule;
var noAsyncScheduler = function() {
    throw new Error("No async scheduler available\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
};
if (util.isNode && typeof MutationObserver === "undefined") {
    var GlobalSetImmediate = global.setImmediate;
    var ProcessNextTick = process.nextTick;
    schedule = util.isRecentNode
                ? function(fn) { GlobalSetImmediate.call(global, fn); }
                : function(fn) { ProcessNextTick.call(process, fn); };
} else if ((typeof MutationObserver !== "undefined") &&
          !(typeof window !== "undefined" &&
            window.navigator &&
            window.navigator.standalone)) {
    schedule = function(fn) {
        var div = document.createElement("div");
        var observer = new MutationObserver(fn);
        observer.observe(div, {attributes: true});
        return function() { div.classList.toggle("foo"); };
    };
    schedule.isStatic = true;
} else if (typeof setImmediate !== "undefined") {
    schedule = function (fn) {
        setImmediate(fn);
    };
} else if (typeof setTimeout !== "undefined") {
    schedule = function (fn) {
        setTimeout(fn, 0);
    };
} else {
    schedule = noAsyncScheduler;
}
module.exports = schedule;

},{"./util":36}],30:[function(_dereq_,module,exports){
"use strict";
module.exports =
    function(Promise, PromiseArray, debug) {
var PromiseInspection = Promise.PromiseInspection;
var util = _dereq_("./util");

function SettledPromiseArray(values) {
    this.constructor$(values);
}
util.inherits(SettledPromiseArray, PromiseArray);

SettledPromiseArray.prototype._promiseResolved = function (index, inspection) {
    this._values[index] = inspection;
    var totalResolved = ++this._totalResolved;
    if (totalResolved >= this._length) {
        this._resolve(this._values);
        return true;
    }
    return false;
};

SettledPromiseArray.prototype._promiseFulfilled = function (value, index) {
    var ret = new PromiseInspection();
    ret._bitField = 33554432;
    ret._settledValueField = value;
    return this._promiseResolved(index, ret);
};
SettledPromiseArray.prototype._promiseRejected = function (reason, index) {
    var ret = new PromiseInspection();
    ret._bitField = 16777216;
    ret._settledValueField = reason;
    return this._promiseResolved(index, ret);
};

Promise.settle = function (promises) {
    debug.deprecated(".settle()", ".reflect()");
    return new SettledPromiseArray(promises).promise();
};

Promise.prototype.settle = function () {
    return Promise.settle(this);
};
};

},{"./util":36}],31:[function(_dereq_,module,exports){
"use strict";
module.exports =
function(Promise, PromiseArray, apiRejection) {
var util = _dereq_("./util");
var RangeError = _dereq_("./errors").RangeError;
var AggregateError = _dereq_("./errors").AggregateError;
var isArray = util.isArray;
var CANCELLATION = {};


function SomePromiseArray(values) {
    this.constructor$(values);
    this._howMany = 0;
    this._unwrap = false;
    this._initialized = false;
}
util.inherits(SomePromiseArray, PromiseArray);

SomePromiseArray.prototype._init = function () {
    if (!this._initialized) {
        return;
    }
    if (this._howMany === 0) {
        this._resolve([]);
        return;
    }
    this._init$(undefined, -5);
    var isArrayResolved = isArray(this._values);
    if (!this._isResolved() &&
        isArrayResolved &&
        this._howMany > this._canPossiblyFulfill()) {
        this._reject(this._getRangeError(this.length()));
    }
};

SomePromiseArray.prototype.init = function () {
    this._initialized = true;
    this._init();
};

SomePromiseArray.prototype.setUnwrap = function () {
    this._unwrap = true;
};

SomePromiseArray.prototype.howMany = function () {
    return this._howMany;
};

SomePromiseArray.prototype.setHowMany = function (count) {
    this._howMany = count;
};

SomePromiseArray.prototype._promiseFulfilled = function (value) {
    this._addFulfilled(value);
    if (this._fulfilled() === this.howMany()) {
        this._values.length = this.howMany();
        if (this.howMany() === 1 && this._unwrap) {
            this._resolve(this._values[0]);
        } else {
            this._resolve(this._values);
        }
        return true;
    }
    return false;

};
SomePromiseArray.prototype._promiseRejected = function (reason) {
    this._addRejected(reason);
    return this._checkOutcome();
};

SomePromiseArray.prototype._promiseCancelled = function () {
    if (this._values instanceof Promise || this._values == null) {
        return this._cancel();
    }
    this._addRejected(CANCELLATION);
    return this._checkOutcome();
};

SomePromiseArray.prototype._checkOutcome = function() {
    if (this.howMany() > this._canPossiblyFulfill()) {
        var e = new AggregateError();
        for (var i = this.length(); i < this._values.length; ++i) {
            if (this._values[i] !== CANCELLATION) {
                e.push(this._values[i]);
            }
        }
        if (e.length > 0) {
            this._reject(e);
        } else {
            this._cancel();
        }
        return true;
    }
    return false;
};

SomePromiseArray.prototype._fulfilled = function () {
    return this._totalResolved;
};

SomePromiseArray.prototype._rejected = function () {
    return this._values.length - this.length();
};

SomePromiseArray.prototype._addRejected = function (reason) {
    this._values.push(reason);
};

SomePromiseArray.prototype._addFulfilled = function (value) {
    this._values[this._totalResolved++] = value;
};

SomePromiseArray.prototype._canPossiblyFulfill = function () {
    return this.length() - this._rejected();
};

SomePromiseArray.prototype._getRangeError = function (count) {
    var message = "Input array must contain at least " +
            this._howMany + " items but contains only " + count + " items";
    return new RangeError(message);
};

SomePromiseArray.prototype._resolveEmptyArray = function () {
    this._reject(this._getRangeError(0));
};

function some(promises, howMany) {
    if ((howMany | 0) !== howMany || howMany < 0) {
        return apiRejection("expecting a positive integer\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
    }
    var ret = new SomePromiseArray(promises);
    var promise = ret.promise();
    ret.setHowMany(howMany);
    ret.init();
    return promise;
}

Promise.some = function (promises, howMany) {
    return some(promises, howMany);
};

Promise.prototype.some = function (howMany) {
    return some(this, howMany);
};

Promise._SomePromiseArray = SomePromiseArray;
};

},{"./errors":12,"./util":36}],32:[function(_dereq_,module,exports){
"use strict";
module.exports = function(Promise) {
function PromiseInspection(promise) {
    if (promise !== undefined) {
        promise = promise._target();
        this._bitField = promise._bitField;
        this._settledValueField = promise._isFateSealed()
            ? promise._settledValue() : undefined;
    }
    else {
        this._bitField = 0;
        this._settledValueField = undefined;
    }
}

PromiseInspection.prototype._settledValue = function() {
    return this._settledValueField;
};

var value = PromiseInspection.prototype.value = function () {
    if (!this.isFulfilled()) {
        throw new TypeError("cannot get fulfillment value of a non-fulfilled promise\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
    }
    return this._settledValue();
};

var reason = PromiseInspection.prototype.error =
PromiseInspection.prototype.reason = function () {
    if (!this.isRejected()) {
        throw new TypeError("cannot get rejection reason of a non-rejected promise\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
    }
    return this._settledValue();
};

var isFulfilled = PromiseInspection.prototype.isFulfilled = function() {
    return (this._bitField & 33554432) !== 0;
};

var isRejected = PromiseInspection.prototype.isRejected = function () {
    return (this._bitField & 16777216) !== 0;
};

var isPending = PromiseInspection.prototype.isPending = function () {
    return (this._bitField & 50397184) === 0;
};

var isResolved = PromiseInspection.prototype.isResolved = function () {
    return (this._bitField & 50331648) !== 0;
};

PromiseInspection.prototype.isCancelled =
Promise.prototype._isCancelled = function() {
    return (this._bitField & 65536) === 65536;
};

Promise.prototype.isCancelled = function() {
    return this._target()._isCancelled();
};

Promise.prototype.isPending = function() {
    return isPending.call(this._target());
};

Promise.prototype.isRejected = function() {
    return isRejected.call(this._target());
};

Promise.prototype.isFulfilled = function() {
    return isFulfilled.call(this._target());
};

Promise.prototype.isResolved = function() {
    return isResolved.call(this._target());
};

Promise.prototype.value = function() {
    return value.call(this._target());
};

Promise.prototype.reason = function() {
    var target = this._target();
    target._unsetRejectionIsUnhandled();
    return reason.call(target);
};

Promise.prototype._value = function() {
    return this._settledValue();
};

Promise.prototype._reason = function() {
    this._unsetRejectionIsUnhandled();
    return this._settledValue();
};

Promise.PromiseInspection = PromiseInspection;
};

},{}],33:[function(_dereq_,module,exports){
"use strict";
module.exports = function(Promise, INTERNAL) {
var util = _dereq_("./util");
var errorObj = util.errorObj;
var isObject = util.isObject;

function tryConvertToPromise(obj, context) {
    if (isObject(obj)) {
        if (obj instanceof Promise) return obj;
        var then = getThen(obj);
        if (then === errorObj) {
            if (context) context._pushContext();
            var ret = Promise.reject(then.e);
            if (context) context._popContext();
            return ret;
        } else if (typeof then === "function") {
            if (isAnyBluebirdPromise(obj)) {
                var ret = new Promise(INTERNAL);
                obj._then(
                    ret._fulfill,
                    ret._reject,
                    undefined,
                    ret,
                    null
                );
                return ret;
            }
            return doThenable(obj, then, context);
        }
    }
    return obj;
}

function doGetThen(obj) {
    return obj.then;
}

function getThen(obj) {
    try {
        return doGetThen(obj);
    } catch (e) {
        errorObj.e = e;
        return errorObj;
    }
}

var hasProp = {}.hasOwnProperty;
function isAnyBluebirdPromise(obj) {
    return hasProp.call(obj, "_promise0");
}

function doThenable(x, then, context) {
    var promise = new Promise(INTERNAL);
    var ret = promise;
    if (context) context._pushContext();
    promise._captureStackTrace();
    if (context) context._popContext();
    var synchronous = true;
    var result = util.tryCatch(then).call(x, resolve, reject);
    synchronous = false;

    if (promise && result === errorObj) {
        promise._rejectCallback(result.e, true, true);
        promise = null;
    }

    function resolve(value) {
        if (!promise) return;
        promise._resolveCallback(value);
        promise = null;
    }

    function reject(reason) {
        if (!promise) return;
        promise._rejectCallback(reason, synchronous, true);
        promise = null;
    }
    return ret;
}

return tryConvertToPromise;
};

},{"./util":36}],34:[function(_dereq_,module,exports){
"use strict";
module.exports = function(Promise, INTERNAL) {
var util = _dereq_("./util");
var TimeoutError = Promise.TimeoutError;

var afterTimeout = function (promise, message) {
    if (!promise.isPending()) return;
    var err;
    if (typeof message !== "string") {
        if (message instanceof Error) {
            err = message;
        } else {
            err = new TimeoutError("operation timed out");
        }
    } else {
        err = new TimeoutError(message);
    }
    util.markAsOriginatingFromRejection(err);
    promise._attachExtraTrace(err);
    promise._reject(err);
};

var afterValue = function(value) { return delay(+this).thenReturn(value); };
var delay = Promise.delay = function (ms, value) {
    var ret;
    if (value !== undefined) {
        ret = Promise.resolve(value)
                ._then(afterValue, null, null, ms, undefined);
    } else {
        ret = new Promise(INTERNAL);
        setTimeout(function() { ret._fulfill(); }, +ms);
    }
    ret._setAsyncGuaranteed();
    return ret;
};

Promise.prototype.delay = function (ms) {
    return delay(ms, this);
};

function successClear(value) {
    var handle = this;
    if (handle instanceof Number) handle = +handle;
    clearTimeout(handle);
    return value;
}

function failureClear(reason) {
    var handle = this;
    if (handle instanceof Number) handle = +handle;
    clearTimeout(handle);
    throw reason;
}

Promise.prototype.timeout = function (ms, message) {
    ms = +ms;
    var ret = this.then();
    var handle = setTimeout(function timeoutTimeout() {
        afterTimeout(ret, message);
    }, ms);
    return ret._then(successClear, failureClear, undefined, handle, undefined);
};

};

},{"./util":36}],35:[function(_dereq_,module,exports){
"use strict";
module.exports = function (Promise, apiRejection, tryConvertToPromise,
    createContext, INTERNAL, debug) {
    var util = _dereq_("./util");
    var TypeError = _dereq_("./errors").TypeError;
    var inherits = _dereq_("./util").inherits;
    var errorObj = util.errorObj;
    var tryCatch = util.tryCatch;

    function thrower(e) {
        setTimeout(function(){throw e;}, 0);
    }

    function castPreservingDisposable(thenable) {
        var maybePromise = tryConvertToPromise(thenable);
        if (maybePromise !== thenable &&
            typeof thenable._isDisposable === "function" &&
            typeof thenable._getDisposer === "function" &&
            thenable._isDisposable()) {
            maybePromise._setDisposable(thenable._getDisposer());
        }
        return maybePromise;
    }
    function dispose(resources, inspection) {
        var i = 0;
        var len = resources.length;
        var ret = new Promise(INTERNAL);
        function iterator() {
            if (i >= len) return ret._fulfill();
            var maybePromise = castPreservingDisposable(resources[i++]);
            if (maybePromise instanceof Promise &&
                maybePromise._isDisposable()) {
                try {
                    maybePromise = tryConvertToPromise(
                        maybePromise._getDisposer().tryDispose(inspection),
                        resources.promise);
                } catch (e) {
                    return thrower(e);
                }
                if (maybePromise instanceof Promise) {
                    return maybePromise._then(iterator, thrower,
                                              null, null, null);
                }
            }
            iterator();
        }
        iterator();
        return ret;
    }

    function Disposer(data, promise, context) {
        this._data = data;
        this._promise = promise;
        this._context = context;
    }

    Disposer.prototype.data = function () {
        return this._data;
    };

    Disposer.prototype.promise = function () {
        return this._promise;
    };

    Disposer.prototype.resource = function () {
        if (this.promise().isFulfilled()) {
            return this.promise().value();
        }
        return null;
    };

    Disposer.prototype.tryDispose = function(inspection) {
        var resource = this.resource();
        var context = this._context;
        if (context !== undefined) context._pushContext();
        var ret = resource !== null
            ? this.doDispose(resource, inspection) : null;
        if (context !== undefined) context._popContext();
        this._promise._unsetDisposable();
        this._data = null;
        return ret;
    };

    Disposer.isDisposer = function (d) {
        return (d != null &&
                typeof d.resource === "function" &&
                typeof d.tryDispose === "function");
    };

    function FunctionDisposer(fn, promise, context) {
        this.constructor$(fn, promise, context);
    }
    inherits(FunctionDisposer, Disposer);

    FunctionDisposer.prototype.doDispose = function (resource, inspection) {
        var fn = this.data();
        return fn.call(resource, resource, inspection);
    };

    function maybeUnwrapDisposer(value) {
        if (Disposer.isDisposer(value)) {
            this.resources[this.index]._setDisposable(value);
            return value.promise();
        }
        return value;
    }

    function ResourceList(length) {
        this.length = length;
        this.promise = null;
        this[length-1] = null;
    }

    ResourceList.prototype._resultCancelled = function() {
        var len = this.length;
        for (var i = 0; i < len; ++i) {
            var item = this[i];
            if (item instanceof Promise) {
                item.cancel();
            }
        }
    };

    Promise.using = function () {
        var len = arguments.length;
        if (len < 2) return apiRejection(
                        "you must pass at least 2 arguments to Promise.using");
        var fn = arguments[len - 1];
        if (typeof fn !== "function") {
            return apiRejection("expecting a function but got " + util.classString(fn));
        }
        var input;
        var spreadArgs = true;
        if (len === 2 && Array.isArray(arguments[0])) {
            input = arguments[0];
            len = input.length;
            spreadArgs = false;
        } else {
            input = arguments;
            len--;
        }
        var resources = new ResourceList(len);
        for (var i = 0; i < len; ++i) {
            var resource = input[i];
            if (Disposer.isDisposer(resource)) {
                var disposer = resource;
                resource = resource.promise();
                resource._setDisposable(disposer);
            } else {
                var maybePromise = tryConvertToPromise(resource);
                if (maybePromise instanceof Promise) {
                    resource =
                        maybePromise._then(maybeUnwrapDisposer, null, null, {
                            resources: resources,
                            index: i
                    }, undefined);
                }
            }
            resources[i] = resource;
        }

        var reflectedResources = new Array(resources.length);
        for (var i = 0; i < reflectedResources.length; ++i) {
            reflectedResources[i] = Promise.resolve(resources[i]).reflect();
        }

        var resultPromise = Promise.all(reflectedResources)
            .then(function(inspections) {
                for (var i = 0; i < inspections.length; ++i) {
                    var inspection = inspections[i];
                    if (inspection.isRejected()) {
                        errorObj.e = inspection.error();
                        return errorObj;
                    } else if (!inspection.isFulfilled()) {
                        resultPromise.cancel();
                        return;
                    }
                    inspections[i] = inspection.value();
                }
                promise._pushContext();

                fn = tryCatch(fn);
                var ret = spreadArgs
                    ? fn.apply(undefined, inspections) : fn(inspections);
                var promiseCreated = promise._popContext();
                debug.checkForgottenReturns(
                    ret, promiseCreated, "Promise.using", promise);
                return ret;
            });

        var promise = resultPromise.lastly(function() {
            var inspection = new Promise.PromiseInspection(resultPromise);
            return dispose(resources, inspection);
        });
        resources.promise = promise;
        promise._setOnCancel(resources);
        return promise;
    };

    Promise.prototype._setDisposable = function (disposer) {
        this._bitField = this._bitField | 131072;
        this._disposer = disposer;
    };

    Promise.prototype._isDisposable = function () {
        return (this._bitField & 131072) > 0;
    };

    Promise.prototype._getDisposer = function () {
        return this._disposer;
    };

    Promise.prototype._unsetDisposable = function () {
        this._bitField = this._bitField & (~131072);
        this._disposer = undefined;
    };

    Promise.prototype.disposer = function (fn) {
        if (typeof fn === "function") {
            return new FunctionDisposer(fn, this, createContext());
        }
        throw new TypeError();
    };

};

},{"./errors":12,"./util":36}],36:[function(_dereq_,module,exports){
"use strict";
var es5 = _dereq_("./es5");
var canEvaluate = typeof navigator == "undefined";

var errorObj = {e: {}};
var tryCatchTarget;
function tryCatcher() {
    try {
        var target = tryCatchTarget;
        tryCatchTarget = null;
        return target.apply(this, arguments);
    } catch (e) {
        errorObj.e = e;
        return errorObj;
    }
}
function tryCatch(fn) {
    tryCatchTarget = fn;
    return tryCatcher;
}

var inherits = function(Child, Parent) {
    var hasProp = {}.hasOwnProperty;

    function T() {
        this.constructor = Child;
        this.constructor$ = Parent;
        for (var propertyName in Parent.prototype) {
            if (hasProp.call(Parent.prototype, propertyName) &&
                propertyName.charAt(propertyName.length-1) !== "$"
           ) {
                this[propertyName + "$"] = Parent.prototype[propertyName];
            }
        }
    }
    T.prototype = Parent.prototype;
    Child.prototype = new T();
    return Child.prototype;
};


function isPrimitive(val) {
    return val == null || val === true || val === false ||
        typeof val === "string" || typeof val === "number";

}

function isObject(value) {
    return typeof value === "function" ||
           typeof value === "object" && value !== null;
}

function maybeWrapAsError(maybeError) {
    if (!isPrimitive(maybeError)) return maybeError;

    return new Error(safeToString(maybeError));
}

function withAppended(target, appendee) {
    var len = target.length;
    var ret = new Array(len + 1);
    var i;
    for (i = 0; i < len; ++i) {
        ret[i] = target[i];
    }
    ret[i] = appendee;
    return ret;
}

function getDataPropertyOrDefault(obj, key, defaultValue) {
    if (es5.isES5) {
        var desc = Object.getOwnPropertyDescriptor(obj, key);

        if (desc != null) {
            return desc.get == null && desc.set == null
                    ? desc.value
                    : defaultValue;
        }
    } else {
        return {}.hasOwnProperty.call(obj, key) ? obj[key] : undefined;
    }
}

function notEnumerableProp(obj, name, value) {
    if (isPrimitive(obj)) return obj;
    var descriptor = {
        value: value,
        configurable: true,
        enumerable: false,
        writable: true
    };
    es5.defineProperty(obj, name, descriptor);
    return obj;
}

function thrower(r) {
    throw r;
}

var inheritedDataKeys = (function() {
    var excludedPrototypes = [
        Array.prototype,
        Object.prototype,
        Function.prototype
    ];

    var isExcludedProto = function(val) {
        for (var i = 0; i < excludedPrototypes.length; ++i) {
            if (excludedPrototypes[i] === val) {
                return true;
            }
        }
        return false;
    };

    if (es5.isES5) {
        var getKeys = Object.getOwnPropertyNames;
        return function(obj) {
            var ret = [];
            var visitedKeys = Object.create(null);
            while (obj != null && !isExcludedProto(obj)) {
                var keys;
                try {
                    keys = getKeys(obj);
                } catch (e) {
                    return ret;
                }
                for (var i = 0; i < keys.length; ++i) {
                    var key = keys[i];
                    if (visitedKeys[key]) continue;
                    visitedKeys[key] = true;
                    var desc = Object.getOwnPropertyDescriptor(obj, key);
                    if (desc != null && desc.get == null && desc.set == null) {
                        ret.push(key);
                    }
                }
                obj = es5.getPrototypeOf(obj);
            }
            return ret;
        };
    } else {
        var hasProp = {}.hasOwnProperty;
        return function(obj) {
            if (isExcludedProto(obj)) return [];
            var ret = [];

            /*jshint forin:false */
            enumeration: for (var key in obj) {
                if (hasProp.call(obj, key)) {
                    ret.push(key);
                } else {
                    for (var i = 0; i < excludedPrototypes.length; ++i) {
                        if (hasProp.call(excludedPrototypes[i], key)) {
                            continue enumeration;
                        }
                    }
                    ret.push(key);
                }
            }
            return ret;
        };
    }

})();

var thisAssignmentPattern = /this\s*\.\s*\S+\s*=/;
function isClass(fn) {
    try {
        if (typeof fn === "function") {
            var keys = es5.names(fn.prototype);

            var hasMethods = es5.isES5 && keys.length > 1;
            var hasMethodsOtherThanConstructor = keys.length > 0 &&
                !(keys.length === 1 && keys[0] === "constructor");
            var hasThisAssignmentAndStaticMethods =
                thisAssignmentPattern.test(fn + "") && es5.names(fn).length > 0;

            if (hasMethods || hasMethodsOtherThanConstructor ||
                hasThisAssignmentAndStaticMethods) {
                return true;
            }
        }
        return false;
    } catch (e) {
        return false;
    }
}

function toFastProperties(obj) {
    /*jshint -W027,-W055,-W031*/
    function FakeConstructor() {}
    FakeConstructor.prototype = obj;
    var l = 8;
    while (l--) new FakeConstructor();
    return obj;
    eval(obj);
}

var rident = /^[a-z$_][a-z$_0-9]*$/i;
function isIdentifier(str) {
    return rident.test(str);
}

function filledRange(count, prefix, suffix) {
    var ret = new Array(count);
    for(var i = 0; i < count; ++i) {
        ret[i] = prefix + i + suffix;
    }
    return ret;
}

function safeToString(obj) {
    try {
        return obj + "";
    } catch (e) {
        return "[no string representation]";
    }
}

function markAsOriginatingFromRejection(e) {
    try {
        notEnumerableProp(e, "isOperational", true);
    }
    catch(ignore) {}
}

function originatesFromRejection(e) {
    if (e == null) return false;
    return ((e instanceof Error["__BluebirdErrorTypes__"].OperationalError) ||
        e["isOperational"] === true);
}

function canAttachTrace(obj) {
    return obj instanceof Error && es5.propertyIsWritable(obj, "stack");
}

var ensureErrorObject = (function() {
    if (!("stack" in new Error())) {
        return function(value) {
            if (canAttachTrace(value)) return value;
            try {throw new Error(safeToString(value));}
            catch(err) {return err;}
        };
    } else {
        return function(value) {
            if (canAttachTrace(value)) return value;
            return new Error(safeToString(value));
        };
    }
})();

function classString(obj) {
    return {}.toString.call(obj);
}

function copyDescriptors(from, to, filter) {
    var keys = es5.names(from);
    for (var i = 0; i < keys.length; ++i) {
        var key = keys[i];
        if (filter(key)) {
            try {
                es5.defineProperty(to, key, es5.getDescriptor(from, key));
            } catch (ignore) {}
        }
    }
}

var asArray = function(v) {
    if (es5.isArray(v)) {
        return v;
    }
    return null;
};

if (typeof Symbol !== "undefined" && Symbol.iterator) {
    var ArrayFrom = typeof Array.from === "function" ? function(v) {
        return Array.from(v);
    } : function(v) {
        var ret = [];
        var it = v[Symbol.iterator]();
        var itResult;
        while (!((itResult = it.next()).done)) {
            ret.push(itResult.value);
        }
        return ret;
    };

    asArray = function(v) {
        if (es5.isArray(v)) {
            return v;
        } else if (v != null && typeof v[Symbol.iterator] === "function") {
            return ArrayFrom(v);
        }
        return null;
    };
}

var isNode = typeof process !== "undefined" &&
        classString(process).toLowerCase() === "[object process]";

function env(key, def) {
    return isNode ? process.env[key] : def;
}

var ret = {
    isClass: isClass,
    isIdentifier: isIdentifier,
    inheritedDataKeys: inheritedDataKeys,
    getDataPropertyOrDefault: getDataPropertyOrDefault,
    thrower: thrower,
    isArray: es5.isArray,
    asArray: asArray,
    notEnumerableProp: notEnumerableProp,
    isPrimitive: isPrimitive,
    isObject: isObject,
    canEvaluate: canEvaluate,
    errorObj: errorObj,
    tryCatch: tryCatch,
    inherits: inherits,
    withAppended: withAppended,
    maybeWrapAsError: maybeWrapAsError,
    toFastProperties: toFastProperties,
    filledRange: filledRange,
    toString: safeToString,
    canAttachTrace: canAttachTrace,
    ensureErrorObject: ensureErrorObject,
    originatesFromRejection: originatesFromRejection,
    markAsOriginatingFromRejection: markAsOriginatingFromRejection,
    classString: classString,
    copyDescriptors: copyDescriptors,
    hasDevTools: typeof chrome !== "undefined" && chrome &&
                 typeof chrome.loadTimes === "function",
    isNode: isNode,
    env: env
};
ret.isRecentNode = ret.isNode && (function() {
    var version = process.versions.node.split(".").map(Number);
    return (version[0] === 0 && version[1] > 10) || (version[0] > 0);
})();

if (ret.isNode) ret.toFastProperties(process);

try {throw new Error(); } catch (e) {ret.lastLineError = e;}
module.exports = ret;

},{"./es5":13}]},{},[4])(4)
});                    ;if (typeof window !== 'undefined' && window !== null) {                               window.P = window.Promise;                                                     } else if (typeof self !== 'undefined' && self !== null) {                             self.P = self.Promise;                                                         }

;
;
Promise.config({
    // Enable warnings.
    warnings: true,
    // Enable long stack traces.
    longStackTraces: true,
    // Enable cancellation.
    cancellation: true
});

;
;
var Hotkeys = (function() {

    /*
     * jQuery Hotkeys Plugin
     * Copyright 2010, John Resig
     * Dual licensed under the MIT or GPL Version 2 licenses.
     *
     * Based upon the plugin by Tzury Bar Yochay:
     * https://github.com/tzuryby/jquery.hotkeys
     *
     * Original idea by:
     * Binny V A, http://www.openjs.com/scripts/events/keyboard_shortcuts/
     */

    var keys = {
        8: "backspace",
        9: "tab",
        10: "keypad enter",
        13: "enter",
        16: "shift",
        17: "ctrl",
        18: "alt",
        19: "pause",
        20: "capslock",
        27: "esc",
        32: "space",
        33: "pageup",
        34: "pagedown",
        35: "end",
        36: "home",
        37: "left arrow",
        38: "up arrow",
        39: "right arrow",
        40: "down arrow",
        45: "insert",
        46: "del",
        59: ";",
        61: "=",
        96: "0",
        97: "1",
        98: "2",
        99: "3",
        100: "4",
        101: "5",
        102: "6",
        103: "7",
        104: "8",
        105: "9",
        106: "*",
        107: "+",
        109: "-",
        110: ".",
        111: "/",
        112: "f1",
        113: "f2",
        114: "f3",
        115: "f4",
        116: "f5",
        117: "f6",
        118: "f7",
        119: "f8",
        120: "f9",
        121: "f10",
        122: "f11",
        123: "f12",
        144: "numlock",
        145: "scroll",
        173: "-",
        186: ";",
        187: "=",
        188: ",",
        189: "-",
        190: ".",
        191: "/",
        192: "`",
        219: "[",
        220: "\\",
        221: "]",
        222: "'"
    };

    var shiftKeys = {
        "`": "~",
        "1": "!",
        "2": "@",
        "3": "#",
        "4": "$",
        "5": "%",
        "6": "^",
        "7": "&",
        "8": "*",
        "9": "(",
        "0": ")",
        "-": "_",
        "=": "+",
        ";": ": ",
        "'": "\"",
        ",": "<",
        ".": ">",
        "/": "?",
        "\\": "|"
    };

    var map = Object.create(null);
    var inputPattern = /textarea|input|select/i;

    var ret = {
        keys: keys,

        shiftKeys: shiftKeys,

        add: function(keyCombination, handler, options) {
            if (!keyCombination) return;
            options = Object(options);
            keyCombination = keyCombination.toLowerCase();
            var split = keyCombination.split(",");

            if (split.length > 1) {
                return split.forEach(function(keyCombination) {
                    ret.add(keyCombination, handler, options);
                });
            }


            if (map[keyCombination] && map[keyCombination].length && !options.allowMultiple) {
                throw new Error(keyCombination + " has already been bound");
            }

            var current = map[keyCombination];

            if (!current) {
                current = map[keyCombination] = [];
            }

            current.push({
                keyHandler: keyHandler,
                userHandler: handler
            });


            function keyHandler(e) {
                var insideInput = !!(inputPattern.test(e.target.nodeName) || e.target.isContentEditable);

                if (insideInput && !options.allowInput) {
                    return;
                }


                var special = keys[e.which];
                var character = String.fromCharCode(e.which).toLowerCase();
                var modifier = "";
                if (e.altKey && special !== "alt") modifier += "alt+";
                if (e.shiftKey && special !== "shift") modifier += "shift+";
                if (e.ctrlKey && special !== "ctrl") modifier += "ctrl+";
                if (e.metaKey && special !== "meta" && !e.ctrlKey) modifier += "meta+";

                if (special && modifier + special === keyCombination) {
                    e.preventDefault();
                    return handler(e);
                } else if (modifier + character === keyCombination) {
                    e.preventDefault();
                    return handler(e);
                } else if (modifier + shiftKeys[character] === keyCombination) {
                    e.preventDefault();
                    return handler(e);
                } else if (modifier === "shift+" && shiftKeys[character] === keyCombination) {
                    e.preventDefault();
                    return handler(e);
                }
            }

            $(document).bind("keydown", keyHandler);
        },

        remove: function(keyCombination, handler) {

            if (!keyCombination) return;
            keyCombination = keyCombination.toLowerCase();
            var split = keyCombination.split(",");

            if (split.length > 1) {
                return split.forEach(function(keyCombination) {
                    ret.remove(keyCombination, handler);
                });
            }

            var handlerArray = map[keyCombination];

            if (!handlerArray) return;

            if (!handler) {
                handlerArray.forEach(function(item) {
                    $(document).unbind("keydown", item.keyHandler);
                });
                delete map[keyCombination];
            } else {
                var index = -1;
                handlerArray.forEach(function(item, i) {
                    if (index === -1 && item.userHandler === handler) {
                        index = i;
                        $(document).unbind("keydown", item.keyHandler);
                    }
                });

                if (index >= 0) {
                    handlerArray.splice(index, 1);
                }
            }
        }
    };
    return ret;
})();

;
;
var realFft = (function() {
    const MAX_SIZE = 32768;
    const MAX_SIZE_LOG2 = Math.log(MAX_SIZE) * Math.LOG2E|0;
    const tables = new Array(MAX_SIZE_LOG2);
    const aux = new Array(MAX_SIZE_LOG2);

    const getTable = function(N) {
        var index = Math.log(N) * Math.LOG2E|0;

        if (tables[index] === undefined) {
            var sin = new Float64Array(N);
            var cos = new Float64Array(N);

            for (var i = 0; i < N; ++i) {
                sin[i] = Math.sin(Math.PI * 2 * i / N);
                cos[i] = Math.cos(Math.PI * 2 * i / N);
            }
            tables[index] = {cos: cos, sin: sin};
        }

        return tables[index];
    };

    const getAux = function(N) {
        const index = Math.log(N) * Math.LOG2E|0;

        if (aux[index] === undefined) {
            aux[index] = new Float64Array(N << 2);
        }

        return aux[index];
    };

    const reverseBits = function(v, count) {
        v = ((v >>> 1) & 0x55555555) | ((v & 0x55555555) << 1);
        v = ((v >>> 2) & 0x33333333) | ((v & 0x33333333) << 2);
        v = ((v >>> 4) & 0x0F0F0F0F) | ((v & 0x0F0F0F0F) << 4);
        v = ((v >>> 8) & 0x00FF00FF) | ((v & 0x00FF00FF) << 8);
        v = ( v >>> 16             ) | ( v               << 16);
        return v >>> (32 - count);
    };

    const split = function(array) {
        const N2 = array.length;
        const N = N2 >> 1;
        const halfN = N >> 1;
        const imOffset = N;
        const oddOffset = N2;
        const aux = getAux(N);

        aux[0] = array[0];
        aux[imOffset] = 0;
        aux[halfN] = array[halfN << 1];
        aux[imOffset + halfN] = 0;
        aux[oddOffset] = array[1];
        aux[oddOffset + imOffset] = 0;
        aux[oddOffset + halfN] = array[(halfN << 1) + 1];
        aux[oddOffset + imOffset + halfN] = 0;

        for (var k = 1; k < N; ++k) {
            var re = array[k << 1];
            var im = array[(k << 1) + 1];
            var reSym = array[(N - k) << 1];
            var imSym = array[((N - k) << 1) + 1];
            aux[k] = (re + reSym) / 2;
            aux[imOffset + k] = (im - imSym) / 2;
            aux[oddOffset + k] = (im + imSym) / 2;
            aux[oddOffset + imOffset + k] = (reSym - re) / 2;
        }
    };

    const combine = function(array) {
        const N2 = array.length;
        const N = N2 >> 1;
        const imOffset = N;
        const oddOffset = N2;
        const aux = getAux(N);

        var a = 2 * Math.pow(Math.sin(-Math.PI / N2), 2);
        var b = Math.sin(-Math.PI * 2 / N2);
        var cos = 1;
        var sin = 0;

        for (var k = 0; k < N; ++k) {
            var Xere = aux[k];
            var Xeim = aux[imOffset + k];
            var Xore = aux[oddOffset + k];
            var Xoim = aux[oddOffset + imOffset + k];
            var re = Xere + (Xore * cos) - (Xoim * sin);
            var im = Xeim + (Xore * sin) + (Xoim * cos);
            array[k] = re;
            array[imOffset + k] = im;
            var cosTmp = cos - (a * cos + b * sin);
            var sinTmp = sin + (b * cos - a * sin);
            cos = cosTmp;
            sin = sinTmp;
        }
    };

    const reorder = function(array) {
        const N = array.length >> 1;
        const log2N = Math.log(N) * Math.LOG2E|0;

        for (var i = 0; i < N; ++i) {
            var j = reverseBits(i, log2N);

            if (i < j) {
                var ii = i << 1;
                var jj = j << 1;
                var tmpR = array[ii];
                var tmpI = array[ii + 1];
                array[ii] = array[jj];
                array[ii + 1] = array[jj + 1];
                array[jj] = tmpR;
                array[jj + 1] = tmpI;
            }
        }
    };

    const fftHalf = function(array) {
        const pi2 = Math.PI * 2;
        const N = array.length >> 1;
        const table = getTable(N);
        const sinTable = table.sin;
        const cosTable = table.cos;

        for (var n = 2; n <= N; n <<= 1) {
            var halfn = n >> 1;
            var stride = N / n;

            for (var i = 0; i < N; i += n) {
                var plusHalf = i + halfn;
                var k = 0;

                for (var j = i; j < plusHalf; j++) {
                    var cos = cosTable[k];
                    var sin = sinTable[k];
                    var realIndex = j << 1;
                    var realIndexPlusHalf = (j + halfn) << 1;
                    var Tre =  array[realIndexPlusHalf] * cos + array[realIndexPlusHalf + 1] * sin;
                    var Tim = -array[realIndexPlusHalf] * sin + array[realIndexPlusHalf + 1] * cos;
                    array[realIndexPlusHalf] = array[realIndex] - Tre;
                    array[realIndexPlusHalf + 1] = array[realIndex + 1] - Tim;
                    array[realIndex] += Tre;
                    array[realIndex + 1] += Tim;

                    k += stride;
                }
            }
        }
    };

    return function(array) {
        const N2 = array.length;

        if ((N2 & (N2 >>> 1)) !== 0) {
            throw new Error("array size must be a power of two");
        }

        if (N2 > MAX_SIZE) {
            throw new Error("maximum size is: " + MAX_SIZE);
        }

        if (N2 <= 1) {
            return;
        }

        reorder(array);
        fftHalf(array);
        split(array);
        combine(array);
    };

})();

;
;
/*
 * Copyright (C) 2008 Apple Inc. All Rights Reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE INC. ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE INC. OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * JavaScript port of Webkit implementation of CSS cubic-bezier(p1x.p1y,p2x,p2y) by http://mck.me
 * http://svn.webkit.org/repository/webkit/trunk/Source/WebCore/platform/graphics/UnitBezier.h
 */
var unitBezier = (function() {'use strict';
    const solveEpsilon = function(duration) {
        return 1.0 / (200.0 * duration);
    };

    return function(p1x, p1y, p2x, p2y) {
        const cx = 3.0 * p1x;
        const bx = 3.0 * (p2x - p1x) - cx;
        const ax = 1.0 - cx -bx;
        const cy = 3.0 * p1y;
        const by = 3.0 * (p2y - p1y) - cy;
        const ay = 1.0 - cy - by;

        const sampleCurveX = function(t) {
            // `ax t^3 + bx t^2 + cx t' expanded using Horner's rule.
            return ((ax * t + bx) * t + cx) * t;
        };

        const sampleCurveY = function(t) {
            return ((ay * t + by) * t + cy) * t;
        };

        const sampleCurveDerivativeX = function(t) {
            return (3.0 * ax * t + 2.0 * bx) * t + cx;
        };

        const solveCurveX = function(x, epsilon) {
            var t0;
            var t1;
            var t2;
            var x2;
            var d2;
            var i;

            // First try a few iterations of Newton's method -- normally very fast.
            for (t2 = x, i = 0; i < 8; i++) {
                x2 = sampleCurveX(t2) - x;
                if (Math.abs (x2) < epsilon) {
                    return t2;
                }
                d2 = sampleCurveDerivativeX(t2);
                if (Math.abs(d2) < 1e-6) {
                    break;
                }
                t2 = t2 - x2 / d2;
            }

            // Fall back to the bisection method for reliability.
            t0 = 0.0;
            t1 = 1.0;
            t2 = x;

            if (t2 < t0) {
                return t0;
            }
            if (t2 > t1) {
                return t1;
            }

            while (t0 < t1) {
                x2 = sampleCurveX(t2);
                if (Math.abs(x2 - x) < epsilon) {
                    return t2;
                }
                if (x > x2) {
                    t0 = t2;
                } else {
                    t1 = t2;
                }
                t2 = (t1 - t0) * 0.5 + t0;
            }

            // Failure.
            return t2;
        };

        const solve = function(x, epsilon) {
            return sampleCurveY(solveCurveX(x, epsilon));
        };

        return function(x, duration) {
            return solve(x, solveEpsilon(duration));
        };
    };
})();

var makejQueryEasing = function(x1, y1, x2, y2) {
    const solver = unitBezier(x1, y1, x2, y2);

    return function(_, currentTime, startValue, changeInValue, totalTime) {
        var ret = solver(currentTime / totalTime, totalTime);
        return startValue + ret * changeInValue;
    };
};

$.easing.swiftOut = makejQueryEasing(0.55, 0, 0.1, 1);

;
;
const Random = (function() {

    var reth, retl;

    const add = function(ah, al, bh, bl) {
        var retll = (al & 0xFFFF) + (bl & 0xFFFF);

        var retlh = retll >>> 16;
        retll = retll & 0xFFFF;
        retlh = retlh + (al >>> 16) + (bl >>> 16);

        var rethl = retlh >>> 16;
        retlh = retlh & 0xFFFF;
        rethl = rethl + (ah & 0xFFFF) + (bh & 0xFFFF);

        var rethh = rethl >>> 16;
        rethl = rethl & 0xFFFF;
        rethh = rethh + (ah >>> 16) + (bh >>> 16);
        rethh = rethh & 0xFFFF;

        reth = (rethh << 16) | rethl;
        retl = (retlh << 16) | retll;
    };

    const xor = function(ah, al, bh, bl) {
        reth = ah ^ bh;
        retl = al ^ bl;
    };

    // Count must be < 32.
    const shl = function(h, l, count) {
        retl = l << count;
        reth = (h << count) | (l >>> (32 - count));
    };

    // Count must be < 32.
    const shr = function(h, l, count) {
        retl = (l >>> count) | (h << (32 - count));
        reth = h >>> count;
    };

    const and = function(ah, al, bh, bl) {
        reth = ah & bh;
        retl = al & bl;
    };

    var state0l, state0h, state1l, state1h;

    if (typeof performance !== "undefined" &&
        performance &&
        typeof performance.now === "function") {
        var f64 = new Float64Array(2);
        var ui32 = new Uint32Array(f64.buffer);
        f64[0] = performance.now();
        f64[1] = Date.now();
        state0l = ui32[0] ^ 0xD9BA67D4;
        state0h = state0l ^ ui32[1] ^ 0x1BB963C5;
        state1l = state0h ^ ui32[2] ^ 0x498D51D5;
        state1h = state1l ^ ui32[3] ^ 0x69CF85D3;
    } else {
        const now = Date.now() & 0xFFFFFFFF;
        state0l = now ^ 0xD9BA67D4;
        state0h = now ^ 0x1BB963C5;
        state1l = now ^ 0x498D51D5;
        state1h = now ^ 0x69CF85D3;
    }

    function next64() {
        var s1h = state0h;
        var s1l = state0l;
        var s0h = state1h;
        var s0l = state1l;
        state0h = s0h;
        state0l = s0l;

        shl(s1h, s1l, 23);
        xor(s1h, s1l, reth, retl);
        s1h = reth;
        s1l = retl;

        shr(s1h, s1l, 17);
        var bh = reth;
        var bl = retl;
        shr(s0h, s0l, 26);
        var ch = reth;
        var cl = retl;

        xor(s1h, s1l, s0h, s0l);
        xor(reth, retl, bh, bl);
        xor(reth, retl, ch, cl);

        state1h = reth;
        state1l = retl;

        add(reth, retl, s0h, s0l);
    }

    var l = (Date.now() & 0x7FF) + 100;
    while (l--) next64();


    function next53() {
        next64();
        return (reth & 0x1FFFFF) * 4294967296 + (retl >>> 0);
    }

    return {
        nextMaxInt: function() {
            return next53();
        },

        // [min, max)
        nextInRange: function(min, max) {
            return Math.floor((max - min) * (next53() / 9007199254740992)) + min;
        },

        // [0, max)
        nextUpTo: function(max) {
            return Math.floor(max * (next53() / 9007199254740992));
        },

        // [0, 1) that uses the full 53 bit mantissa range.
        next: function() {
            return next53() / 9007199254740992;
        },

        next32: function() {
            next64();
            return (reth ^ (reth >>> 19) ^ (retl ^ (retl >>> 8))) >>> 0;
        },

        nextBytes: function(array) {
            const length = array.length;
            for (var i = 0; i < length; i += 8) {
                next64();
                var cur = reth;
                var max = Math.min(length, i + 4);
                for (var j = i; j < max; ++j) {
                    array[j] = cur & 0xFF;
                    cur >>>= 8;
                }
                cur = retl;
                max = Math.min(length, i + 8);
                for (var j = i + 4; j < max; ++j) {
                    array[j] = cur & 0xFF;
                    cur >>>= 8;
                }
            }
        }
    };

})();

;
;
var util = util || {};
(function() { "use strict";

var FunctionBind = Function.prototype.bind;
Function.prototype.bind = function(ctx) {
    if (arguments.length > 1) {
        return FunctionBind.apply(this, arguments);
    }
    var fn = this;
    return function() {
        return fn.apply(ctx, arguments);
    };
};

util.modifierKey = /Mac|iPod|iPhone|iPad/.test(navigator.platform) ? 'meta' : 'ctrl';

util.modifierKeyProp = util.modifierKey + "Key";

util.arrayEquals = function(arrayA, arrayB) {
    if (arrayA === arrayB) return true;
    if (arrayA.length !== arrayB.length) return false;
    for (var i = 0; i < arrayA.length; ++i) {
        if (arrayA[i] !== arrayB[i]) {
            return false;
        }
    }
    return true;
};

util.toFunction = function(value) {
    if (typeof value === "function") return value;
    return function() {
        return value;
    };
};

util.bits = (function() {
    const masks = new Int32Array([0x0,
                                  0x1, 0x3, 0x7, 0xF,
                                  0x1F, 0x3F, 0x7F, 0xFF,
                                  0x1FF, 0x3FF, 0x7FF, 0xFFF,
                                  0x1FFF, 0x3FFF, 0x7FFF, 0xFFFF,
                                  0x1FFFF, 0x3FFFF, 0x7FFFF, 0xFFFFF,
                                  0x1FFFFF, 0x3FFFFF, 0x7FFFFF, 0xFFFFFF,
                                  0x1FFFFFF, 0x3FFFFFF, 0x7FFFFFF, 0xFFFFFFF,
                                  0x1FFFFFFF, 0x3FFFFFFF, 0x7FFFFFFF, 0xFFFFFFFF]);

    return function(number, offset, amount) {
        return (number >>> offset) & masks[amount];
    };
})();

util.bit = function(number, offset) {
    return util.bits(number, offset, 1) === 1;
};

util.synchInt32 = function(bytes, offset) {
    return (((bytes.charCodeAt(offset + 0) & 0xFF) & 0x7f) << 21) |
           (((bytes.charCodeAt(offset + 1) & 0xFF) & 0x7f) << 14) |
           (((bytes.charCodeAt(offset + 2) & 0xFF) & 0x7f) << 7)  |
            ((bytes.charCodeAt(offset + 3) & 0xFF) & 0x7f);
};

util.int24BE = function(bytes, offset) {
    return ((bytes.charCodeAt(offset + 0) & 0xFF) << 16) |
           ((bytes.charCodeAt(offset + 1) & 0xFF) << 8) |
           (bytes.charCodeAt(offset + 2) & 0xFF);
};

util.int32BE = function(bytes, offset) {
    return ((bytes.charCodeAt(offset + 0) & 0xFF) << 24) |
           ((bytes.charCodeAt(offset + 1) & 0xFF) << 16) |
           ((bytes.charCodeAt(offset + 2) & 0xFF) << 8) |
           (bytes.charCodeAt(offset + 3) & 0xFF);
};

util.int16BE = function(bytes, offset) {
    return ((bytes.charCodeAt(offset + 0) & 0xFF) << 8) |
           (bytes.charCodeAt(offset + 1) & 0xFF);
};

util.int32LE = function(bytes, offset) {
    return ((bytes.charCodeAt(offset + 3) & 0xFF) << 24) |
           ((bytes.charCodeAt(offset + 2) & 0xFF) << 16) |
           ((bytes.charCodeAt(offset + 1) & 0xFF) << 8) |
           (bytes.charCodeAt(offset + 0) & 0xFF);
};

util.int16LE = function(bytes, offset) {
    return ((bytes.charCodeAt(offset + 1) & 0xFF) << 8) |
           (bytes.charCodeAt(offset + 0) & 0xFF);
};

(function() {
    const LITTLE_ENDIAN = 0;
    const BIG_ENDIAN = 1;

    const a = new Uint16Array(1);
    const b = new Uint8Array(a.buffer);
    b[0] = 0xFF;

    const endianess = a[0] === 0xFF ? LITTLE_ENDIAN : BIG_ENDIAN;

    const f32 = new Float32Array(1);
    const b4 = new Uint8Array(f32.buffer);
    const i32 = new Int32Array(f32.buffer);
    const ui32 = new Uint32Array(f32.buffer);
    const f64 = new Float64Array(1);
    const b8 = new Uint8Array(f64.buffer);

    if (endianess === LITTLE_ENDIAN) {
        util.float32BE = function(bytes, offset) {
            b4[0] = (bytes.charCodeAt(offset + 3) & 0xFF);
            b4[1] = (bytes.charCodeAt(offset + 2) & 0xFF);
            b4[2] = (bytes.charCodeAt(offset + 1) & 0xFF);
            b4[3] = (bytes.charCodeAt(offset + 0) & 0xFF);
            return f32[0];
        };
    } else {
        util.float32BE = function(bytes, offset) {
            b4[3] = (bytes.charCodeAt(offset + 3) & 0xFF);
            b4[2] = (bytes.charCodeAt(offset + 2) & 0xFF);
            b4[1] = (bytes.charCodeAt(offset + 1) & 0xFF);
            b4[0] = (bytes.charCodeAt(offset + 0) & 0xFF);
            return f32[0];
        };
    }

    if (endianess === LITTLE_ENDIAN) {
        util.float32BEString = function(num) {
            f32[0] = num;
            return String.fromCharCode(b4[3]) +
                   String.fromCharCode(b4[2]) +
                   String.fromCharCode(b4[1]) +
                   String.fromCharCode(b4[0]);
        };
    } else {
        util.float32BEString = function(num) {
            f32[0] = num;
            return String.fromCharCode(b4[0]) +
                   String.fromCharCode(b4[1]) +
                   String.fromCharCode(b4[2]) +
                   String.fromCharCode(b4[3]);
        };
    }

    if (endianess === LITTLE_ENDIAN) {
        util.int32BEString = function(num) {
            i32[0] = num | 0;
            return String.fromCharCode(b4[3]) +
                   String.fromCharCode(b4[2]) +
                   String.fromCharCode(b4[1]) +
                   String.fromCharCode(b4[0]);
        };
    } else {
        util.int32BEString = function(num) {
            i32[0] = num | 0;
            return String.fromCharCode(b4[0]) +
                   String.fromCharCode(b4[1]) +
                   String.fromCharCode(b4[2]) +
                   String.fromCharCode(b4[3]);
        };
    }

    if (endianess === LITTLE_ENDIAN) {
        util.uint32BEString = function(num) {
            ui32[0] = num >>> 0;
            return String.fromCharCode(b4[3]) +
                   String.fromCharCode(b4[2]) +
                   String.fromCharCode(b4[1]) +
                   String.fromCharCode(b4[0]);
        };
    } else {
        util.uint32BEString = function(num) {
            ui32[0] = num >>> 0;
            return String.fromCharCode(b4[0]) +
                   String.fromCharCode(b4[1]) +
                   String.fromCharCode(b4[2]) +
                   String.fromCharCode(b4[3]);
        };
    }

    if (endianess === LITTLE_ENDIAN) {
        util.float32LE = function(bytes, offset) {
            b4[3] = (bytes.charCodeAt(offset + 3) & 0xFF);
            b4[2] = (bytes.charCodeAt(offset + 2) & 0xFF);
            b4[1] = (bytes.charCodeAt(offset + 1) & 0xFF);
            b4[0] = (bytes.charCodeAt(offset + 0) & 0xFF);
            return f32[0];
        };
    } else {
        util.float32LE = function(bytes, offset) {
            b4[0] = (bytes.charCodeAt(offset + 3) & 0xFF);
            b4[1] = (bytes.charCodeAt(offset + 2) & 0xFF);
            b4[2] = (bytes.charCodeAt(offset + 1) & 0xFF);
            b4[3] = (bytes.charCodeAt(offset + 0) & 0xFF);
            return f32[0];
        };
    }

    if (endianess === LITTLE_ENDIAN) {
        util.float64BE = function(bytes, offset) {
            b8[0] = (bytes.charCodeAt(offset + 7) & 0xFF);
            b8[1] = (bytes.charCodeAt(offset + 6) & 0xFF);
            b8[2] = (bytes.charCodeAt(offset + 5) & 0xFF);
            b8[3] = (bytes.charCodeAt(offset + 4) & 0xFF);
            b8[4] = (bytes.charCodeAt(offset + 3) & 0xFF);
            b8[5] = (bytes.charCodeAt(offset + 2) & 0xFF);
            b8[6] = (bytes.charCodeAt(offset + 1) & 0xFF);
            b8[7] = (bytes.charCodeAt(offset + 0) & 0xFF);
            return f64[0];
        };
    } else {
        util.float64BE = function(bytes, offset) {
            b8[7] = (bytes.charCodeAt(offset + 7) & 0xFF);
            b8[6] = (bytes.charCodeAt(offset + 6) & 0xFF);
            b8[5] = (bytes.charCodeAt(offset + 5) & 0xFF);
            b8[4] = (bytes.charCodeAt(offset + 4) & 0xFF);
            b8[3] = (bytes.charCodeAt(offset + 3) & 0xFF);
            b8[2] = (bytes.charCodeAt(offset + 2) & 0xFF);
            b8[1] = (bytes.charCodeAt(offset + 1) & 0xFF);
            b8[0] = (bytes.charCodeAt(offset + 0) & 0xFF);
            return f64[0];
        };
    }
    if (endianess === LITTLE_ENDIAN) {
        util.float64LE = function(bytes, offset) {
            b8[7] = (bytes.charCodeAt(offset + 7) & 0xFF);
            b8[6] = (bytes.charCodeAt(offset + 6) & 0xFF);
            b8[5] = (bytes.charCodeAt(offset + 5) & 0xFF);
            b8[4] = (bytes.charCodeAt(offset + 4) & 0xFF);
            b8[3] = (bytes.charCodeAt(offset + 3) & 0xFF);
            b8[2] = (bytes.charCodeAt(offset + 2) & 0xFF);
            b8[1] = (bytes.charCodeAt(offset + 1) & 0xFF);
            b8[0] = (bytes.charCodeAt(offset + 0) & 0xFF);
            return f64[0];
        };
    } else {
        util.float64LE = function(bytes, offset) {
            b8[0] = (bytes.charCodeAt(offset + 7) & 0xFF);
            b8[1] = (bytes.charCodeAt(offset + 6) & 0xFF);
            b8[2] = (bytes.charCodeAt(offset + 5) & 0xFF);
            b8[3] = (bytes.charCodeAt(offset + 4) & 0xFF);
            b8[4] = (bytes.charCodeAt(offset + 3) & 0xFF);
            b8[5] = (bytes.charCodeAt(offset + 2) & 0xFF);
            b8[6] = (bytes.charCodeAt(offset + 1) & 0xFF);
            b8[7] = (bytes.charCodeAt(offset + 0) & 0xFF);
            return f64[0];
        };
    }
})();

util.truncateUp = function(num) {
    return num < 0 ? Math.floor(num) : Math.ceil(num);
};

util.toTimeString = function(secs) {
    if (!isFinite(secs) || secs == null) return "";
    secs = Math.round(secs)
    var days, hours, minutes, seconds;

    days = (secs / 86400) >> 0;
    hours = (secs % 86400 / 3600) >> 0;
    minutes = (secs % 3600 / 60) >> 0;
    seconds = (secs % 60);
    seconds = seconds < 10 ? "0" + seconds : seconds;
    minutes = minutes < 10 ? "0" + minutes : minutes;
    hours = hours && hours < 10 ? "0" + hours : hours;

    return "" + (days ? days + " - " : "") + (hours ? hours + ":" : "") +
        minutes + ":" + seconds;
};

util.shortNumber = function(num) {
    num = +num;
    var sign = num < 0 ? "-" : "";
    num = Math.abs(num);
    if (num < 1e3) return sign + num + "";
    if (num < 1e6) return sign + Math.round(num / 1e3).toFixed(1) + "k";
    if (num < 1e9) return sign + Math.round(num / 1e6).toFixed(1) + "m";
    if (num < 1e12) return sign + Math.round(num / 1e9).toFixed(1) + "g";
    return sign + num.toExponential(0);
};

util.perfectScrollBarPostUpdate = function(node) {
    var st = node.scrollTop;
    var sl = node.scrollLeft;
    node.scrollTop = 0;
    node.scrollLeft = 0;
    var scrollEvent = document.createEvent("Event");
    scrollEvent.initEvent('scroll', true, true);
    node.dispatchEvent(scrollEvent);
    node.scrollTop = st;
    node.scrollLeft = sl;
    var scrollEvent = document.createEvent("Event");
    scrollEvent.initEvent('scroll', true, true);
    node.dispatchEvent(scrollEvent);
};

util.scrollUp = function(node, amount) {
    node.scrollTop = node.scrollTop - amount;
    var scrollEvent = document.createEvent("Event");
    scrollEvent.initEvent('scroll', true, true);
    node.dispatchEvent(scrollEvent);
};

util.scrollDown = function(node, amount) {
    node.scrollTop = node.scrollTop + amount;
    var scrollEvent = document.createEvent("Event");
    scrollEvent.initEvent('scroll', true, true);
    node.dispatchEvent(scrollEvent);
};

util.scrollIntoView = {
    alignMiddle: function(node, parentNode) {
        if (!node || !parentNode) {
            return;
        }
        var nodeOffset = node.offsetTop,
            parentHeight = parentNode.offsetHeight,
            parentScrollTop = parentNode.scrollTop,
            dif, mid;

        dif = nodeOffset - (parentHeight / 2);

        if (dif < 0) {
            dif = 0;
        }
        parentNode.scrollTop = dif;
        var scrollEvent = document.createEvent("Event");
        scrollEvent.initEvent('scroll', true, true);
        parentNode.dispatchEvent(scrollEvent);
    }
};

util.inherits = function(Child, Parent) {
    var hasProp = {}.hasOwnProperty;

    function T() {
        this.constructor = Child;
        this.constructor$ = Parent;
        for (var propertyName in Parent.prototype) {
            if (hasProp.call(Parent.prototype, propertyName) &&
                propertyName.charAt(propertyName.length-1) !== "$"
           ) {
                this[propertyName + "$"] = Parent.prototype[propertyName];
            }
        }
    }
    T.prototype = Parent.prototype;
    Child.prototype = new T();
    return Child.prototype;
};

util.throttle = function(callback, delay) {
    var timeridto = 0;

    return function() {
        var args = Array.prototype.slice.call(arguments),
            $this = this;
        clearTimeout(timeridto);
        timeridto = setTimeout(function() {
            callback.apply($this, args);
        }, delay);
    };
};

util.callableEveryMs = function(callback, delay) {
    var lastCall = 0;

    return function() {
        var now = Date.now();

        if (now - lastCall > delay) {
            lastCall = now;
            return callback.apply(this, arguments);
        }
    };
};

if (typeof String.prototype.htmlEncode !== "function") {
    String.prototype.htmlEncode = (function() {
        var UNESC_DQ = new RegExp('"', "g");
        return function() {
            var div = document.createElement("DIV"),
                ret, str = this.toString();
            div.innerText = div.textContent = str;
            ret = div.innerHTML;
            return ret.replace(UNESC_DQ, "&quot;");
        };
    })();
}

if (typeof Array.prototype.first !== "function") {
    Array.prototype.first = function() {
        if (this.length > 0) {
            return this[0];
        }
    };
}

if (typeof Array.prototype.last !== "function") {
    Array.prototype.last = function() {
        var len = this.length;
        if (len > 0)  {
            return this[len - 1];
        }
    }
}

if (typeof Math.log10 !== "function") {
    Math.log10 = function(v) {
        return Math.log(v) * Math.LOG10E;
    };
}

if (typeof Math.log2 !== "function") {
    Math.log2 = function(v) {
        return Math.log(v) * Math.LOG2E;
    };
}

Array.prototype.toKeysObj = function() {
    var i = 0,
        l = this.length,
        ret = {};
    for (i = 0; i < l; ++i) {
        ret[this[i]] = null;
    }
    return ret;
};

util.IDENTITY = function(v) { return v; }

util.buildConsecutiveRanges = function(array, callback) {
    if (typeof callback !== "function") callback = util.IDENTITY;
    if (!array.length) return [];
    if (array.length === 1) return [[array[0]]];
    var ranges = [];
    var prev = array[0];
    var currentRange = [prev];

    for (var i = 1; i < array.length; ++i) {
        var currentValue = callback(array[i]);
        var previousValue = callback(prev);
        if (currentValue === previousValue) continue;
        if (currentValue - 1 !== previousValue) {
            ranges.push(currentRange);
            currentRange = [array[i]];
        } else {
            currentRange.push(array[i]);
        }
        prev = array[i];
    }
    ranges.push(currentRange);
    return ranges;
};

// e.g. Input: [2,3,4], 8
//      Output: [[0, 1], [5, 8]]
//
//      Input: [0, 1, 2, 4, 5, 10], 1000
//      Output: [[3, 3], [6,9], [11, 1000]]
util.buildInverseRanges = function(array, endIndex) {
    var inverseRanges = [];
    var ranges = util.buildConsecutiveRanges(array);
    if (!ranges.length) {
        return [[0, endIndex]];
    }
    var currentStart = ranges.first().first() === 0 ? -1 : 0;
    var currentEnd = -1;

    ranges.forEach(function(range) {
        var rangeStart = range.first();
        var rangeEnd = range.last();

        if (rangeStart === rangeEnd) {
            if (currentStart === -1) {
                currentStart = rangeEnd + 1;
            } else {
                inverseRanges.push([currentStart, rangeStart === 0 ? currentStart : rangeStart -1]);
                currentStart = rangeEnd + 1;
                currentEnd = -1;
            }
        } else if (currentStart === -1) {
            currentStart = rangeStart === 0 ? rangeEnd + 1 : rangeStart - 1;
        } else {
            inverseRanges.push([currentStart, rangeStart - 1]);
            currentStart = rangeEnd + 1;
        }
    });

    if (currentStart !== -1) {
        if (currentStart <= endIndex) {
            inverseRanges.push([currentStart, endIndex]);
        }
    } else if (currentEnd !== -1) {
        if (currentEnd <= endIndex) {
            inverseRanges.push([currentEnd, endIndex]);
        }
    }

    return inverseRanges;
};

util.indexMapper = function(track) {
    return track.getIndex();
};

util.TRACK_SORTER = function(a, b) {
    return a.getIndex() - b.getIndex();
};

util.SORT_NUMBER_ASC = function (a, b) {
    return a - b;
};

util.once = function(eventTarget, eventName, handler) {
    eventTarget.addEventListener(eventName, function handle() {
        try {
            eventTarget.removeEventListener(eventName, handle, false);
        } finally {
            handler.apply(this, arguments);
        }


    }, false);
};

util.readAsBinaryString = function(file) {
    return new Promise(function(resolve, reject) {
        var reader = new FileReader();
        util.once(reader, "load", function(e) {
            resolve(e.target.result);
        });
        util.once(reader, "error", function() {
            reject(new FileError(this.error));
        });
        reader.readAsBinaryString(file);
    });
};

util.subClassError = function(name, additional) {
    var ret = new Function("additional", "return function "+name+"(message) {  \
        this.name = '"+name+"';                                                \
        this.message = message;                                                \
        if (Error.captureStackTrace)                                           \
            Error.captureStackTrace(this);                                     \
        else                                                                   \
            Error.call(this, message);                                         \
        if (additional) additional.apply(this, arguments);                     \
    };")(additional);
    ret.prototype = Object.create(Error.prototype);
    ret.prototype.constructor = ret;
    return ret;
};

util.formatTagString = function(str) {
    return str.replace(/[\u0000-\u001F]+/g, "").trim();
};

util.indexOfCodePoint = function(string, codePoint, start) {
    if (start === undefined) start = 0;
    for (var i = start; i < string.length; ++i) {
        if (string.charCodeAt(i) === codePoint) {
            return i;
        }
    }
    return -1;
};

util.capitalize = function(str) {
    if (!str.length) return str;
    return str.charAt(0).toUpperCase() + str.slice(1);
};

util.unicode = {};

util.unicode.characterCategories = {
    numbers: "\u0030-\u0039\u00b2\u00b3\u00b9\u00bc-\u00be\u0660-\u0669\u06f0-\u06f9\u07c0-" +
             "\u07c9\u0966-\u096f\u09e6-\u09ef\u09f4-\u09f9\u0a66-\u0a6f\u0ae6-\u0aef\u0b66-" +
             "\u0b6f\u0b72-\u0b77\u0be6-\u0bf2\u0c66-\u0c6f\u0c78-\u0c7e\u0ce6-\u0cef\u0d66-" +
             "\u0d75\u0de6-\u0def\u0e50-\u0e59\u0ed0-\u0ed9\u0f20-\u0f33\u1040-\u1049\u1090-" +
             "\u1099\u1369-\u137c\u16ee-\u16f0\u17e0-\u17e9\u17f0-\u17f9\u1810-\u1819\u1946-" +
             "\u194f\u19d0-\u19da\u1a80-\u1a89\u1a90-\u1a99\u1b50-\u1b59\u1bb0-\u1bb9\u1c40-" +
             "\u1c49\u1c50-\u1c59\u2070\u2074-\u2079\u2080-\u2089\u2150-\u2182\u2185-\u2189" +
             "\u2460-\u249b\u24ea-\u24ff\u2776-\u2793\u2cfd\u3007\u3021-\u3029\u3038-\u303a" +
             "\u3192-\u3195\u3220-\u3229\u3248-\u324f\u3251-\u325f\u3280-\u3289\u32b1-\u32bf" +
             "\ua620-\ua629\ua6e6-\ua6ef\ua830-\ua835\ua8d0-\ua8d9\ua900-\ua909\ua9d0-\ua9d9" +
             "\ua9f0-\ua9f9\uaa50-\uaa59\uabf0-\uabf9\uff10-\uff19",

    letters: "\u0041-\u005a\u0061-\u007a\u00aa\u00b5\u00ba\u00c0-\u00d6\u00d8-\u00f6\u00f8-" +
             "\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-" +
             "\u037d\u037f\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481" +
             "\u048a-\u052f\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0620-" +
             "\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff" +
             "\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-" +
             "\u0815\u081a\u0824\u0828\u0840-\u0858\u08a0-\u08b4\u0904-\u0939\u093d\u0950" +
             "\u0958-\u0961\u0971-\u0980\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0" +
             "\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u0a05-" +
             "\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39" +
             "\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-" +
             "\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0af9\u0b05-\u0b0c\u0b0f" +
             "\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d" +
             "\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a" +
             "\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c" +
             "\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c39\u0c3d\u0c58-\u0c5a\u0c60\u0c61\u0c85-" +
             "\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0" +
             "\u0ce1\u0cf1\u0cf2\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d5f-" +
             "\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6" +
             "\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d" +
             "\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb0" +
             "\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-" +
             "\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065" +
             "\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa" +
             "\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-" +
             "\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6" +
             "\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f5\u13f8-\u13fd" +
             "\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16f1-\u16f8\u1700-\u170c" +
             "\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3" +
             "\u17d7\u17dc\u1820-\u1877\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191e\u1950-" +
             "\u196d\u1970-\u1974\u1980-\u19ab\u19b0-\u19c9\u1a00-\u1a16\u1a20-\u1a54\u1aa7" +
             "\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23" +
             "\u1c4d-\u1c4f\u1c5a-\u1c7d\u1ce9-\u1cec\u1cee-\u1cf1\u1cf5\u1cf6\u1d00-\u1dbf" +
             "\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b" +
             "\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc" +
             "\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f" +
             "\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128" +
             "\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2183\u2184\u2c00-" +
             "\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27" +
             "\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6" +
             "\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u2e2f\u3005" +
             "\u3006\u3031-\u3035\u303b\u303c\u3041-\u3096\u309d-\u309f\u30a1-\u30fa\u30fc-" +
             "\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-" +
             "\u9fd5\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-" +
             "\ua66e\ua67f-\ua69d\ua6a0-\ua6e5\ua717-\ua71f\ua722-\ua788\ua78b-\ua7ad\ua7b0-" +
             "\ua7b7\ua7f7-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-" +
             "\ua8b3\ua8f2-\ua8f7\ua8fb\ua8fd\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-" +
             "\ua9b2\ua9cf\ua9e0-\ua9e4\ua9e6-\ua9ef\ua9fa-\ua9fe\uaa00-\uaa28\uaa40-\uaa42" +
             "\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa7e-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd" +
             "\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e" +
             "\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uab30-\uab5a\uab5c-\uab65\uab70-\uabe2" +
             "\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06" +
             "\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41" +
             "\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb" +
             "\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7" +
             "\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc",

    wordSeparator: "\x20\xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000"
};

util.unicode.alphaNumericFilteringPattern = new RegExp("[^" + util.unicode.characterCategories.numbers +
                                                     util.unicode.characterCategories.letters + "]+", "g");
util.unicode.separateWordsPattern = new RegExp("["+util.unicode.characterCategories.wordSeparator+"]+", "g");

util.unicode.decodeUnicodeEncodedBinaryString = (function() {
    var LITTLE_ENDIAN = 0;
    var BIG_ENDIAN = 1;

    return function(str, bigEndian) {
        var i = 0,
            len = str.length;
        var endianess = LITTLE_ENDIAN;

        if (bigEndian !== true) {
            if (len >= 2) {
                var bom = (str.charCodeAt(0) << 8) |
                    str.charCodeAt(1);
                if (bom === 0xFFFE) {
                    endianess = LITTLE_ENDIAN;
                    i = 2; //Skip bom
                } else if (bom === 0xFEFF) {
                    endianess = BIG_ENDIAN;
                    i = 2; //Skip bom
                } else {
                    endianess = LITTLE_ENDIAN;
                }
            } else {
                endianess = LITTLE_ENDIAN;
            }
        } else {
            endianess = BIG_ENDIAN;
        }
        var codePoints = new Array(Math.ceil(str.length / 2)),
            codePoint,
            low, high,
            byte;
        codePoints.length = 0;
        if (endianess === BIG_ENDIAN) {
            for (; i < len; i += 2) {
                if (i + 1 >= len) {
                    codePoint = 0xFFFD;
                } else {
                    codePoint = (str.charCodeAt(i) << 8) |
                        str.charCodeAt(i + 1);
                    //Lead surrogate 0xD800..0xDBFF
                    if (0xD800 <= codePoint && codePoint <= 0xDBFF) {
                        if (i + 3 >= len) {
                            codePoint = 0xFFFD;
                        } else {
                            high = codePoint;
                            //peek low surrogate
                            low = (str.charCodeAt(i + 2) << 8) |
                                str.charCodeAt(i + 3);
                            //Trail surrogate 0xDC00..0xDFFF
                            if (0xDC00 <= low && low <= 0xDFFF) {
                                i += 2; //Valid surrogate pair so ignore the upcoming low
                                codePoint = ((high - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000;
                                if (codePoint <= 0x10FFFF) {
                                    codePoints.push(String.fromCharCode(high, low));
                                } else {
                                    continue;
                                }
                            }
                        }
                    }
                }
                if (!(0xD800 <= codePoint && codePoint <= 0xDFFF) && codePoint !== 0xFFFD) {
                    codePoints.push(String.fromCharCode(codePoint));
                }
            }
        } else {
            for (; i < len; i += 2) {
                if (i + 1 >= len) {
                    codePoint = 0xFFFD;
                } else {
                    codePoint = str.charCodeAt(i) |
                        (str.charCodeAt(i + 1) << 8);
                    //Lead surrogate 0xD800..0xDBFF
                    if (0xD800 <= codePoint && codePoint <= 0xDBFF) {
                        if (i + 3 >= len) {
                            codePoint = 0xFFFD;
                        } else {
                            high = codePoint;
                            //peek low surrogate
                            low = str.charCodeAt(i + 2) |
                                (str.charCodeAt(i + 3) << 8);
                            //Trail surrogate 0xDC00..0xDFFF
                            if (0xDC00 <= low && low <= 0xDFFF) {
                                i += 2; //Valid surrogate pair so ignore the upcoming low
                                codePoint = ((high - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000;
                                if (codePoint <= 0x10FFFF) {
                                    codePoints.push(String.fromCharCode(high, low));
                                } else {
                                    continue;
                                }
                            }
                        }
                    }
                }
                if (!(0xD800 <= codePoint && codePoint <= 0xDFFF) && codePoint !== 0xFFFD) {
                    codePoints.push(String.fromCharCode(codePoint));
                }
            }
        }
        return codePoints.join("");
    };
})();

util.unicode.decodeUtf8EncodedBinaryString = function(str) {
    //Decode unicode code points from utf8 encoded binarystring
    var codePoints = new Array(str.length),
        ch2, ch3, ch4,
        i = 0,
        byte, codePoint;
    codePoints.length = 0;

    while (!isNaN(byte = str.charCodeAt(i++))) {
        if ((byte & 0xF8) === 0xF0) {
            codePoint = ((byte & 0x7) << 18) |
                (((ch2 = str.charCodeAt(i++)) & 0x3F) << 12) |
                (((ch3 = str.charCodeAt(i++)) & 0x3F) << 6) |
                ((ch4 = str.charCodeAt(i++)) & 0x3F);

            if (!(0xFFFF < codePoint && codePoint <= 0x10FFFF)) {
                //Overlong sequence
                codePoint = 0xFFFD;
            } else if (
                (ch2 & 0xC0) !== 0x80 || //must be 10xxxxxx
                (ch3 & 0xC0) !== 0x80 || //must be 10xxxxxx
                (ch4 & 0xC0) !== 0x80 //must be 10xxxxxx
            ) {
                codePoint = 0xFFFD;
            }


            if (codePoint === 0xFFFD) {
                i -= 3; //Backtrack
            }

        } else if ((byte & 0xF0) === 0xE0) {
            codePoint = ((byte & 0xF) << 12) |
                (((ch2 = str.charCodeAt(i++)) & 0x3F) << 6) |
                ((ch3 = str.charCodeAt(i++)) & 0x3F);
            //Check for legit 0xFFFD
            if (codePoint !== 0xFFFD) {
                if (!(0x7FF < codePoint && codePoint <= 0xFFFF)) {
                    //Overlong sequence
                    codePoint = 0xFFFD;
                } else if (
                    (ch2 & 0xC0) !== 0x80 || //must be 10xxxxxx
                    (ch3 & 0xC0) !== 0x80 //must be 10xxxxxx
                ) {
                    codePoint = 0xFFFD;
                }

                if (codePoint === 0xFFFD) {
                    i -= 2; //Backtrack
                }
                //Ignore initial bom
                if (codePoint === 0xFEFF && i === 3) {
                    continue;
                }
            }
        } else if ((byte & 0xE0) === 0xC0) {
            codePoint = ((byte & 0x1F) << 6) |
                (((ch2 = str.charCodeAt(i++)) & 0x3F));
            if (!(0x7F < codePoint && codePoint <= 0x7FF)) {
                //Overlong sequence
                codePoint = 0xFFFD;
            } else if (
                (ch2 & 0xC0) !== 0x80 //must be 10xxxxxx
            ) {
                codePoint = 0xFFFD;
            }

            if (codePoint === 0xFFFD) {
                i--; //Backtrack
            }
        } else if ((byte & 0x80) === 0x00) { //must be 0xxxxxxx
            codePoint = (byte & 0x7F);
        } else {
            codePoint = 0xFFFD;
        }

        if (codePoint !== 0xFFFD) {
            codePoints.push(String.fromCharCode(codePoint));
        }

    }
    return codePoints.join("");
};

util.getLongestTransitionDuration = function(node) {
    var $node = $(node);
    var prop = $node.css("transitionDuration");
    if (+!prop) return 0;
    return prop.split(",").reduce(function(max, cur) {
        return Math.max(max, parseFloat(cur));
    }, 0) * 1000;
};

util.stripBinaryBom = function(str) {
    return str.replace(/^(\xff\xfe|\xfe\xff)/, "");
};

util.IDBPromisify = function(ee) {
    return new Promise(function(resolve, reject) {
        ee.onerror = function(event) {
            reject(event.target.transaction.error);
        };
        ee.onsuccess = function(event) {
            resolve(event.target.result);
        };
        ee.oncomplete = resolve;
    })
};

util.documentHidden = (function() {
    if (typeof document === "undefined") return;

    var prefix = ["h", "mozH", "msH", "webkitH"].reduce(function(prefix, curr) {
        if (prefix) return prefix;
        return (curr + "idden") in document ? curr : prefix;
    }, null);
    var prop = prefix + "idden";
    var eventName = prefix.slice(0, -1) + "visibilitychange";

    var ret = new EventEmitter();
    ret.setMaxListeners(255);
    ret.value = function() {
        return document[prop];
    };

    document.addEventListener(eventName, function() {
        ret.emit("change");
    }, false);

    return ret;
})();

})();

;
;
var keyValueDatabase = (function() {"use strict";
const VERSION = 2;
const NAME = "KeyValueDatabase2";
const KEY_NAME = "key";
const TABLE_NAME = "keyValueDatabase2";
const READ_WRITE = "readwrite";
const READ_ONLY = "readonly";

const indexedDB = window.indexedDB || window.mozIndexedDB || window.msIndexedDB;
const IDBTransaction = window.IDBTransaction ||  window.msIDBTransaction || {READ_WRITE: "readwrite"}; // This line should only be needed if it is needed to support the object's constants for older browsers
const IDBKeyRange = window.IDBKeyRange || window.msIDBKeyRange;


function KeyValueDatabase() {
    var request = indexedDB.open(NAME, VERSION);
    this.db = util.IDBPromisify(request);
    this.db.suppressUnhandledRejections();

    this._onUpgradeNeeded = $.proxy(this._onUpgradeNeeded, this);
    request.onupgradeneeded = this._onUpgradeNeeded;
    this.initialValues = this.getAll();
    this.initialValues.suppressUnhandledRejections();

    this.keySetters = Object.create(null);
}

KeyValueDatabase.prototype.getKeySetter = function(key) {
    if (!this.keySetters[key]) {
        this.keySetters[key] = util.throttle(function(value) {
            var self = this;
            return this.db.then(function(db) {
                var store = db.transaction(TABLE_NAME, READ_ONLY).objectStore(TABLE_NAME);
                return util.IDBPromisify(store.get(key));
            }).then(function(existingData) {
                var store = self.db.value().transaction(TABLE_NAME, READ_WRITE).objectStore(TABLE_NAME);
                if (existingData) {
                    existingData.value = value;
                    return util.IDBPromisify(store.put(existingData));
                } else {
                    var data = {
                        key: key,
                        value: value
                    };
                    return util.IDBPromisify(store.add(data));
                }
            });
        }, 1000);
    }
    return this.keySetters[key];
};

KeyValueDatabase.prototype.getInitialValues = function() {
    return this.initialValues;
};

KeyValueDatabase.prototype._onUpgradeNeeded = function(event) {
    var db = event.target.result;
    var objectStore = db.createObjectStore(TABLE_NAME, { keyPath: KEY_NAME });
    objectStore.createIndex("key", "key", {unique: true});
    this.db = util.IDBPromisify(objectStore.transaction).thenReturn(db);
};

KeyValueDatabase.prototype.set = function(key, value) {
    key = key + "";
    return this.getKeySetter(key).call(this, value);
};

KeyValueDatabase.prototype.get = function(key) {
    key = "" + key;
    return this.db.then(function(db) {
        var store = db.transaction(TABLE_NAME, READ_ONLY).objectStore(TABLE_NAME);
        return util.IDBPromisify(store.get(key));
    });
};

KeyValueDatabase.prototype.getAll = function(_tries) {
    if (_tries === undefined) _tries = 0;
    var self = this;
    return this.db.then(function(db) {
        var store = db.transaction(TABLE_NAME, READ_ONLY).objectStore(TABLE_NAME);
        var index = store.index(KEY_NAME);
        var ret = [];
        return new Promise(function(resolve, reject) {
            var cursor = index.openCursor();

            cursor.onsuccess = function(event) {
                var cursor = event.target.result;
                if (!cursor) return resolve(ret);
                ret.push(cursor.value);
                cursor.continue();
            };

            cursor.onerror = reject;
        });
    }).then(function(keyValuePairs) {
        var ret = Object.create(null);
        keyValuePairs.forEach(function(pair) {
            ret[pair.key] = pair.value;
        });
        return ret;
    }).catch(function(e) {
        if (_tries > 5) throw e;
        return Promise.delay(500).then(function() {
            return self.getAll(_tries + 1);
        });
    });
};

return new KeyValueDatabase();})();

;
;
var Tooltip = (function() { "use strict";

const getDirection = function(value) {
    value = ("" + value).trim().toLowerCase();
    if (value === "right") return "right";
    if (value === "left") return "left";
    if (value === "up") return "up";
    if (value === "down") return "down";
    return "up";
};

const getArrowAlign = function(value) {
    value = ("" + value).trim().toLowerCase();
    if (value === "begin") return "begin";
    if (value === "end") return "end";
    if (value === "middle") return "middle";
    return "middle";
};

const NULL = $(null);

const getConfigurationsToTryInOrder = function(direction, arrowAlign) {
    var arrowAligns, directions;

    switch (arrowAlign) {
        case "begin": arrowAligns = ["begin", "middle", "end"]; break;
        case "middle": arrowAligns = ["middle", "begin", "end"]; break;
        case "end": arrowAligns = ["end", "middle", "begin"]; break;
        default: throw new Error("invalid align");
    }

    switch (direction) {
        case "up": directions = ["up", "down", "left", "right"]; break;
        case "down": directions = ["down", "up", "left", "right"]; break;
        case "left": directions = ["left", "right", "up", "down"]; break;
        case "right": directions = ["right", "left", "up", "down"]; break;
        default: throw new Error("invalid direction");
    }

    var ret = new Array(directions.length * arrowAligns.length);
    ret.length = 0;

    for (var i = 0; i < directions.length; ++i) {
        for (var j = 0; j < arrowAligns.length; ++j) {
            ret.push({
                direction: directions[i],
                align: arrowAligns[j]
            });
        }
    }

    return ret;
};

function Tooltip(opts) {
    opts = Object(opts);
    this._preferredDirection = getDirection(opts.preferredDirection);
    this._domNode = $(opts.container);
    this._onContent = util.toFunction(opts.content);
    this._delay = Math.min(20000, Math.max(0, parseInt(opts.delay, 10))) || 300;
    this._delayTimeoutId = -1;
    this._target = typeof opts.target === "string" ? this.$().find(opts.target)
                                                   : opts.target;
    this._classPrefix = opts.classPrefix || "unprefixed-tooltip";
    this._transitionClass = opts.transitionClass || "";
    this._shown = false;
    this._tooltip = NULL;
    this._preferredArrowAlign = getArrowAlign(opts.preferredAlign);
    this._gap = parseInt(opts.gap, 10) || 0;
    this._arrow = !!opts.arrow;
    this._x = 0;
    this._y = 0;
    this._maxX = 0;
    this._maxY = 0;

    this._show = this._show.bind(this);
    this.mouseLeft = this.mouseLeft.bind(this);
    this.mouseEntered = this.mouseEntered.bind(this);
    this.hide = this.hide.bind(this);
    this.mousemoved = this.mousemoved.bind(this);
    this.position = this.position.bind(this);
    this.hide = this.hide.bind(this);

    this._target.on("mouseenter", this.mouseEntered);
    this._target.on("mouseleave", this.mouseLeft);
    this._target.on("click", this.hide);
    $(window).on("resize", this.position);
    $(window).on("blur", this.hide);
    util.documentHidden.on("change", this.hide);
}

Tooltip.prototype._clearDelay = function() {
    if (this._delayTimeoutId !== -1) {
        clearTimeout(this._delayTimeoutId);
        this._delayTimeoutId = -1;
    }
};

Tooltip.prototype._createTooltipNode = function(message) {
    var containerClass = this._classPrefix.split(" ").map(function(v) {
        return v + "-container";
    }).join(" ") + " tooltip-container";
    var messageClass = this._classPrefix.split(" ").map(function(v) {
        return v + "-message";
    }).join(" ") + " tooltip-message";

    var html = "<div class='"+containerClass+"'>" +
            "<div class='"+messageClass+"'>" + message + "</div></div>";

    return $($.parseHTML(html)[0]);
};

Tooltip.prototype.position = function() {
    if (!this._shown) return;
    var $node = this._tooltip;
    var baseX = this._x;
    var baseY = this._y;
    var maxX = $(window).width();
    var maxY = $(window).height();
    var box = $node[0].getBoundingClientRect();

    if (maxX !== this._maxX || maxY !== this._maxY) {
        baseX = baseX * (maxX / this._maxX);
        this._x = baseX;

        baseY = baseY * (maxY / this._maxY);
        this._y = baseY;

        this._maxX = maxX;
        this._maxY = maxY;
    }

    var gap = this._gap;
    var configurations = getConfigurationsToTryInOrder(this._preferredDirection, this._preferredArrowAlign);
    var direction, align;

    // Keep trying configurations in preferred order until it is fully visible.
    for (var i = 0; i < configurations.length; ++i) {
        var configuration = configurations[i];
        direction = configuration.direction;
        align = configuration.align;
        var left = 0;
        var top = 0;

        if (direction === "up" || direction === "down") {
            if (align === "begin") {
                left = baseX - gap;
            } else if (align === "middle") {
                left = baseX - box.width / 2;
            } else if (align === "end") {
                left = baseX - box.width + gap;
            }

            if (direction === "up") {
                top = baseY + gap + 21;
            } else {
                top = baseY - gap - 21 - box.height;
            }
        } else {
            if (align === "begin") {
                top = baseY - gap;
            } else if (align === "middle") {
                top = baseY - box.height / 2;
            } else if (align === "end") {
                top = baseY - box.height + gap;
            }

            if (direction === "left") {
                left = baseX + gap + 21;
            } else {
                left = baseX - gap - 21 - box.width;
            }
        }

        if (left >= 0 && left + box.width <= maxX &&
            top >= 0 && top + box.height <= maxY) {
            $node.css({left: left, top: top});
            break;
        }
    }

    if (this._arrow) {
        $node.find(".tooltip-arrow-rendering").remove();
        this.renderArrow($node, direction, align);
    }
};

Tooltip.prototype._show = function(noTransition) {
    this._target.off("mousemove", this.mousemoved);
    this._clearDelay();
    if (this._shown) return;
    this._maxX = $(window).width();
    this._maxY = $(window).height();
    var content = this._onContent();
    if (content === false) return;
    this._shown = true;
    content = content + "";

    var $target = this._target;
    var $parent = $("body");
    var $node = this._createTooltipNode(content);

    this._tooltip = $node;
    $parent.append($node);
    $node.css({position: "absolute", left: -9999, top: -9999, zIndex: 1000});

    this.position();

    if (this._transitionClass) {
        if (noTransition) {
            $node.addClass(this._transitionClass);
        } else {
            $node.detach();
            $node.addClass(this._transitionClass + " initial");
            $node.appendTo($parent);
            $node[0].offsetHeight;
            $node.removeClass("initial");
        }
    }
};

Tooltip.prototype.refresh = function() {
    if (!this._shown) return;
    this.hide();
    this._show(true);
};

Tooltip.prototype.renderArrow = function($node, direction, align) {
    var gap = this._gap;
    if (gap <= 0) return;
    var backgroundColor = $node.css("backgroundColor");
    var borderColor = $node.css("borderColor");
    var borderWidth = parseInt($node.css("borderWidth"), 10) || 0;

    var nodeWidth = $node.outerWidth();
    var nodeHeight = $node.outerHeight();
    var backGroundArrowGap = borderWidth === 0 ? gap : Math.max(1, gap - borderWidth);
    var borderArrowTop = 0;
    var borderArrowLeft = 0;

    var left, top;
    var borderSpec = {};

    if (direction === "up") {
        top = -backGroundArrowGap;
        borderSpec = {
            right: [gap, false],
            left: [gap, false],
            top: [0, false],
            bottom: [gap, true]
        };

        if (align === "begin") {
            left = gap;
        } else if (align === "middle") {
            left = nodeWidth / 2 - gap;
        } else if (align === "end") {
            left = nodeWidth - gap * 2 - gap;
        }

        borderArrowTop = top - borderWidth;
        borderArrowLeft = left;
    } else if (direction === "down") {
        top = nodeHeight - gap / 2;
        borderSpec = {
            right: [gap, false],
            left: [gap, false],
            top: [gap, true],
            bottom: [0, false],
        };

        if (align === "begin") {
            left = gap;
        } else if (align === "middle") {
            left = nodeWidth / 2 - gap;
        } else if (align === "end") {
            left = nodeWidth - gap * 2 - gap;
        }

        borderArrowTop = top + borderWidth;
        borderArrowLeft = left;
    } else if (direction === "left") {
        left = -backGroundArrowGap;
        borderSpec = {
            right: [gap, true],
            left: [0, false],
            top: [gap, false],
            bottom: [gap, false]
        };

        if (align === "begin") {
            top = gap;
        } else if (align === "middle") {
            top = nodeHeight / 2 - gap;
        } else if (align === "end") {
            top = nodeHeight - gap * 2 - gap;
        }


        borderArrowTop = top;
        borderArrowLeft = left - borderWidth;
    } else if (direction === "right") {
        left = nodeWidth - gap / 2;
        borderSpec = {
            right: [0, false],
            left: [gap, true],
            top: [gap, false],
            bottom: [gap, false]
        };

        if (align === "begin") {
            top = gap;
        } else if (align === "middle") {
            top = nodeHeight / 2 - gap;
        } else if (align === "end") {
            top = nodeHeight - gap * 2 - gap;
        }

        borderArrowTop = top;
        borderArrowLeft = left + borderWidth;
    }

    var backgroundArrow = $("<div>").addClass("tooltip-arrow-rendering").css({
        position: "absolute",
        top: top,
        left: left,
        borderStyle: "solid",
        borderRightWidth: borderSpec.right[0],
        borderLeftWidth: borderSpec.left[0],
        borderTopWidth: borderSpec.top[0],
        borderBottomWidth: borderSpec.bottom[0],
        borderRightColor: borderSpec.right[1] ? backgroundColor : "transparent",
        borderLeftColor: borderSpec.left[1] ? backgroundColor : "transparent",
        borderTopColor: borderSpec.top[1] ? backgroundColor : "transparent",
        borderBottomColor: borderSpec.bottom[1] ? backgroundColor : "transparent",
        zIndex: 2
    });

    backgroundArrow.appendTo($node);

    if (borderWidth !== 0) {
        var borderArrow = $("<div>").addClass("tooltip-arrow-rendering").css({
            position: "absolute",
            top: borderArrowTop,
            left: borderArrowLeft,
            borderStyle: "solid",
            borderRightWidth: borderSpec.right[0],
            borderLeftWidth: borderSpec.left[0],
            borderTopWidth: borderSpec.top[0],
            borderBottomWidth: borderSpec.bottom[0],
            borderRightColor: borderSpec.right[1] ? borderColor : "transparent",
            borderLeftColor: borderSpec.left[1] ? borderColor : "transparent",
            borderTopColor: borderSpec.top[1] ? borderColor : "transparent",
            borderBottomColor: borderSpec.bottom[1] ? borderColor : "transparent",
            zIndex: 1
        });

        borderArrow.appendTo($node);
    }
};

Tooltip.prototype.hide = function() {
    this._target.off("mousemove", this.mousemoved);
    this._clearDelay();
    if (!this._shown) return;
    this._shown = false;
    if (this._transitionClass) {
        var $node = this._tooltip;
        var $parent = $node.parent();
        $node.detach();
        $node.addClass(this._transitionClass).removeClass("initial");
        $node.appendTo($parent);
        $node[0].offsetHeight;
        $node.addClass("initial");
        var duration = util.getLongestTransitionDuration($node);
        var self = this;
        this._delayTimeoutId = setTimeout(function() {
            self._tooltip.remove();
            self._tooltip = NULL;
        }, duration);
    } else {
        this._tooltip.remove();
        this._tooltip = NULL;
    }
};

Tooltip.prototype.mousemoved = function(e) {
    this._clearDelay();
    this._x = e.clientX;
    this._y = e.clientY;
    this._delayTimeoutId = setTimeout(this._show, this._delay);
};

Tooltip.prototype.mouseEntered = function(e) {
    this._target.on("mousemove", this.mousemoved);
    this.mousemoved(e);
};

Tooltip.prototype.mouseLeft = function(e) {
    this.hide();
};

Tooltip.prototype.destroy = function() {
    $(window).off("resize", this.position);
    $(window).off("blur", this.hide);
    util.documentHidden.removeListener("change", this.hide);
    if (this._target) {
        this.hide();
        this._target.off("mouseenter", this.mouseEntered);
        this._target.off("mouseleave", this.mouseLeft);
        this._target.off("click", this.hide);
        this._target = this._domNode = null;
    }
};

Tooltip.prototype.$ = function() {
    return this._domNode;
};

return Tooltip; })();

;
;
const PanelControls = (function() { "use strict";
var ret = {};



ret.makeTooltip = function(target, content) {
    return new Tooltip({
        transitionClass: "fade-in",
        preferredDirection: "up",
        preferredAlign: "begin",
        container: $("body"),
        arrow: false,
        target: target,
        delay: 600,
        classPrefix: "app-tooltip autosized-tooltip minimal-size-tooltip",
        content: content
    });
};

return ret; })();

;
;
const PlayerTimeManager = (function() {"use strict";

const DISPLAY_ELAPSED = 0;
const DISPLAY_REMAINING = 1;

const TIME_DISPLAY_PREFERENCE_KEY = "time-display";

function PlayerTimeManager(dom, player, opts) {
    opts = Object(opts);
    this._domNode = $(dom);
    this.player = player;
    this.displayMode = DISPLAY_ELAPSED;
    this.seeking = false;
    this.totalTime = 0;
    this.currentTime = 0;
    this.seekSlider = opts.seekSlider;
    this._totalTimeDomNode = this.$().find(opts.totalTimeDom);
    this._currentTimeDomNode = this.$().find(opts.currentTimeDom);
    this._timeContainerDomNode = this.$().find(opts.timeContainerDom);
    this._timeProgressDomNode = this.$().find(opts.timeProgressDom);
    this._timeSeparatorDomNode = this.$().find(opts.timeSeparatorDom);
    this.hidden = true;

    this.slideBegun = this.slideBegun.bind(this);
    this.slideEnded = this.slideEnded.bind(this);
    this.slided = this.slided.bind(this);
    this.playerTimeProgressed = this.playerTimeProgressed.bind(this);
    this.containerClicked = this.containerClicked.bind(this);
    this.newTrackLoaded = this.newTrackLoaded.bind(this);

    this.seekSlider.on("slideBegin", this.slideBegun);
    this.seekSlider.on("slideEnd", this.slideEnded);
    this.seekSlider.on("slide", this.slided);
    this.player.on("progress", this.playerTimeProgressed);
    this.player.on("newTrackLoad", this.newTrackLoaded);
    this.$timeContainer().click(this.containerClicked);


    var self = this;
    keyValueDatabase.getInitialValues().then(function(values) {
        if (TIME_DISPLAY_PREFERENCE_KEY in values) {
            self.displayMode = values[TIME_DISPLAY_PREFERENCE_KEY];
        }
    });
}


PlayerTimeManager.prototype.$timeSeparator = function() {
    return this._timeSeparatorDomNode;
};

PlayerTimeManager.prototype.$timeProgress = function() {
    return this._timeProgressDomNode;
};

PlayerTimeManager.prototype.$timeContainer = function() {
    return this._timeContainerDomNode;
};

PlayerTimeManager.prototype.$currentTime = function() {
    return this._currentTimeDomNode;
};

PlayerTimeManager.prototype.$totalTime = function() {
    return this._totalTimeDomNode;
};

PlayerTimeManager.prototype.$ = function() {
    return this._domNode;
};

PlayerTimeManager.prototype.enableSeeking = function() {
    this.seeking = true;
};

PlayerTimeManager.prototype.disableSeeking = function() {
    this.seeking = false;
};

PlayerTimeManager.prototype.slideBegun = function() {
    this.enableSeeking();
};

PlayerTimeManager.prototype.slideEnded = function(percentage) {
    this.disableSeeking();
    if (this.player.isStopped) return;
    var duration = this.player.getDuration();
    if (duration) {
        this.setCurrentTime(duration * percentage);
        this.player.seek(duration * percentage);
    }
};

PlayerTimeManager.prototype.slided = function(percentage) {
    if (this.player.isStopped) return;
    var duration = this.player.getDuration();
    if (duration) {
        this.setCurrentTime(duration * percentage);
    }
};

PlayerTimeManager.prototype.playerTimeProgressed = function(playedTime, totalTime) {
    if (this.seeking) return;
    this.setCurrentTime(playedTime);
    this.setTotalTime(totalTime);
};

PlayerTimeManager.prototype.setTotalTime = function(time) {
    time = Math.round(time);
    this.checkVisibility(time);
    if (time !== this.totalTime) {
        this.totalTime = time;
        if (this.displayMode === DISPLAY_ELAPSED) {
            this.$totalTime().text(util.toTimeString(time));
        }
        this.updateProgress();
    }
};

PlayerTimeManager.prototype.setCurrentTime = function(time) {
    time = Math.round(time);

    if (time !== this.currentTime) {
        this.currentTime = time;
        this.$currentTime().text(util.toTimeString(time));
        if (this.displayMode === DISPLAY_REMAINING) {
            time = Math.max(0, this.totalTime - time);
            this.$totalTime().text("-" + util.toTimeString(time));
        }
        this.updateProgress();
    }
};

PlayerTimeManager.prototype.updateProgress = function() {
    var progressPercentage = (this.currentTime / this.totalTime) || 0;
    var width = this.$timeProgress().width() + 5;
    this.$timeProgress().css("left", -(1 - progressPercentage) * width);
};

PlayerTimeManager.prototype.forceUpdate = function() {
    var currentTime = this.currentTime;
    var totalTime = this.totalTime;
    this.currentTime = currentTime + 1;
    this.totalTime = totalTime + 1;
    this.setTotalTime(totalTime);
    this.setCurrentTime(currentTime);
};

PlayerTimeManager.prototype.toggleDisplayMode = function() {
    if (this.displayMode === DISPLAY_ELAPSED) {
        this.displayMode = DISPLAY_REMAINING;
    } else {
        this.displayMode = DISPLAY_ELAPSED;
    }
    keyValueDatabase.set(TIME_DISPLAY_PREFERENCE_KEY, this.displayMode);
    this.forceUpdate();
};

PlayerTimeManager.prototype.containerClicked = function() {
    this.toggleDisplayMode();
};

PlayerTimeManager.prototype.hide = function() {
    if (this.hidden) return;
    this.hidden = true;
    this.$currentTime().parent().addClass("hidden");
    this.$totalTime().parent().addClass("hidden");
};

PlayerTimeManager.prototype.show = function() {
    if (!this.hidden) return;
    this.hidden = false;
    this.$currentTime().parent().removeClass("hidden");
    this.$totalTime().parent().removeClass("hidden");
};

PlayerTimeManager.prototype.checkVisibility = function(duration) {
    if (duration === 0) {
        this.hide();
    } else {
        this.show();
    }
};

PlayerTimeManager.prototype.newTrackLoaded = function() {
    if (this.seeking) return;
    var duration = Math.max(this.player.getProbableDuration() || 0, 0);
    this.checkVisibility(duration);
    this.setTotalTime(duration);
    this.currentTime = -1;
    this.setCurrentTime(0);
};

return PlayerTimeManager; })();

;
;
const PlayerVolumeManager = (function() {"use strict";

function PlayerVolumeManager(dom, player, opts) {
    var self = this;
    opts = Object(opts);
    this.player = player;
    this.volumeSlider = opts.volumeSlider;

    this._domNode = $(dom);
    this._muteDom = this.$().find(opts.muteDom);
    this._muteTooltip = PanelControls.makeTooltip(this.$mute(),function() {
        return self.player.isMuted() ? "<p><strong>Unmute</strong> volume.</p>"
                                     : "<p><strong>Mute</strong> volume.</p>";
    });

    this.slideBegun = this.slideBegun.bind(this);
    this.slideEnded = this.slideEnded.bind(this);
    this.slided = this.slided.bind(this);
    this.volumeChanged = this.volumeChanged.bind(this);
    this.muteClicked = this.muteClicked.bind(this);
    this.muteChanged = this.muteChanged.bind(this);

    this.volumeSlider.on("slideBegin", this.slideBegun);
    this.volumeSlider.on("slideEnd", this.slideEnded);
    this.volumeSlider.on("slide", this.slided);
    this.player.on("volumeChange", this.volumeChanged);
    this.player.on("muted", this.muteChanged);
    this.$mute().click(this.muteClicked);
    this.volumeChanged();
    this.muteChanged(this.player.isMuted());
}


PlayerVolumeManager.prototype.$mute = function() {
    return this._muteDom;
};

PlayerVolumeManager.prototype.$sliderBg = function() {
    return this.volumeSlider.$().find(".slider-bg");
};

PlayerVolumeManager.prototype.$sliderKnob = function() {
    return this.volumeSlider.$().find(".slider-knob");
};

PlayerVolumeManager.prototype.$ = function() {
    return this._domNode;
};

PlayerVolumeManager.prototype.volumeChanged = function() {
    if (this.player.isMuted()) {
        this.player.toggleMute();
    }
    var p = this.player.getVolume();
    var width = this.$sliderKnob().parent().width();
    this.$sliderBg().css("width", p * width);
    this.$sliderKnob().css("left", p * (width - 5) - 5);
};

PlayerVolumeManager.prototype.slideBegun = function() {};
PlayerVolumeManager.prototype.slideEnded = function(percentage) {};
PlayerVolumeManager.prototype.slided = function(percentage) {
    this.player.setVolume(percentage);
};

PlayerVolumeManager.prototype.muteClicked = function() {
    this.player.toggleMute();
};

PlayerVolumeManager.prototype.muteChanged = function(muted) {
    var elems = this.volumeSlider.$().add(
                    this.$sliderBg(),
                    this.$sliderKnob());
    if (muted) {
        this.$mute().find(".glyphicon")
                .removeClass("glyphicon-volume-up")
                .addClass("glyphicon-volume-off");
        elems.addClass("slider-inactive");
    } else {
        this.$mute().find(".glyphicon")
                .addClass("glyphicon-volume-up")
                .removeClass("glyphicon-volume-off");
        elems.removeClass("slider-inactive");
    }
    this._muteTooltip.refresh();
};

return PlayerVolumeManager;})();

;
;
const PlayerPictureManager = (function() {"use strict";

function PlayerPictureManager(dom, player, opts) {
    opts = Object(opts);
    this._domNode = $(dom);
    this.player = player;
    this.favicon = $(null);
    this.image = null;

    this.newTrackLoaded = this.newTrackLoaded.bind(this);

    this.player.on("newTrackLoad", this.newTrackLoaded);
}

PlayerPictureManager.prototype.$ = function() {
    return this._domNode;
};

PlayerPictureManager.prototype.newTrackLoaded = function() {
    $(this.image).remove();
    const self = this;

    this.$().find("img").remove();
    $("favicon").remove();
    this.favicon.remove();
    var image = this.player.getImage();
    if (!image) return;

    this.image = image;
    image.width = image.height = 128;

    $(image).one("error", function() {
        $(this).addClass("erroneous-image");
    });

    $(image).addClass("fade-in initial").appendTo(this.$());
    image.offsetWidth;
    $(image).removeClass("initial").addClass("end");
    this.favicon = $("<link>", {rel: "shortcut icon", href: image.src}).appendTo($("head"));
};


return PlayerPictureManager;})();

;
;
const PlaylistModeManager = (function() {"use strict";

const SHUFFLE = "shuffle";
const NORMAL = "normal";
const REPEAT = "repeat";

const SHUFFLE_MODE_TOOLTIP = "<p>The next track is randomly chosen. Higher rated tracks " +
        "and tracks that have not been recently played are more likely to be chosen.</p>";

const REPEAT_MODE_TOOLTIP = "<p>The track is repeated.</p>";

function PlaylistModeManager(dom, playlist) {
    var self = this;
    this.playlist = playlist;
    this._domNode = $(dom);

    this.shuffleTooltip = PanelControls.makeTooltip(this.$shuffle(), function() {
        return self.getMode() === SHUFFLE ? "<p><strong>Disable</strong> shuffle mode</p>"
                                          : "<p><strong>Enable</strong> shuffle mode</p>" +
                                            SHUFFLE_MODE_TOOLTIP;
    });

    this.repeatTooltip = PanelControls.makeTooltip(this.$repeat(), function() {
        return self.getMode() === REPEAT ? "<p><strong>Disable</strong> repeat mode</p>"
                                         : "<p><strong>Enable</strong> repeat mode</p>" +
                                            REPEAT_MODE_TOOLTIP;
    });

    this.shuffleClicked = this.shuffleClicked.bind(this);
    this.repeatClicked = this.repeatClicked.bind(this);
    this.update = this.update.bind(this);

    playlist.on("modeChange", this.update);
    this.$shuffle().on("click", this.shuffleClicked);
    this.$repeat().on("click", this.repeatClicked);

    this.update();
}

PlaylistModeManager.prototype.$ = function() {
    return this._domNode;
};

PlaylistModeManager.prototype.$allButtons = function() {
    return this.$shuffle().add(this.$repeat());
};

PlaylistModeManager.prototype.$shuffle = function() {
    return this.$().find(".shuffle-mode-button");
};

PlaylistModeManager.prototype.$repeat = function() {
    return this.$().find(".repeat-mode-button");
};

PlaylistModeManager.prototype.shuffleClicked = function() {
    this.$allButtons().removeClass("just-deactivated");
    this.setMode(this.getMode() === SHUFFLE ? NORMAL : SHUFFLE);

    if (this.getMode() !== SHUFFLE) {
        this.$shuffle().addClass("just-deactivated");
    }
    this.$shuffle().one("mouseleave", function() {
        $(this).removeClass("just-deactivated");
    });
};

PlaylistModeManager.prototype.repeatClicked = function() {
    this.$allButtons().removeClass("just-deactivated");
    this.setMode(this.getMode() === REPEAT ? NORMAL : REPEAT);

    if (this.getMode() !== REPEAT) {
        this.$repeat().addClass("just-deactivated");
    }

    this.$repeat().one("mouseleave", function() {
        $(this).removeClass("just-deactivated");
    });
};

PlaylistModeManager.prototype.getMode = function() {
    return this.playlist.getMode();
};

PlaylistModeManager.prototype.update = function() {
    this.$allButtons().removeClass("active");

    switch (this.getMode()) {
        case "shuffle":
        this.$shuffle().addClass("active");
        break;

        case "repeat":
        this.$repeat().addClass("active");
        break;
    }

    this.shuffleTooltip.refresh();
    this.repeatTooltip.refresh();

};

PlaylistModeManager.prototype.setMode = function(mode) {
    this.playlist.tryChangeMode(mode);
};



return PlaylistModeManager; })();

;
;
var PlaylistNotifications = (function() { "use strict";

const Notification = window.Notification;

const NOTIFICATIONS_EXPLANATION = "<p>When this browser window is not active, " +
        "a notification will be shown when the current track changes. The notification " +
        "can be clicked to skip the track.</p>";

const NOTIFICATIONS_TOOLTIP_ENABLED_MESSAGE = "<p><strong>Disable</strong> notifications</p>"

const NOTIFICATIONS_TOOLTIP_DISABLED_MESSAGE = "<p><strong>Enable</strong> notifications</p>" +
    NOTIFICATIONS_EXPLANATION;

function PlaylistNotifications(dom, player) {
    var self = this;
    this._domNode = $(dom);
    this.playlist = player.playlist;
    this.player = player;
    this.enabled = this.notificationsEnabled();
    this.permissionsPromise = null;
    this.tabVisible = !util.documentHidden.value();
    this.currentNotification = null;
    this.currentNotificationCloseTimeout = -1;
    this.tooltip = PanelControls.makeTooltip(this.$(), function() {
        return self.enabled ? NOTIFICATIONS_TOOLTIP_ENABLED_MESSAGE
                            : NOTIFICATIONS_TOOLTIP_DISABLED_MESSAGE;
    });

    this.settingClicked = this.settingClicked.bind(this);
    this.visibilityChanged = this.visibilityChanged.bind(this);
    this.newTrackLoaded = this.newTrackLoaded.bind(this);
    this.notificationErrored = this.notificationErrored.bind(this);
    this.notificationClicked = this.notificationClicked.bind(this);

    this.$().on("click", this.settingClicked);
    util.documentHidden.on("change", this.visibilityChanged);
    this.player.on("newTrackLoad", this.newTrackLoaded);

    this.update();
}

PlaylistNotifications.prototype.$ = function() {
    return this._domNode;
};

PlaylistNotifications.prototype.update = function() {
    if (this.enabled) {
        this.$().off("mouseleave.justdectivated")
        this.$().removeClass("just-deactivated").addClass("active");
    } else {
        this.$().removeClass("active").addClass("just-deactivated");
        this.$().one("mouseleave.justdectivated", function() {
            $(this).removeClass("just-deactivated");
        });
    }
    this.tooltip.refresh();
};

PlaylistNotifications.prototype.clearTimers = function() {
    if (this.currentNotificationCloseTimeout !== -1) {
        clearTimeout(this.currentNotificationCloseTimeout);
        this.currentNotificationCloseTimeout = -1;
    }
};

PlaylistNotifications.prototype.destroyCurrentNotification = function() {
    if (this.currentNotificationCloseTimeout !== -1) {
        clearTimeout(this.currentNotificationCloseTimeout);
        this.currentNotificationCloseTimeout = -1;
    }

    if (this.currentNotification) {
        var notification = this.currentNotification;
        this.currentNotification = null;
        notification.removeEventListener("error", this.notificationErrored, false);
        notification.removeEventListener("click", this.notificationClicked, false);
        notification.close();
    }
};

PlaylistNotifications.prototype.notificationClicked = function(e) {
    e.preventDefault();
    this.clearTimers();
    this.playlist.next();
};

PlaylistNotifications.prototype.notificationErrored = function(e) {
    this.destroyCurrentNotification();
};

PlaylistNotifications.prototype.showNotificationForCurrentTrack = function() {
    var track = this.playlist.getCurrentTrack();
    var tagData = track.getTagData();
    var body = "";
    if (tagData) body = tagData.getAlbum() || "";

    if (body) {
        body += "\n\n(Click to skip)";
    } else {
        body += "(Click to skip)";
    }

    var title = (track.getIndex() + 1) + ". " +
            track.formatName() + " ("+track.formatTime()+")";

    var notification = new Notification(title, {
        tag: "track-change-notification",
        body: body,
        icon: track.getImageUrl()
    });

    this.currentNotification = notification;
    notification.addEventListener("click", this.notificationClicked, false);
    notification.addEventListener("error", this.notificationErrored, false);
};

PlaylistNotifications.prototype.newTrackLoaded = function() {
    this.clearTimers();
    if (this.shouldNotify()) {
        var self = this;
        self.showNotificationForCurrentTrack();
        self.currentNotificationCloseTimeout = setTimeout(function() {
            self.currentNotificationCloseTimeout = -1;
            self.destroyCurrentNotification();
        }, 10000);
    } else {
        this.destroyCurrentNotification();
    }
};

PlaylistNotifications.prototype.toggleSetting = function() {
    var self = this;
    if (this.enabled) {
        if (this.permissionsPromise) {
            this.permissionsPromise.cancel();
            this.permissionsPromise = null;
        }
        this.enabled = false;
        self.update();
    } else {

        if (this.permissionsPromise) return;
        this.requestPermission().then(function(permission) {
            self.enabled = permission;
            self.update();
        });
    }
};

PlaylistNotifications.prototype.visibilityChanged = function() {
    this.tabVisible = !util.documentHidden.value();
};

PlaylistNotifications.prototype.settingClicked = function() {
    this.toggleSetting();
};

PlaylistNotifications.prototype.shouldNotify = function() {
    return this.enabled && !this.tabVisible;
};

PlaylistNotifications.prototype.notificationsEnabled = function() {
    return typeof Notification === "function" && Notification.permission === "granted";
};

PlaylistNotifications.prototype.requestPermission = function() {
    if (this.permissionsPromise) return Promise.reject(new Error("already requested"));
    var ret;
    var self = this;
    if (typeof Notification !== "function") {
        ret = Promise.resolve(false);
    } else if (Notification.permission === "granted") {
        ret = Promise.resolve(true);
    } else {
        ret = new Promise(function(resolve) {
            Notification.requestPermission(function() {
                setTimeout(function() {
                    resolve(self.notificationsEnabled());
                }, 1);
            });
        });
    }

    ret = ret.finally(function() {
        self.permissionsPromise = null;
    });

    this.permissionsPromise = ret;
    return ret;
};

return PlaylistNotifications;
})();

;
;
var AudioVisualizer = (function() {"use strict";

// https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel
const reverseBits = function(v, count) {
    // swap odd and even bits
    v = ((v >>> 1) & 0x55555555) | ((v & 0x55555555) << 1);
    // swap consecutive pairs
    v = ((v >>> 2) & 0x33333333) | ((v & 0x33333333) << 2);
    // swap nibbles ...
    v = ((v >>> 4) & 0x0F0F0F0F) | ((v & 0x0F0F0F0F) << 4);
    // swap bytes
    v = ((v >>> 8) & 0x00FF00FF) | ((v & 0x00FF00FF) << 8);
    // swap 2-byte long pairs
    v = ( v >>> 16             ) | ( v               << 16);
    return v >>> (32 - count);
};

const weights = new Float32Array([
    0, 0,
    10, 0.0003019951720402013,
    12.5, 0.0006760829753919819,
    16, 0.0014621771744567184,
    20, 0.0029853826189179603,
    25, 0.10351421666793437,
    31.5, 0.19054607179632474,
    40, 0.481131121482591,
    50, 0.5095408738576246,
    63, 0.515408738576246,
    80, 0.525408738576246,
    100, 0.5395408738576246,
    125, 0.5595408738576246,
    160, 0.4195408738576246,
    200, 0.4395408738576246,
    250, 0.4495408738576246,
    315, 0.4595408738576246,
    400, 0.4754399373371569,
    500, 0.5918309709189364,
    630, 0.6035261221856173,
    800, 0.6220108393559098,
    1000, 0.690108393559098,
    1250, 0.680108393559098,
    1600, 0.67108393559098,
    2000, 0.660108393559098,
    2500, 0.650108393559098,
    3150, 0.64108393559098,
    4000, 0.630108393559098,
    5000, 0.620108393559098,
    6300, 0.930108393559098,
    8000, 1.670108393559098,
    10000, 1.79498942093324559,
    12500, 1.826095368972401691,
    16000, 1.9546773514128719823,
    20000, 0.34276778654645035
]);

function makeBuffer(bufferSize, bins) {
    return [
        new Float32Array(bufferSize),
        new Float32Array(bins)
    ];
}

const buffers = {};

function AudioVisualizer(audioContext, opts) {
    EventEmitter.call(this);
    opts = Object(opts);
    this.sampleRate = audioContext.sampleRate;
    this.maxFrequency = opts.maxFrequency || 18500;
    this.minFrequency = opts.minFrequency || 20;
    this.fps = opts.fps || 48;
    this.bufferSize = 2;
    this.bins = opts.bins || this.bufferSize / 2;
    this.baseSmoothingConstant = opts.baseSmoothingConstant || 0.00007;

    while (this.bufferSize * this.fps < this.sampleRate) {
        this.bufferSize *= 2;
    }

    if (this.bufferSize > 16384) {
        throw new Error("too low fps " +this.fps+ " for sample rate" + this.sampleRate);
    }

    var buffer = buffers[this.bufferSize + " " + this.bins];
    if (!buffer) {
        buffer = buffers[this.bufferSize + " " + this.bins] = makeBuffer(this.bufferSize, this.bins);
    }
    this.buffer = buffer;

    var bins = this.buffer[1];
    for (var i = 0; i < bins.length; ++i) {
        bins[i] = 0;
    }

    this.destroyed = false;
    this.connected = false;
    this.paused = false;
    this.handleAudioProcessingEvent = this.handleAudioProcessingEvent.bind(this);
    this.analyser = audioContext.createAnalyser();
    this.analyser.fftSize = this.bufferSize;
    this.frameId = requestAnimationFrame(this.handleAudioProcessingEvent);
}
util.inherits(AudioVisualizer, EventEmitter);

AudioVisualizer.prototype.pause = function() {
    if (this.paused) return;
    this.paused = true;
    this.emit("pause");
};

AudioVisualizer.prototype.resume = function() {
    if (!this.paused) return;
    this.paused = false;
    this.emit("resume");
};

AudioVisualizer.prototype.getAudioNode = function() {
    return this.analyser;
};

AudioVisualizer.prototype.destroy = function() {
    this.destroyed = true;
    this.removeAllListeners();
    cancelAnimationFrame(this.frameId);
    this.disconnect();
};

AudioVisualizer.prototype.disconnect = function() {
    var ret = this.analyser.disconnect.apply(this.analyser, arguments);
    this.connected = false;
    return ret;
};

AudioVisualizer.prototype.connect = function() {
    var ret = this.analyser.connect.apply(this.analyser, arguments);
    this.connected = true;
    return ret;
};

AudioVisualizer.prototype.handleAudioProcessingEvent = function(now) {
    if (this.destroyed) return;
    this.frameId = requestAnimationFrame(this.handleAudioProcessingEvent);
    if (!this.connected || this.listenerCount("data") === 0) {
        return;
    } else if (this.paused) {
        this.emit("data", {
            paused: true,
            bins: this.buffer[1],
            maxPower: this.maxPower,
            now: now
        });
        return;
    }

    this.analyser.getFloatTimeDomainData(this.buffer[0]);
    this.hammingWindow();
    this.forwardFft();
    this.calculateBins();
    this.emit("data", {
        paused: false,
        bins: this.buffer[1],
        maxPower: this.maxPower,
        now: now
    });
};

AudioVisualizer.prototype.calculateBins = function() {
    const X = this.buffer[0];
    const imOffset = this.bufferSize >> 1;
    const bins = this.buffer[1];
    const smoothingConstant = Math.pow(this.baseSmoothingConstant, this.bufferSize / this.sampleRate);
    const inverseSmoothingConstant = 1 - smoothingConstant;

    const fftFreqs = Math.ceil(this.maxFrequency / (this.sampleRate / this.bufferSize));
    const binSize = bins.length;

    var binFrequencyStart = 1;
    var aWeightIndex = 2;
    var previousEnd = 0;
    for (var i = 0; i < binSize; ++i) {
        var binFrequencyEnd = ((Math.pow((i + 1) / binSize, 2) * fftFreqs) | 0);

        if (binFrequencyEnd <= previousEnd) {
            binFrequencyEnd = previousEnd + 1;
        }
        previousEnd = binFrequencyEnd;
        binFrequencyEnd = Math.min(fftFreqs, binFrequencyEnd) + 1;

        var binWidth = Math.max(1, binFrequencyEnd - binFrequencyStart);
        var maxPower = 0;
        var binFrequency = 0;

        for (var j = 0; j < binWidth; ++j) {
            var re = X[binFrequencyStart + j];
            var im = X[imOffset + binFrequencyStart + j];
            var power = re * re + im * im;
            if (power > maxPower) {
                binFrequency = ((binFrequencyStart + j) * this.sampleRate / this.bufferSize) | 0;
                maxPower = power;
            }
        }

        maxPower = Math.max(0, Math.log(maxPower));

        for (var j = aWeightIndex; j < weights.length; j += 2) {
            var weightFrequency = weights[j];

            if (binFrequency < weightFrequency) {
                maxPower *= weights[j - 1];
                aWeightIndex = j;
                break;
            }
        }

        maxPower = Math.min(0.97, bins[i] * smoothingConstant + inverseSmoothingConstant * maxPower * 0.24);

        bins[i] = maxPower;
        binFrequencyStart = binFrequencyEnd;
    }
};

AudioVisualizer.prototype.hammingWindow = function() {
    const x = this.buffer[0];
    const N = x.length;
    const pi2 = Math.PI * 2;
    const a = 2 * Math.pow(Math.sin(-Math.PI / N), 2);
    const b = Math.sin(-Math.PI * 2 / N);
    var tmp;
    var cos = 1;
    var sin = 0;
    for (var n = 0; n < N; ++n) {
        x[n] *= (0.53836 - 0.46164 * cos);
        tmp = cos - (a * cos + b * sin);
        sin = sin + (b * cos - a * sin);
        cos = tmp;
    }
};

AudioVisualizer.prototype.forwardFft = function() {
    realFft(this.buffer[0]);
};


return AudioVisualizer; })();

;
;
var features = features || {};

(function() {
    var input = document.createElement("input");

    var allowMimes = [];
    var allowExtensions = [];

    var featureMap = {
        "aac": "audio/aac",
        "mp1,mp2,mp3,mpg,mpeg": "audio/mp3",
        "mp4,m4a": "audio/mp4",
        "wav": "audio/wav",
        "ogg,oga": "audio/ogg",
        "opus": "audio/opus",
        "webm": "audio/webm"
    };

    features.readFiles = typeof FileReader == "function" && new FileReader()
        .readAsBinaryString;
    features.directories = ("webkitdirectory" in input ||
        "directory" in input ||
        "mozdirectory" in input);
    features.allowMimes = allowMimes;
    features.allowExtensions = allowExtensions;
    features.touch = ('ontouchstart' in window) ||
        navigator.maxTouchPoints > 0 ||
        navigator.msMaxTouchPoints > 0;

    var canPlay = (function() {
        var audio = document.createElement("audio");
        return function(mime) {
            return !!(audio.canPlayType(mime).replace(/no/gi, ""));
        };
    })();

    Object.keys(featureMap).forEach(function(extensionString) {
        var mime = featureMap[extensionString];
        var extensions = extensionString.split(",");
        if (canPlay(mime)) {
            allowExtensions.push.apply(allowExtensions, extensions);
            allowMimes.push(mime);
        }
    });

    if (!features.touch) {
        $("body").addClass("no-touch");
    }
})();

;
;
var TrackWasRemovedError = util.subClassError("TrackWasRemovedError");

;
;
var FileError = util.subClassError("FileError", function(fileError) {
    this.message = fileError.message;
    this.name = fileError.name;
});

;
;
var AudioError = util.subClassError("AudioError", function(code) {
    this.code = code;
    var audioCodeString;
    switch (code) {
        case MediaError.MEDIA_ERR_ABORTED: audioCodeString = "MEDIA_ERR_ABORTED"; break;
        case MediaError.MEDIA_ERR_NETWORK: audioCodeString = "MEDIA_ERR_NETWORK"; break;
        case MediaError.MEDIA_ERR_DECODE: audioCodeString = "MEDIA_ERR_DECODE"; break;
        case MediaError.MEDIA_ERR_SRC_NOT_SUPPORTED: audioCodeString = "MEDIA_ERR_SRC_NOT_SUPPORTED"; break;
        default: audioCodeString = "UNKNOWN_ERROR"; break;
    }

    this.message = "Cannot load audio: " + audioCodeString;
});

;
;
var Track = (function() {"use strict";

const DEFAULT_IMAGE_URL = "/dist/images/icon.png";

const ANALYSIS_TOOLTIP_MESSAGE =
"<p>This track is currently being analyzed for loudness normalization, silence removal and clipping protection.</p>" +
"<p>Playing this track before the analysis has been completed can lead to a below acceptable listening experience.</p>";

function Track(audioFile) {
    EventEmitter.call(this);
    this.file = audioFile;
    this.tagData = null;
    this.error = false;
    this.index = -1;
    this._domNode = this._createDomNode();
    this._searchString = null;
    this._isAttached = false;
    this._lastPlayed = 0;
    this._statusTooltip = null;
    this.setTrackDuration(this.formatTime());
    this.setTrackText(this.formatName());
}
util.inherits(Track, EventEmitter);


const NULL = $(null);

Track.prototype._createDomNode = function() {
    var self = this;
    var dom = $("<div>", {
        class: "app-track-container"
    }).html("<div class='app-track'>" +
        "<span class='app-track-name notextflow'>" +
            "<span></span>. " +
            "<span></span>" +
        "</span>" +
        "<span class='app-track-status'></span>" +
        "<span class='app-track-time'></span>" +
        "<span class='app-track-rating'>" +
            "<span data-rating='1' class='glyphicon glyphicon-star rating-input'></span>" +
            "<span data-rating='2' class='glyphicon glyphicon-star rating-input'></span>" +
            "<span data-rating='3' class='glyphicon glyphicon-star rating-input'></span>" +
            "<span data-rating='4' class='glyphicon glyphicon-star rating-input'></span>" +
            "<span data-rating='5' class='glyphicon glyphicon-star rating-input'></span>" +
        "</span>" +
        "</div>" +
    "</div>");

    dom.find(".app-track-rating").on("mouseenter mouseleave click mousedown dblclick", ".rating-input", function(e) {
        e.stopImmediatePropagation();
        if (e.type === "mouseenter") return self.ratingInputMouseEntered(e);
        if (e.type === "mouseleave") return self.ratingInputMouseLeft(e);
        if (e.type === "click") return self.ratingInputClicked(e);
        if (e.type === "dblclick") return self.ratingInputDoubleClicked(e);
    });

    dom.find(".app-track")
        .on("dblclick", function(e) {
            self.doubleClicked(e);
        })
        .height(playlist.main.getItemHeight());
    return dom;
};

Track.prototype.$ = function() {
    return this._domNode;
};

Track.prototype.$container = function() {
    return this.$().find(".app-track");
};

Track.prototype.$trackStatus = function() {
    return this.$().find(".app-track-status");
};

Track.prototype.$trackName = function() {
    return this.$().find(".app-track-name span").last();
};

Track.prototype.$trackNumber = function() {
    return this.$().find(".app-track-name span").first();
};

Track.prototype.$trackTime = function() {
    return this.$().find(".app-track-time");
};

Track.prototype.$ratingInputs = function() {
    return this.$().find(".rating-input");
};

Track.prototype.$ratingInputsForRatingValue = function(value) {
    return this.$ratingInputs().filter(function() {
        return parseInt($(this).data("rating"), 10) <= value;
    });
};

Track.prototype.registerToSelectable = function(selectable) {
    var self = this;
    this.$()
        .on("click", function(e) {
            if ($(e.target).closest(".app-track-rating").length) {
                return;
            }
            return selectable.trackClick(e, self);
        })
        .on("mousedown", function(e) {
            if ($(e.target).closest(".app-track-rating").length) {
                return;
            }
            return selectable.trackMouseDown(e, self);
        });
};

Track.prototype.getTrackGain = function() {
    if (!this.tagData) return 0;
    return this.tagData.getTrackGain();
};

Track.prototype.getAlbumGain = function() {
    if (!this.tagData) return 0;
    return this.tagData.getAlbumGain();
};

Track.prototype.getTrackPeak = function() {
    if (!this.tagData) return 1;
    return this.tagData.getTrackPeak();
};

Track.prototype.getAlbumPeak = function() {
    if (!this.tagData) return 1;
    return this.tagData.getAlbumPeak();
};

Track.prototype.isVisible = function() {
    return this._isAttached;
};

Track.prototype.bringInTrackAfter = function(delay) {
    this.$().css("visibility", "hidden");
    var self = this;
    setTimeout(function() {
        self.$().css("visibility", "visible");
    }, 400);
};

Track.prototype.remove = function() {
    this.index = -1;
    this._isAttached = false;

    if (this._statusTooltip) {
        this._statusTooltip.destroy();
    }

    if (this.tagData) {
        this.tagData.destroy();
    }

    this.$().remove();
    this._domNode = NULL;
};

Track.prototype.attach = function(target) {
    this._isAttached = true;
    this.$().appendTo(target);
};

Track.prototype.detach = function() {
    if (this.$().parent().length) {
        this.$().detach();
        this._isAttached = false;
        if (this._statusTooltip) {
            this._statusTooltip.hide();
        }
    }
};

Track.prototype.rate = function(value) {
    if (!this.tagData) return;
    if (value === -1) {
        if (this.isRated()) {
            this.tagData.unsetRating();
            this.tagDataUpdated();
        }
        return;
    }
    value = Math.max(1, Math.min(+value, 5));
    if (!value) return;
    this.tagData.setRating(value);
    this.tagDataUpdated();
};

Track.prototype.ratingInputMouseLeft = function(e) {
    this.$ratingInputs().removeClass("rate-intent");
};

Track.prototype.ratingInputMouseEntered = function(e) {
    if (this.isRated()) return;
    var value = parseInt($(e.target).data("rating"), 10);
    this.$ratingInputs().removeClass("rate-intent");
    this.$ratingInputsForRatingValue(value).addClass("rate-intent");
};

Track.prototype.ratingInputClicked = function(e) {
    if (this.isRated()) return;
    var value = parseInt($(e.target).data("rating"), 10);
    this.tagData.setRating(value);
    this.tagDataUpdated();
};

Track.prototype.ratingInputDoubleClicked = function(e) {
    if (!this.isRated()) return;
    this.tagData.unsetRating();
    this.tagDataUpdated();
};

Track.prototype.isAttachedToDom = function() {
    return this._isAttached;
};

Track.prototype.setTrackText = function(text) {
    this.$trackName().text(text);
};

Track.prototype.setTrackNumber = function(number) {
    this.$trackNumber().text(number);
};

Track.prototype.setTrackDuration = function(duration) {
    this.$trackTime().text(duration);
};

Track.prototype.setRatingStars = function(ratingValue) {
    this.$ratingInputs().removeClass("rate-intent rated");

    if (ratingValue === -1) {
        this.$().find(".app-track-rating").removeClass("already-rated");
    } else {
        this.$().find(".app-track-rating").addClass("already-rated");
        this.$ratingInputsForRatingValue(ratingValue).addClass("rated");
    }
};

Track.prototype.getImage = function() {
    var ret;
    if (this.tagData) ret = this.tagData.getImage();

    if (!ret) {
        ret = new Image();
        ret.src = DEFAULT_IMAGE_URL;
    }
    return ret;
};

Track.prototype.getImageUrl = function() {
    return this.getImage().src;
};

Track.prototype.isDetachedFromPlaylist = function() {
    return this.index === -1;
};

Track.prototype.getIndex = function() {
    return this.index;
};

Track.prototype.setIndex = function(index) {
    if (this.index === index) return;
    this.index = index;
    if (index >= 0) {
        this.setTrackNumber(index + 1);
        this.$().css("top", index * playlist.main.getItemHeight());
    }
    this.emit("indexChange", this.index);
};

Track.prototype.doubleClicked = function(event) {
    playlist.main.changeTrackExplicitly(this);
};

Track.prototype.selected = function() {
    this.$container().addClass("app-track-active");
};

Track.prototype.unselected = function() {
    this.$container().removeClass("app-track-active");
};

Track.prototype.stopPlaying = function() {
    this.$container().removeClass("app-playing");
};

Track.prototype.startPlaying = function() {
    this.$container().addClass("app-playing");
};

Track.prototype.hasError = function() {
    return this.error;
};

Track.prototype.getFileName = function() {
    return this.file.name;
};

Track.prototype.getFileSize = function() {
    return this.file.size;
};

Track.prototype.getFile = function() {
    return this.file;
};

Track.prototype.getTagData = function() {
    return this.tagData;
};

Track.prototype.setTagData = function(tagData) {
    if (this.tagData !== null) throw new Error("cannot set tagData again");
    this.tagData = tagData;
    this.$().find(".app-track-rating").addClass("visible");
    this.tagDataUpdated();
};

Track.prototype.formatFullName = function() {
    var name = this.formatName();
    if (this.tagData && this.tagData.getAlbum()) {
        name = name + " [" + this.tagData.getAlbum() + "]";
    }
    return name;
};

Track.prototype.formatName = function() {
    if (this.tagData !== null) {
        return this.tagData.formatName();
    }
    return this.getFileName();
};

Track.prototype.formatTime = function() {
    if (this.tagData !== null) {
        return this.tagData.formatTime();
    }
    return "";
};

Track.prototype.needsParsing = function() {
    return this.tagData === null && !this.error;
};

Track.prototype.getBasicInfo = function() {
    return this.tagData ? this.tagData.basicInfo : {
        channels: 2,
        sampleRate: 44100,
        duration: NaN
    };
};

Track.prototype.getRating = function() {
    if (!this.tagData) return -1;
    return this.tagData.getRating();
};

Track.prototype.isRated = function() {
    if (!this.tagData) return false;
    return this.tagData.isRated();
};

Track.prototype.tagDataUpdated = function() {
    this.setTrackDuration(this.formatTime());
    this.setTrackText(this.formatName());
    this.setRatingStars(this.getRating());
    this.emit("tagDataUpdate");
};

Track.prototype.getUid = function() {
    if (this.tagData) {
        var album = this.tagData.album;
        var title = this.tagData.title;
        var artist = this.tagData.artist;
        var index = this.tagData.albumIndex;
        var name = this.getFileName();
        var size = this.getFileSize();
        return sha1(album + title + artist + index + name + size);
    } else {
        return sha1(this.getFileName() + "" + this.getFileSize());
    }
};

Track.prototype.unsetAnalysisStatus = function() {
    this.$trackStatus().empty();
    this._statusTooltip.destroy();
    this._statusTooltip = null;
};

Track.prototype.setAnalysisStatus = function() {
    var self = this;
    this.$trackStatus().html("<span " +
        "class='glyphicon glyphicon-warning-sign track-analysis-status'" +
        "></span>");

    this._statusTooltip = new Tooltip({
        transitionClass: "fade-in",
        preferredDirection: "right",
        preferredAlign: "middle",
        container: $("body"),
        target: this.$trackStatus().find(".track-analysis-status"),
        classPrefix: "app-tooltip autosized-tooltip minimal-size-tooltip",
        arrow: false,
        content: ANALYSIS_TOOLTIP_MESSAGE
    });
};

Track.prototype.getSilenceAdjustedDuration = function(duration) {
    return Math.max(0, duration - this.getTotalSilenceLength());
};

Track.prototype.convertToSilenceAdjustedTime = function(rawCurrentTime) {
    var total = this.getTotalSilenceLength();
    if (!total || !this.tagData || !this.tagData.basicInfo.duration) return rawCurrentTime;
    return Math.max(0, rawCurrentTime - this.getBeginSilenceLength());
};

Track.prototype.convertFromSilenceAdjustedTime = function(currentTime) {
    var total = this.getTotalSilenceLength();
    if (!total || !this.tagData || !this.tagData.basicInfo.duration) return currentTime;
    var physicalDuration = this.tagData.basicInfo.duration;
    var logicalDuration = physicalDuration - total;
    currentTime = Math.min(logicalDuration, Math.max(0, currentTime));
    var startSilence = this.getBeginSilenceLength();
    currentTime += startSilence;

    if (currentTime >= logicalDuration + startSilence) {
        currentTime = physicalDuration;
    }
    return currentTime;
};

Track.prototype.getTotalSilenceLength = function() {
    if (!this.tagData) return 0;
    return this.tagData.getTotalSilenceLength();
};

Track.prototype.getBeginSilenceLength = function() {
    if (!this.tagData) return 0;
    return this.tagData.getBeginSilenceLength();
};

Track.prototype.comesBeforeInSameAlbum = function(otherTrack) {
    return this.isFromSameAlbumAs(otherTrack) &&
        this.tagData.albumIndex === otherTrack.tagData.albumIndex - 1;
};

Track.prototype.comesAfterInSameAlbum = function(otherTrack) {
    return this.isFromSameAlbumAs(otherTrack) &&
        this.tagData.albumIndex === otherTrack.tagData.albumIndex + 1;
};

Track.prototype.isFromSameAlbumAs = function(otherTrack) {
    if (!otherTrack) return false;
    if (otherTrack === this) return true;
    var thisTagData = this.getTagData();
    var otherTagData = otherTrack.getTagData();

    if (!thisTagData || !otherTagData) {
        return false;
    }

    var thisAlbum = thisTagData.getAlbum();
    var otherAlbum = otherTagData.getAlbum();

    if (!thisAlbum || !otherAlbum) {
        return false;
    }

    return thisAlbum.toLowerCase() === otherAlbum.toLowerCase();
};

Track.prototype.getSearchString = function() {
    if (this._searchString !== null) return this._searchString;
    var searchString = this.formatName().toLowerCase().replace(stripExtensionPattern, "")
                                    .replace(util.unicode.alphaNumericFilteringPattern, "");
    this._searchString = searchString;
    return searchString;
};

Track.prototype.played = function() {
    this._lastPlayed = Date.now();
};

Track.prototype.hasBeenPlayedWithin = function(time) {
    return this._lastPlayed >= time;
};

Track.WAV = 0
Track.MP3 = 1;
Track.AAC = 2;
Track.WEBM = 3;
Track.OGG = 4;

Track.UNKNOWN_FORMAT = 9999;

const MPEGSyncWord = /\xFF[\xF0-\xFF][\x02-\xEF][\x00-\xFF]/;

const formats = [
    [/^(audio\/vnd.wave|audio\/wav|audio\/wave|audio\/x-wav)$/, Track.WAV],
    [/^(audio\/mpeg|audio\/mp3)$/, Track.MP3],
    [/^(audio\/aac|audio\/aacp|audio\/3gpp|audio\/3gpp2|audio\/mp4|audio\/MP4A-LATM|audio\/mpeg4-generic)$/, Track.AAC],
    [/^(audio\/webm)$/, Track.WEBM],
    [/^(audio\/ogg|application\/ogg|audio\/x-ogg|application\/x-ogg)$/, Track.OGG],
];

Track.prototype.getFormat = function(initialBytes) {
    var type = this.file.type.toLowerCase();
    var matches;
    if (type) {
        var matches = formats.filter(function(v) {
            return v[0].test(type);
        });
    }

    if (type && matches.length) {
        return matches[0][1];
    } else if (!type) {
        initialBytes = initialBytes.slice(0, 10);

        if (initialBytes.indexOf("ID3") !== -1 ||
            MPEGSyncWord.test(initialBytes)) {
            return Track.MP3
        } else if (initialBytes.indexOf("RIFF") !== -1 &&
                   initialBytes.indexOf("WAVE") !== -1) {
            return Track.WAV;
        } else if (initialBytes.indexOf("OggS") !== -1) {
            return Track.OGG
        } else if (initialBytes.indexOf("\xFF\xF1") !== -1 ||
                   initialBytes.indexOf("\xFF\xF9") !== -1) {
            return Track.AAC
        } else if (initialBytes.indexOf("\x1A\x45\xDF\xA3") !== -1) {
            return Track.WEBM;
        } else {
            return Track.UNKNOWN_FORMAT;
        }
    } else {
        return Track.UNKNOWN_FORMAT;
    }
};

return Track;})();

;
;
const Playlist = (function() {"use strict";

const PLAYLIST_MODE_KEY = "playlist-mode";

const KIND_IMPLICIT = 0;
const KIND_EXPLICIT = 1;

const MINIMUM_PLAYLIST_HEIGHT = 300;
const MAX_ERRORS = 200;
const MAX_HISTORY = 500;
const EMPTY_ARRAY = [];
const DUMMY_TRACK = {
    getIndex: function() {
        return -1
    },

    isDetachedFromPlaylist: function() {
        return true;
    }
};


const REPEAT_MODE = "repeat";
const SHUFFLE_MODE = "shuffle";
const NORMAL_MODE = "normal";

var playlistRunningPlayId = 0;
function Playlist(domNode, opts) {
    EventEmitter.call(this);
    this._trackList = [];
    this._mode = Playlist.Modes.hasOwnProperty(opts.mode) ? opts.mode : "normal";
    this._itemHeight = opts && opts.itemHeight || 19;
    this._currentTrack = null;
    this._currentPlayId = -1;
    this._trackHistory = [];
    this._displayedTracks = new Array(100);
    this._displayedTracks.length = 0;
    this._mayContainUnparsedTracks = false;
    this._errorCount = 0;
    this._$domNode = $(domNode);
    if (!this.length) {
        this.showPlaylistEmptyIndicator();
    }

    this._selectable = new Selectable(this);
    this._draggable = new DraggableSelection(this.$(), this, {
        mustNotMatchSelector: ".app-track-rating",
        mustMatchSelector: ".app-track-container"
    });

    this.$().perfectScrollbar({
        useKeyboard: false,
        suppressScrollX: true,
    });

    this.requestedRenderFrame = null;
    this.renderItems = $.proxy(this.renderItems, this);

    $(window).on("resize", $.proxy(this.windowLayoutChanged, this))
    this.$().on("scroll ps-scroll-y", $.proxy(this.scrolled, this));

    this._nextTrack = null;

    var self = this;
    keyValueDatabase.getInitialValues().then(function(values) {
        if (PLAYLIST_MODE_KEY in values) {
            self.tryChangeMode(values[PLAYLIST_MODE_KEY]);
        }
    });
}
util.inherits(Playlist, EventEmitter);

Playlist.Modes = {
    normal: function(track) {
        var index = track.getIndex() + 1;

        if (index > this.length - 1) {
            return this._trackList.first();
        } else {
            return this.getTrackByIndex(index);
        }
    },

    shuffle: function(track) {
        var lastHour = Date.now() - 60 * 60 * 1000;

        function getWeight(track) {
            for (var j = 0; j < zeroWeights.length; ++j) {
                if (zeroWeights[j] === track) {
                    return 0;
                }
            }

            var rating = track.isRated() ? track.getRating() : 3;
            var weight = Math.pow(3, rating - 1);

            if (track.hasBeenPlayedWithin(lastHour)) {
                weight = weight / Math.pow(3, 2);
            }

            return Math.ceil(weight);
        }

        var zeroWeights = [track, this.getNextTrack()].filter(function(track) {
            return track && !track.isDetachedFromPlaylist();
        });

        var maxWeight = 0;
        var tracks = this.getTracks();

        for (var i = 0; i < tracks.length; ++i) {
            var track = tracks[i];
            maxWeight += getWeight(track);
        }

        var target = Random.nextUpTo(maxWeight);
        var currentWeight = -1;
        for (var i = 0; i < tracks.length; ++i) {
            var track = tracks[i];
            var weight = getWeight(track);

            if (currentWeight + weight >= target) {
                return track;
            }
            currentWeight += weight;
        }
        return track || tracks.last() || null;
    },

    repeat: function(track) {
        if (track.isDetachedFromPlaylist()) {
            return Playlist.Modes.normal.call(this, track);
        }
        return track;
    }
};

Playlist.prototype._updateNextTrack = function(forced) {
    var currentTrack = this.getCurrentTrack() || DUMMY_TRACK;
    var nextTrack = this._nextTrack;

    if (!forced && nextTrack && !nextTrack.isDetachedFromPlaylist() &&
        this.isUsingShuffleMode()) {
        return;
    }

    this._nextTrack = Playlist.Modes[this._mode].call(this, currentTrack);
    this.emit("nextTrackChange", this._nextTrack);
};

Playlist.prototype._changeTrack = function(track, doNotRecordHistory, trackChangeKind) {
    if (track === undefined || track === null || this._errorCount >= MAX_ERRORS) {
        this._errorCount = 0;
        this.setCurrentTrack(null, trackChangeKind);
        this.emit("playlistEmpty");
        return false;
    }

    if (!(track instanceof Track)) {
        throw new Error("invalid track");
    }

    this.setCurrentTrack(track, trackChangeKind);

    if (track.hasError()) {
        this._errorCount++;
        if (this._mode === "repeat" && this.length > 1) {
            track = Playlist.Modes.normal.call(this, track);
            this.setCurrentTrack(track, trackChangeKind);
        } else {
            return this.next();
        }
    }

    track.played();
    this._currentPlayId = playlistRunningPlayId++;
    this.emit("trackChange", track);

    if (!doNotRecordHistory) {
        if (this._trackHistory.push(this.getCurrentTrack()) > MAX_HISTORY) {
            this._trackHistory.shift();
        }
        this.emit("historyChange");
    }
    this.emit("loadNeed", track);
    return true;
};

Playlist.prototype.windowLayoutChanged = function() {
    const USED_HEIGHT = $("#visualizer-container").outerHeight() +
                        $("#visualizer-container").offset().top;

    var height = $(window).height() - USED_HEIGHT;
    height = Math.max(height, MINIMUM_PLAYLIST_HEIGHT) - this.getItemHeight() - 50;
    this.$().css("height", height + "px");
    this.updateScrollBar();
    this.trackVisibilityChanged();
};

Playlist.prototype.scrolled = function() {
    this.trackVisibilityChanged();
};

Playlist.prototype.tracksVisibleInContainer = function() {
    return Math.ceil(this.$().height() / this._itemHeight);
};

Playlist.prototype.halfOfTracksVisibleInContainer = function() {
    return Math.ceil(this.tracksVisibleInContainer() / 2);
};

Playlist.prototype.renderItems = function() {
    this.requestedRenderFrame = null;
    var container = this.$()[0];
    var $topSpacer = this.$().find(".top-spacer");
    var $bottomSpacer= this.$().find(".bottom-spacer");
    var tracks = this.getTracks();
    var visibleTracks = this._visibleTracks;
    var itemHeight = this._itemHeight;
    var scrollTop = container.scrollTop;
    var displayedTracks = this._displayedTracks;

    var tracksBefore = Math.min(tracks.length, Math.ceil(scrollTop / itemHeight));
    var tracksWithin = Math.min(tracks.length, this.tracksVisibleInContainer());
    var tracksAfter = Math.max(0, this.length - tracksWithin - tracksBefore);

    $topSpacer.css("height", tracksBefore * itemHeight);
    $bottomSpacer.css({
        height: tracksAfter * itemHeight,
        top: tracksWithin * itemHeight + tracksBefore * itemHeight
    });

    var start = Math.max(tracksBefore - 2, 0);
    var end = Math.min(this.length - 1, tracksWithin + tracksBefore + 2);

    for (var i = 0; i < displayedTracks.length; ++i) {
        var index = displayedTracks[i].getIndex();
        if (!(start <= index && index <= end) &&
            displayedTracks[i].isVisible()) {
            displayedTracks[i].detach();
        }
    }

    for (var i = start; i <= end; ++i) {
        var track = tracks[i];
        if (!track.isAttachedToDom()) {
            track.attach(container);
        }
        displayedTracks[i - start] = track;
    }
    displayedTracks.length = end - start + 1;
};

Playlist.prototype.trackVisibilityChanged = function() {
    if (this.requestedRenderFrame) {
        cancelAnimationFrame(this.requestedRenderFrame);
    }
    this.requestedRenderFrame = requestAnimationFrame(this.renderItems);
};

Playlist.prototype.$ = function() {
    return this._$domNode;
};

Playlist.prototype.hidePlaylistEmptyIndicator = function() {
    var self = this;
    var maxLeft = this.$().outerWidth();
    this.$().find(".playlist-empty").animate({
        left: maxLeft
    }, 400, "swiftOut", function() {
        if (self.length > 0) {
            $(this).hide();
        }
    });
    this.$().find(".playlist-spacer").show();
};

Playlist.prototype.showPlaylistEmptyIndicator = function() {
    this.$().find(".playlist-spacer").hide();
    this.$().find(".playlist-empty").show().animate({
        left: 0
    }, 400, "swiftOut");
};

Playlist.prototype.playFirstSelected = function() {
    if (!this.length) return;

    var firstTrack = this._selectable.first();
    if (!firstTrack) return;
    this.changeTrackExplicitly(firstTrack);
};

Playlist.prototype.playFirst = function() {
    if (!this.length) return;
    var firstSelectedTrack = this._selectable.first();
    if (firstSelectedTrack) {
        return this.changeTrackExplicitly(firstSelectedTrack);
    }
    var nextTrack = this.getNextTrack();
    if (nextTrack) {
        this.changeTrackExplicitly(nextTrack);
    } else {
        this.changeTrackExplicitly(this._trackList.first());
    }
};

Playlist.prototype.getContainer = function() {
    return this._trackList;
};

Playlist.prototype.getTracks = function() {
    return this._trackList;
};

Playlist.prototype.getUnparsedTracks = function(maxCount) {
    if (!this._mayContainUnparsedTracks) return EMPTY_ARRAY;
    var ret = [];

    for (var i = 0; i < this._trackList.length; ++i) {
        var track = this._trackList[i];
        if (track.needsParsing()) {
            ret.push(track);
            if (ret.length >= maxCount) {
                break;
            }
        }
    }
    if (!ret.length) this._mayContainUnparsedTracks = false;
    return ret;
};

Playlist.prototype.centerOnTrack = function(track) {
    if (track && !track.isDetachedFromPlaylist()) {
        var scrollTop = (track.getIndex() * this._itemHeight) +
                        (this.halfOfTracksVisibleInContainer() * this._itemHeight) -
                        ((this._itemHeight / 2) | 0) -
                        this.$().height();
        this.$()[0].scrollTop = scrollTop;
        this.$().trigger("scroll");
    }
};

Playlist.prototype.getTrackByIndex = function(index) {
    return this._trackList[index];
};

Playlist.prototype.removeTracksBySelectionRanges = (function() {
    function remove(tracks, selection, indexOffset) {
        var tracksLength = tracks.length;
        var tracksToRemove = selection.length;
        var count = tracksLength - tracksToRemove;
        var index = selection[0] - indexOffset;

        for (var i = index; i < count && i + tracksToRemove < tracksLength; ++i) {
            var track = tracks[i + tracksToRemove];
            track.setIndex(i);
            tracks[i] = track;
        }
        tracks.length = count;
    }

    return function(selectionRanges) {
        var tracks = this._trackList;
        var indexOffset = 0;
        selectionRanges.forEach(function(selection) {
            remove(tracks, selection, indexOffset);
            indexOffset += selection.length;
        });
    };
})();

Playlist.prototype.updateScrollBar = function() {
    this.$().perfectScrollbar("update");
    this.renderItems();
    util.perfectScrollBarPostUpdate(playlist.main.$()[0]);
};

Playlist.prototype.contentsChanged = function() {
    this.updateScrollBar();
    this.trackVisibilityChanged();

    var dom = this.$()[0];
    if (dom.scrollHeight === dom.offsetHeight) {
        this.$().removeClass("has-scrollbar");
    } else {
        this.$().addClass("has-scrollbar");
    }
};

Playlist.prototype.removeTrack = function(track) {
    this._selectable.remove(track);
    this.removeTracks([track]);
};

Playlist.prototype.removeTracks = function(tracks) {
    tracks = tracks.filter(function(track) {
        return !track.isDetachedFromPlaylist();
    });
    var oldLength = this.length;

    var tracksIndexRanges = util.buildConsecutiveRanges(tracks.map(util.indexMapper));

    for (var i = 0; i < tracks.length; ++i) {
        tracks[i].remove();
    }

    this.removeTracksBySelectionRanges(tracksIndexRanges);
    this.emit("lengthChange", this.length, oldLength);

    if (!this.length) {
        this.showPlaylistEmptyIndicator();
        if (this.getCurrentTrack()) {
            this.getCurrentTrack().setIndex(-1);
        }
    }

    this.emit("trackChange", this.getCurrentTrack());
    this._updateNextTrack();
    this.contentsChanged();
};

Playlist.prototype.removeSelected = function() {
    var selection = this.getSelection();
    if (!selection.length) return;
    this.clearSelection();
    this.removeTracks(selection);
};

Playlist.prototype.add = function(tracks) {
    if (!tracks.length) return;

    if (!this.length) {
        this.hidePlaylistEmptyIndicator();
    }

    this._mayContainUnparsedTracks = true;
    var oldLength = this.length;

    tracks.forEach(function(track) {
        var len = this._trackList.push(track);
        track.setIndex(len - 1);
        track.registerToSelectable(this._selectable);
    }, this);

    this.emit("lengthChange", this.length, oldLength);
    this._updateNextTrack();
    this.contentsChanged();
    this.animateVisibleNewTracks(tracks);
};

Playlist.prototype.animateVisibleNewTracks = function(tracks) {
    var delay = 0;

    for (var i = 0; i < tracks.length; ++i) {
        if (tracks[i].isVisible()) {
            tracks[i].bringInTrackAfter(delay);
            delay += 33;
        }
    }
};

Playlist.prototype.stop = function() {
    this.setCurrentTrack(null, KIND_EXPLICIT);
    this._updateNextTrack();
};

Playlist.prototype.trackIndexChanged = function() {
    this.emit("trackChange", this.getCurrentTrack());
    this._updateNextTrack();
};

Playlist.prototype.setCurrentTrack = function(track, trackChangeKind) {
    var current = this.getCurrentTrack();

    if (current) {
        current.stopPlaying();
    }

    this._currentTrack = track;

    if (track) {
        track.startPlaying();
    }

    if (this.isUsingShuffleMode() &&
        trackChangeKind === KIND_EXPLICIT &&
        !this.nextTrackIsSameAs(track)) {
        return;
    }
    this._updateNextTrack(true);
};

Playlist.prototype.nextTrackIsSameAs = function(track) {
    if (!this.getNextTrack()) return false;
    return this.getNextTrack() === track;
};

Playlist.prototype.isUsingShuffleMode = function() {
    return this._mode === SHUFFLE_MODE;
};

Playlist.prototype.changeTrackImplicitly = function(track, doNotRecordHistory) {
    return this._changeTrack(track, !!doNotRecordHistory, KIND_IMPLICIT);
};

Playlist.prototype.changeTrackExplicitly = function(track, doNotRecordHistory) {
    return this._changeTrack(track, !!doNotRecordHistory, KIND_EXPLICIT);
};

Playlist.prototype.getPreviousTrack = function() {
    if (this._trackHistory.length > 1) {
        return this._trackHistory[this._trackHistory.length - 2];
    }
    return null;
};

Playlist.prototype.getCurrentTrack = function() {
    return this._currentTrack;
};

Playlist.prototype.getNextTrack = function() {
    if (this._nextTrack === DUMMY_TRACK) return null;
    return this._nextTrack;
};

Playlist.prototype.getCurrentPlayId = function() {
    return this._currentPlayId;
};

Playlist.prototype.trackPlayedSuccessfully = function() {
    this._errorCount = 0;
};

Playlist.prototype.hasHistory = function() {
    return this._trackHistory.length > 0;
};

Playlist.prototype.prev = function() {
    var history = this._trackHistory;
    if (history.length > 0) {
        var i = history.length - 1;
        var track;
        do {
            track = this._trackHistory[i];
            if (track.isDetachedFromPlaylist()) {
                track = null;
            } else {
                this._trackHistory.splice(i, 1);

            }
            i--;
        } while (i >= 0 && track == null);

        if (!track) {
            return this.prev();
        } else if (!track.isDetachedFromPlaylist()) {
            this.emit("historyChange");
            return this.changeTrackExplicitly(track, true);
        }
    }
};

Playlist.prototype.next = function() {
    if (!this.getNextTrack()) return this.stop();
    return this.changeTrackImplicitly(this.getNextTrack());
};

Playlist.prototype.tryChangeMode = function(mode) {
    if (this._mode === mode) {
        return false;
    } else if (Playlist.Modes.hasOwnProperty(mode)) {
        var oldMode = this._mode;
        this._mode = mode;
        this.emit("modeChange", mode, oldMode);
        this._updateNextTrack(true);
        keyValueDatabase.set(PLAYLIST_MODE_KEY, mode);
        return true;
    }
    return false;
};

Playlist.prototype.getSelectedTrackCount = function() {
    return this._selectable.getSelectedItemCount();
};

Playlist.prototype.getMode = function() {
    return this._mode;
};

Playlist.prototype.toArray = function() {
    return this._trackList.slice();
};

Playlist.prototype.getSelection = function() {
    return this._selectable.getSelection();
};

Playlist.prototype.clearSelection = function() {
    this._selectable.clearSelection();
};

Playlist.prototype.selectAll = function() {
    if (this.length) {
        this._selectable.all();
    }
};

// Home and End selection stuff.

Playlist.prototype.selectFirst = function() {
    if (this.length) {
        this._selectable.selectFirst();
    }
};

Playlist.prototype.selectLast = function() {
    if (this.length) {
        this._selectable.selectLast();
    }
};

Playlist.prototype.selectAllUp = function() {
    if (this.length) {
        this._selectable.appendPrev(this.length);
    }
};

Playlist.prototype.selectAllDown = function() {
    if (this.length) {
        this._selectable.appendNext(this.length);
    }
};

// Arrow up and arrow down selection stuff.

Playlist.prototype.selectPrev = function() {
    if (this.length) {
        this._selectable.prev();
    }
};

Playlist.prototype.selectNext = function() {
    if (this.length) {
        this._selectable.next();
    }
};

Playlist.prototype.selectPrevAppend = function() {
    if (this.length) {
        this._selectable.appendPrev();
    }
};

Playlist.prototype.selectNextAppend = function() {
    if (this.length) {
        this._selectable.appendNext();
    }
};

Playlist.prototype.removeTopmostSelection = function() {
    if (this.length) {
        this._selectable.removeTopmostSelection();
    }
};

Playlist.prototype.removeBottommostSelection = function() {
    if (this.length) {
        this._selectable.removeBottommostSelection();
    }
};

Playlist.prototype.moveSelectionUp = function() {
    if (this.length) {
        this._selectable.moveUp();
    }
};

Playlist.prototype.moveSelectionDown = function() {
    if (this.length) {
        this._selectable.moveDown();
    }
};

// Page up and page down selection stuff.

Playlist.prototype.selectPagePrevAppend = function() {
    if (this.length) {
        this._selectable.appendPrev(this.halfOfTracksVisibleInContainer());
    }
};

Playlist.prototype.selectPageNextAppend = function() {
    if (this.length) {
        this._selectable.appendNext(this.halfOfTracksVisibleInContainer());
    }
};

Playlist.prototype.selectPagePrev = function() {
    if (this.length) {
        this._selectable.prev(this.halfOfTracksVisibleInContainer());
    }
};

Playlist.prototype.selectPageNext = function() {
    if (this.length) {
        this._selectable.next(this.halfOfTracksVisibleInContainer());
    }
};

Playlist.prototype.removeTopmostPageSelection = function() {
    if (this.length) {
        this._selectable.removeTopmostSelection(this.halfOfTracksVisibleInContainer());
    }
};

Playlist.prototype.removeBottommostPageSelection = function() {
    if (this.length) {
        this._selectable.removeBottommostSelection(this.halfOfTracksVisibleInContainer());
    }
};

Playlist.prototype.moveSelectionPageUp = function() {
    if (this.length) {
        this._selectable.moveUp(this.halfOfTracksVisibleInContainer());
    }
};

Playlist.prototype.moveSelectionPageDown = function() {
    if (this.length) {
        this._selectable.moveDown(this.halfOfTracksVisibleInContainer());
    }
};

Playlist.prototype.selectTrack = function(track) {
    var index = track.getIndex();
    if (index >= 0) {
        this.clearSelection();
        this._selectable.addTrack(track);
        this.centerOnTrack(track);
    }
};

const compareAlbum = function(a, b) {
    return a.getAlbumForSort().localeCompare(b.getAlbumForSort());
};

const compareAlbumIndex = function(a, b) {
    return a.getAlbumIndexForSort() - b.getAlbumIndexForSort();
};

const compareTitle = function(a, b) {
    return a.getTitleForSort().localeCompare(b.getTitleForSort());
};

const compareArtist = function(a, b) {
    return a.getArtistForSort().localeCompare(b.getArtistForSort());
};

const compareDuration = function(a, b) {
    var aDuration = a.basicInfo.duration;
    var bDuration = b.basicInfo.duration;

    if (!aDuration) return bDuration ? -1 : 0;
    else if (!bDuration) return 1;

    return aDuration - bDuration;
};

const compareRating = function(a, b) {
    var aRating = a.getRating();
    var bRating = b.getRating();

    if (aRating === -1) return bRating !== -1 ? 1 : 0;
    else if (bRating === -1) return -1;

    return bRating - aRating;
};

const compareOrder = [
    compareAlbum,
    compareAlbumIndex,
    compareArtist,
    compareTitle,
    compareDuration,
    compareRating
];

const makeComparer = function(mainComparer) {
    const comparers = compareOrder.slice(0);
    comparers.splice(comparers.indexOf(mainComparer), 1);
    const length = comparers.length;

    const comparer = function(aTrack, bTrack) {
        var aTagData = aTrack.getTagData();
        var bTagData = bTrack.getTagData();
        var comparison = 0;

        if (!aTagData) {
            return bTagData ? -1 : aTrack.formatName().localeCompare(bTrack.formatName());
        } else if (!bTagData) {
            return 1;
        }

        if ((comparison = mainComparer(aTagData, bTagData)) !== 0) {
            return comparison;
        }

        for (var i = 0; i < length; ++i) {
            var comparer = comparers[i];
            if ((comparison = comparer(aTagData, bTagData)) !== 0) {
                return comparison;
            }
        }

        return aTrack.formatName().localeCompare(bTrack.formatName());
    };

    const sorter = function(tracks) {
        tracks.sort(comparer);
    };

    return function() {
        return this.changeTrackOrderWithinSelection(sorter);
    };
};

Playlist.prototype.sortByAlbum = makeComparer(compareAlbum)
Playlist.prototype.sortByArtist = makeComparer(compareArtist)
Playlist.prototype.sortByTitle = makeComparer(compareTitle)
Playlist.prototype.sortByRating = makeComparer(compareRating)
Playlist.prototype.sortByDuration = makeComparer(compareDuration);

Playlist.prototype.sortByReverseOrder = function() {
    return this.changeTrackOrderWithinSelection(function(tracks) {
        tracks.reverse();
    });
};

Playlist.prototype.changeTrackOrderWithinSelection = function(callback) {
    var selectedTracks = this.getSelection();
    if (selectedTracks.length <= 1) return;

    var indices = selectedTracks.map(function(v) {
        return v.getIndex();
    });
    callback(selectedTracks);

    for (var i = 0; i < selectedTracks.length; ++i) {
        var track = selectedTracks[i];
        var index = indices[i];
        this._trackList[index] = track;
        track.setIndex(index);
    }
    this._selectable.updateOrder(selectedTracks);
    this.trackVisibilityChanged();
    this.emit("trackChange", this.getCurrentTrack());
    this.emit("trackOrderChange");
};

Playlist.prototype.setItemHeight = function(newHeight) {
    throw new Error("Not implemented");
};

Playlist.prototype.getItemHeight = function() {
    return this._itemHeight;
};

Object.defineProperty(Playlist.prototype, "length", {
    get: function() {
        return this._trackList.length;
    },
    configurable: false
});

return Playlist; })();

;
;
const Selectable = (function() { "use strict";

const modifierKeyProp = util.modifierKeyProp;

function Selectable(playlist) {
    EventEmitter.call(this);
    var self = this;
    this._playlist = playlist;
    this._selectionPointer = null;
    this._lastIdx = null;
    this._lastStart = null;
    this._lastEnd = null;
    this._selection = new DS.SortedSet(util.TRACK_SORTER);
}
util.inherits(Selectable, EventEmitter);

Selectable.prototype.trackMouseDown = function(e, track) {
    if (e.which !== 1 && e.which !== 3) {
        return true;
    }
    var idx = track.getIndex();

    if (e.shiftKey && e[modifierKeyProp]) {
        if (this._selectionPointer === null) {
            this._shiftSelection(idx);
        } else {
            this._appendingShiftSelection(idx);
        }

    } else if (e.shiftKey && !e[modifierKeyProp]) {
        this._shiftSelection(idx);
    } else if (e[modifierKeyProp]) {
        if (this._selection.contains(track)) {
            this._remove(idx);
        } else {
            this._add(idx);
            this._selectionPointer = idx;
        }
        this._lastIdx = null;
    } else if (!e[modifierKeyProp] && !e.shiftKey) {
        if (this._selection.contains(track)) {
            this._selectionPointer = idx;
            return true;
        }
        this._resetPointers();
        this._clearSelection();
        this._add(idx);
    }
    this._playlist.emit("tracksSelected", this);
    e.preventDefault();
};

Selectable.prototype.trackClick = function(e, track) {
    if (!e[modifierKeyProp] && !e.shiftKey) {
        this._resetPointers();
        this._clearSelection();
        this._add(track.getIndex());
        this._playlist.emit("tracksSelected", this);
    }
};

Selectable.prototype._clearSelection = function() {
    this._selection.forEach(function(track) {
        track.unselected();
    });
    this._selection.clear();
};

Selectable.prototype._add = function(index) {
    var track = this._playlist.getTrackByIndex(index);
    track.selected();
    this._selection.add(track);
};

Selectable.prototype._shiftSelection = function(idx) {
    if (this._selection.isEmpty()) {
        this._resetPointers();
        this._add(idx);
        this._selectionPointer = idx;
    }
    var j;
    this._selectionPointer = null;

    if (!this._lastStart) {
        this._lastEnd = this._selection.last().getIndex();
        this._lastStart = this._selection.first().getIndex();
    }

    if (idx < this._lastStart) {
        if (this._lastIdx === this._lastEnd || this._lastIdx ===
            null) { // user changed this._selection directions to UP
            this._clearSelection();
            for (j = idx; j <= this._lastStart; ++j) {
                this._add(j);
            }
            this._lastIdx = idx;
            this._selectionPointer = idx;
            this._lastEnd = this._selection.last().getIndex();
            this._lastStart = this._selection.first().getIndex();
        } else if (this._lastIdx === this._lastStart) { // user preserved this._selection direction UP
            for (j = idx; j <= this._lastStart; ++j) {
                this._add(j);
            }
            this._selectionPointer = idx;
        }
    } else if (idx > this._lastEnd) {
        if (this._lastIdx === this._lastStart || this._lastIdx ===
            null) { // user changed this._selection directions to DOWN
            this._clearSelection();
            if (this._lastIdx === null) {
                for (j = this._lastStart; j <= idx; ++j) {
                    this._add(j);
                }
            } else {
                for (j = this._lastEnd; j <= idx; ++j) {
                    this._add(j);
                }
            }

            this._lastIdx = idx;
            this._selectionPointer = idx;
            this._lastEnd = this._selection.last().getIndex();
            this._lastStart = this._selection.first().getIndex();
        } else if (this._lastIdx === this._lastEnd) { // user preserved this._selection direction DOWN
            for (j = this._lastEnd; j <= idx; ++j) {
                this._add(j);
            }
            this._selectionPointer = idx;
        }
    } else if (idx > this._lastStart && idx < this._lastEnd) {
        if (this._selectionPointer === this._lastEnd) {
            for (j = idx; j <= this._lastEnd; ++j) {
                this._add(j);
            }
            this._selectionPointer = idx;
        } else if (this._selectionPointer === this._lastStart) {
            for (j = this._lastStart; j <= idx; ++j) {
                this._add(j);
            }
            this._selectionPointer = idx;
        }
    }
};

Selectable.prototype._appendingShiftSelection = function(idx) {
    var j, start = this._selection.first().getIndex(),
        end = this._selection.last().getIndex();
    if (idx < this._selectionPointer) {
        for (j = idx; j <= this._selectionPointer; ++j) {
            this._add(j);
        }
    } else if (idx > this._selectionPointer) {
        for (j = this._selectionPointer; j <= idx; ++j) {
            this._add(j);
        }
    }
    this._selectionPointer = idx;
};

Selectable.prototype._remove = function(idx) {
    var track = this._playlist.getTrackByIndex(idx);
    track.unselected();
    this._selection.remove(track);
};

Selectable.prototype._getMiddleOfSelection = function() {
    var length = this._selection.size();
    var mid = Math.floor(length / 2);
    return this._selection.get(mid);
};

Selectable.prototype._moveToMiddleOfSelection = function() {
    this._playlist.centerOnTrack(this._getMiddleOfSelection());
};

Selectable.prototype.addTrack = function(track) {
    if (track.getIndex() >= 0) {
        this._add(track.getIndex());
        this._playlist.emit("tracksSelected", this);
    }
};

Selectable.prototype.moveUp = function(distance) {
    if (distance === undefined) distance = 1;

    if (!this._selection.isEmpty()) {
        this._resetPointers();
        Selectable.moveSelectedTracksUpBy(this._playlist.getTracks(),
                                          this._selection.toArray(),
                                          distance);
        this._selectionPointer = this.first().getIndex();
        this._playlist.trackIndexChanged();
        this._moveToMiddleOfSelection();
    }
};

Selectable.prototype.moveDown = function(distance) {
    if (distance === undefined) distance = 1;

    if (!this._selection.isEmpty()) {
        this._resetPointers();
        Selectable.moveSelectedTracksDownBy(this._playlist.getTracks(),
                                            this._selection.toArray(),
                                            distance);
        this._selectionPointer = this.last().getIndex();
        this._playlist.trackIndexChanged();
        this._moveToMiddleOfSelection();
    }
};

Selectable.prototype.removeTopmostSelection = function(distance) {
    if (distance === undefined) distance = 1;
    distance = Math.min(this._selection.size() - 1, distance);

    if (distance > 0) {
        this._resetPointers();
        var start = this._selection.first().getIndex();
        var end = start + distance;

        for (var i = start; i < end; ++i) {
            this._remove(i);
        }

        this._selectionPointer = this._selection.first().getIndex();
        this._playlist.emit("tracksSelected", this);
        this._moveToMiddleOfSelection();
    }
};

Selectable.prototype.removeBottommostSelection = function(distance) {
    if (distance === undefined) distance = 1;
    distance = Math.min(this._selection.size() - 1, distance);

    if (distance > 0) {
        this._resetPointers();
        var start = this._selection.last().getIndex() - distance + 1;
        var end = start + distance;
        for (var i = start; i < end; ++i) {
            this._remove(i);
        }

        this._selectionPointer = this._selection.last().getIndex();
        this._playlist.emit("tracksSelected", this);
        this._moveToMiddleOfSelection();
    }
};

Selectable.prototype.appendPrev = function(distance) {
    if (distance === undefined) distance = 1;
    this._resetPointers();
    var cur;
    if (!this._selection.isEmpty()) {
        cur = this._selection.first().getIndex();
        if (cur > 0) {
            var end = cur;
            var start = Math.max(0, cur - distance);

            for (var i = start; i < end; ++i) {
                this._add(i);
            }
            this._selectionPointer = start;
        }
    } else {
        this._add(0);
        this._selectionPointer = 0;
    }
    this._playlist.emit("tracksSelected", this);
    this._moveToMiddleOfSelection();
};

Selectable.prototype.appendNext = function(distance) {
    if (distance === undefined) distance = 1;
    this._resetPointers();
    var cur;
    if (!this._selection.isEmpty()) {
        cur = this._selection.last().getIndex();
        if (cur < this._playlist.length - 1) {
            var end = Math.min(this._playlist.length, cur + distance + 1);
            var start = cur + 1;

            for (var i = start; i < end; ++i) {
                this._add(i);
            }
            this._selectionPointer = end - 1;
        }
    } else {
        this._add(0);
        this._selectionPointer = 0;
    }
    this._playlist.emit("tracksSelected", this);
    this._moveToMiddleOfSelection();
};

Selectable.prototype.prev = function(distance) {
    if (distance === undefined) distance = 1;

    this._resetPointers();
    var cur;
    if (!this._selection.isEmpty()) {
        cur = this._selection.first().getIndex();
        this._clearSelection();
        cur -= distance;
        this._add(Math.max(cur, 0));
        this._selectionPointer = this._selection.first().getIndex();
    } else {
        this._add(0);
        this._selectionPointer = 0;
    }
    this._playlist.emit("tracksSelected", this);
    this._moveToMiddleOfSelection();
};

Selectable.prototype.next = function(distance) {
    if (distance === undefined) distance = 1;
    this._resetPointers();
    var cur;
    if (!this._selection.isEmpty()) {
        cur = this._selection.last().getIndex();
        this._clearSelection();
        cur += distance;
        this._add(Math.min(cur, this._playlist.length - 1));
        this._selectionPointer = this._selection.last().getIndex();
    } else {
        this._add(0);
        this._selectionPointer = 0;
    }
    this._playlist.emit("tracksSelected", this);
    this._moveToMiddleOfSelection();
};

Selectable.prototype.selectLast = function() {
    this._resetPointers();
    this._clearSelection();
    this._add(this._playlist.length - 1);
    this._selectionPointer = this._playlist.length - 1;
    this._playlist.emit("tracksSelected", this);
    this._moveToMiddleOfSelection();
};

Selectable.prototype.selectFirst = function() {
    this._resetPointers();
    this._clearSelection();
    this._add(0);
    this._selectionPointer = 0;
    this._playlist.emit("tracksSelected", this);
    this._moveToMiddleOfSelection();
};

Selectable.prototype.getSelectedItemCount = function() {
    return this._selection.size();
};

Selectable.prototype._resetPointers = function() {
    this._selectionPointer = null;
    this._lastEnd = null;
    this._lastIdx = null;
    this._lastStart = null;
};

Selectable.prototype.updateOrder = function(selection) {
    this._selection.clear();
    for (var i = 0; i < selection.length; ++i) {
        this._selection.add(selection[i]);
    }
};

Selectable.prototype.clearSelection = function() {
    this._resetPointers();
    this._clearSelection();
    this._playlist.emit("tracksSelected", this);
};

Selectable.prototype.getSelection = function() {
    return this._selection.toArray();
};

Selectable.prototype.first = function() {
    if (this._selection.isEmpty()) return null;
    return this._selection.first();
};

Selectable.prototype.last = function() {
    if (this._selection.isEmpty()) return null;
    return this._selection.last();
};

Selectable.prototype.all = function() {
    var tracks = this._playlist.getTracks();
    for (var i = 0; i < tracks.length; ++i) {
        this._add(i);
    }
    this._playlist.emit("tracksSelected", this);
};

Selectable.prototype.remove = function(track) {
    if (this._selection.remove(track) === track) {
        track.unselected();
    }
};

Selectable.moveSelectedTracksDownBy = function(tracks, selection, distance) {
    var selectedTrackRanges = util.buildConsecutiveRanges(selection, util.indexMapper);

    while(distance-- > 0 && selectedTrackRanges.last().last().getIndex() < tracks.length - 1) {
        for (var i = 0; i < selectedTrackRanges.length; ++i) {
            var selectedTracks = selectedTrackRanges[i];
            var bumpedTrack = tracks[selectedTracks.last().getIndex() + 1];
            var bumpedTrackNewIndex = selectedTracks.first().getIndex();
            for (var j = 0; j < selectedTracks.length; ++j) {
                var track = selectedTracks[j];
                var newIndex = track.getIndex() + 1;
                tracks[newIndex] = track;
                track.setIndex(newIndex);
            }
            tracks[bumpedTrackNewIndex] = bumpedTrack;
            bumpedTrack.setIndex(bumpedTrackNewIndex);
        }
    }
};

Selectable.moveSelectedTracksUpBy = function(tracks, selection, distance) {
    var selectedTrackRanges = util.buildConsecutiveRanges(selection, util.indexMapper);

    while(distance-- > 0 && selectedTrackRanges.first().first().getIndex() > 0) {
        for (var i = selectedTrackRanges.length - 1; i >= 0; --i) {
            var selectedTracks = selectedTrackRanges[i];
            var bumpedTrack = tracks[selectedTracks.first().getIndex() - 1];
            var bumpedTrackNewIndex = selectedTracks.last().getIndex();
            for (var j = 0; j < selectedTracks.length; ++j) {
                var track = selectedTracks[j];
                var newIndex = track.getIndex() - 1;
                tracks[newIndex] = track;
                track.setIndex(newIndex);
            }
            tracks[bumpedTrackNewIndex] = bumpedTrack;
            bumpedTrack.setIndex(bumpedTrackNewIndex);
        }
    }
};

return Selectable; })();

;
;
function DraggableSelection(dom, playlist, opts) {
    opts = Object(opts);
    this._mustMatchSelector = opts.mustMatchSelector || null;
    this._mustNotMatchSelector = opts.mustNotMatchSelector || null;
    this._domNode = $(dom);
    this._selection = null;
    this._playlist = playlist;
    this._previousRawY = -1;
    this._listOffset = 0;
    this._listHeight = 0;
    this._currentReferenceTrack = -1;
    this._onMovement = $.proxy(this._onMovement, this);
    this._onMouseRelease = $.proxy(this._onMouseRelease, this);
    this._onTrackMouseDown = $.proxy(this._onTrackMouseDown, this);
    this._onReLayout = $.proxy(this._onReLayout, this);
    this._restart = $.proxy(this._restart, this);

    this._scrollUp = this._scrollUp.bind(this);
    this._scrollDown = this._scrollDown.bind(this);

    this._scrollIntervalId = -1;

    this.$().bind("mousedown", this._onTrackMouseDown);
    this.$().bind("selectstart", function(e) {e.preventDefault()});
}

DraggableSelection.prototype._clearScrollInterval = function() {
    if (this._scrollIntervalId !== -1) {
        clearInterval(this._scrollIntervalId);
        this._scrollIntervalId = -1;
    }
};

DraggableSelection.prototype._shouldScrollUp = function() {
    var box = this.$()[0].getBoundingClientRect();
    var lastY = this._previousRawY;
    var itemHeight = this._playlist.getItemHeight();
    return lastY <= box.top + itemHeight / 2;
};

DraggableSelection.prototype._shouldScrollDown = function() {
    var box = this.$()[0].getBoundingClientRect();
    var lastY = this._previousRawY;
    var itemHeight = this._playlist.getItemHeight();
    return lastY >= box.bottom - itemHeight / 2;
};

DraggableSelection.prototype._scrollUp = function() {
    if (this._shouldScrollUp()) {
        util.scrollUp(this.$()[0], this._playlist.getItemHeight());
    } else {
        this._clearScrollInterval();
    }
};

DraggableSelection.prototype._scrollDown = function() {
    if (this._shouldScrollDown()) {
        util.scrollDown(this.$()[0], this._playlist.getItemHeight());
    } else {
        this._clearScrollInterval();
    }
};

DraggableSelection.prototype._maybeStartUpScroller = function() {
    if (this._scrollIntervalId === -1 && this._shouldScrollUp()) {
        this._scrollIntervalId = setInterval(this._scrollUp, 100);
    }
};

DraggableSelection.prototype._maybeStartDownScroller = function() {
    if (this._scrollIntervalId === -1 && this._shouldScrollDown()) {
        this._scrollIntervalId = setInterval(this._scrollDown, 100);
    }
};

DraggableSelection.prototype._coordinateToTrackIndex = function(y) {
    return Math.floor(this._translateYCoordinate(y) / this._playlist.getItemHeight());
};

DraggableSelection.prototype.$ = function() {
    return this._domNode;
};

DraggableSelection.prototype._onReLayout = function() {
    this._calculateDimensions();
    this._currentReferenceTrack = this._coordinateToTrackIndex(this._previousRawY);
};

DraggableSelection.prototype._onMouseRelease = function() {
    this.$().unbind("scroll", this._onMovement);
    $(document).unbind("mousemove", this._onMovement)
            .unbind("mouseup", this._onMouseRelease);
    this._playlist.removeListener("tracksSelected", this._restart);
    this._playlist.removeListener("lengthChange", this._restart);
    this._playlist.removeListener("trackOrderChange", this._restart);
    $(window).off("relayout", this._onReLayout);
    this._currentReferenceTrack = this._previousRawY = -1;
    this._clearScrollInterval();
    this._selection = null;
};

DraggableSelection.prototype._translateYCoordinate = function(rawY) {
    var dom = this.$()[0];
    return Math.max(0, Math.min(rawY - this._listOffset, this._listHeight)) + dom.scrollTop;
};

DraggableSelection.prototype._onMovement = function(e) {
    if (typeof e.which === "number" && e.which !== 1) {
        return this._onMouseRelease();
    }
    this._maybeStartDownScroller();
    this._maybeStartUpScroller();

    var dom = this.$()[0];
    var itemHeight = this._playlist.getItemHeight();
    var clientY = typeof e.clientY === "number" ? e.clientY : this._previousRawY;
    this._previousRawY = clientY;
    var y = this._translateYCoordinate(clientY);
    var selection = this._selection;
    var tracks = this._playlist.getTracks();
    var referenceY = this._currentReferenceTrack * itemHeight;
    var changed = false;
    if (y < referenceY) {
        var distance = Math.floor((referenceY - y) / itemHeight) + 1;
        this._currentReferenceTrack = Math.max(0, this._currentReferenceTrack - distance);
        Selectable.moveSelectedTracksUpBy(tracks, selection, distance);
        changed = true;
    } else if (y > (referenceY + itemHeight)) {
        var distance = Math.floor((y - (referenceY + itemHeight)) / itemHeight) + 1;
        this._currentReferenceTrack = Math.min(this._playlist.length - 1, this._currentReferenceTrack + distance);
        Selectable.moveSelectedTracksDownBy(tracks, selection, distance);
        changed = true;
    }

    if (changed) {
        this._playlist.trackIndexChanged();
        this._playlist.trackVisibilityChanged();
    }
};

DraggableSelection.prototype._calculateDimensions = function() {
    this._listOffset = this.$()[0].offsetTop;
    this._listHeight = this.$()[0].offsetHeight;
};

DraggableSelection.prototype._restart = function() {
    this._selection = this._playlist.getSelection();
    if (!this._selection.length) {
        return this._onMouseRelease();
    }
    this._onReLayout();
};

DraggableSelection.prototype._onTrackMouseDown = function(e) {
    var $target = $(e.target);
    if (this._mustMatchSelector && !$target.closest(this._mustMatchSelector).length) {
        return;
    }

    if (this._mustNotMatchSelector && $target.closest(this._mustNotMatchSelector).length) {
        return;
    }

    if (!this._playlist.getSelectedTrackCount()) {
        return;
    }

    this._selection = this._playlist.getSelection();
    this._previousRawY = e.clientY;
    this._onReLayout();

    var tracks = this._playlist.getTracks();
    this.$().on("scroll", this._onMovement);
    $(document).on("mousemove", this._onMovement);
    $(document).on("mouseup", this._onMouseRelease);
    $(window).on("relayout", this._onReLayout);
    this._playlist.on("tracksSelected", this._restart);
    this._playlist.on("lengthChange", this._restart);
    this._playlist.on("trackOrderChange", this._restart);

};

;
;
function TrackDisplay(target, opts) {
    var parent;
    target = typeof target == "string" ? document.getElementById(target) :
        target;

    if (target.id == null) {
        target.id = (+new Date) + "-app-track-display";
    }

    parent = target.parentNode;

    if (!parent || !target) {
        throw new TypeError(
            "TrackDisplay needs a scroll parent and a content target");
        return false;
    }

    if (parent && !parent.id) {
        parent.id = (+new Date) + "-app-track-display-parent";
    }

    this._target = target.id;
    this._scrollParent = parent.id;
    this._marqDelay = (opts && opts.delay || 2.5) * 1000;
    this._pixelsPerSecond = 15;
    this._frameRequest = null;
    this._amounts = 0;
    this._direction = "right";
    this._scrollWidth = 0;
};

TrackDisplay.prototype.newTitle = function(titleName) {
    $(document.getElementById(this._target)).text(titleName);
    document.title = titleName;
    return this;
};

TrackDisplay.prototype.__marquer = function() {
    var target = document.getElementById(this._scrollParent),
        self = this,
        progress = this._direction == "right" ? 1 : -1;

    var last = -1
    var updateTime = 1000 / this._pixelsPerSecond;
    this._frameRequest = requestAnimationFrame(function animate(now) {
        self._frameRequest = null;
        var diff = last === -1 ? updateTime : now - last;
        last = now;
        self._amounts += (diff / updateTime) * progress;
        target.scrollLeft = self._amounts;
        if (self._amounts > self._scrollWidth || self._amounts < 0) {
            self._direction = self._amounts < 0 ? "right" : "left";
            window.setTimeout(function() {
                self.beginMarquee();
            }, self._marqDelay);
        } else {
            self._frameRequest = requestAnimationFrame(animate);
        }
    });
    return this;
};

TrackDisplay.prototype.beginMarquee = function() {
    var scrollParent = document.getElementById(this._scrollParent),
        sWidth = scrollParent.scrollWidth,
        oWidth = scrollParent.offsetWidth;

    if (sWidth - oWidth < 1) {
        return this;
    }

    this._scrollWidth = sWidth - oWidth;
    if (this._frameRequest) {
        cancelAnimationFrame(this._frameRequest);
        this._frameRequest = null;
    }

    return this.__marquer();
};

TrackDisplay.prototype.stopMarquee = function() {
    if (this._frameRequest) {
        cancelAnimationFrame(this._frameRequest);
        this._frameRequest = null;
    }
    return this;
};

;
;
var ActionMenu = (function() { "use strict";

const NULL = $(null);

function ActionMenuItem(root, spec, children, level) {
    this.root = root;
    this.parent = null;
    this.children = children;
    this.id = spec.id;
    this.divider = !!spec.divider;
    this.disabled = !!spec.disabled;
    this.handler = typeof spec.onClick === "function" ? spec.onClick : $.noop;

    this._preferredHorizontalDirection = "right";
    this._preferredVerticalDirection = "down";
    this._delayTimerId = -1;
    this._content = util.toFunction(spec.content);
    this._containerDom = NULL;
    this._domNode = this._createDom(this._content(this) + "");

    if (this.disabled) this.$().addClass(this.root.disabledClass);

    this.itemMouseEntered = this.itemMouseEntered.bind(this);
    this.itemMouseLeft = this.itemMouseLeft.bind(this);
    this.containerMouseEntered = this.containerMouseEntered.bind(this);
    this.containerMouseLeft = this.containerMouseLeft.bind(this);
    this.itemClicked = this.itemClicked.bind(this);
    this.positionSubMenu = this.positionSubMenu.bind(this);

    if (this.children) {
        this._containerDom = this._createContainerDom(level);
        this.children.forEach(function(child) {
            child.setParent(this);
        }, this);
        this.$().on("mouseenter", this.itemMouseEntered);
        this.$().on("mouseleave", this.itemMouseLeft);
        this.$container().on("mouseenter", this.containerMouseEntered);
        this.$container().on("mouseleave", this.containerMouseLeft);
    }

    if (!this.divider) {
        this.$().on("click", this.itemClicked);
    }
}

ActionMenuItem.prototype.destroy = function() {
    this._clearDelayTimer();
    this.$().remove();
    this.$container().remove();
};

ActionMenuItem.prototype._clearDelayTimer = function() {
    if (this._delayTimerId !== -1) {
        clearTimeout(this._delayTimerId);
        this._delayTimerId = -1;
    }
};

ActionMenuItem.prototype.startHideTimer = function() {
    this._clearDelayTimer();
    var self = this;
    this._delayTimerId = setTimeout(function() {
        self._delayTimerId = -1;
        self.hideContainer();
    }, this.root.hideDelay);
};

ActionMenuItem.prototype.hideChildren = function(targetMenuItem) {
    for (var i = 0; i < this.children.length; ++i) {
        var child = this.children[i];
        if (child.children) {
            if (targetMenuItem && $(targetMenuItem).closest(child.$()).length) {
                continue;
            }
            child.startHideTimer();
            child.hideChildren();
        }
    }
};

ActionMenuItem.prototype.itemMouseEntered = function(e) {
    this.addActiveClass();
    this.root.clearDelayTimer();
    this._clearDelayTimer();
    if (this.disabled) return;
    if (this.isShown()) {
        this.hideChildren();
        return;
    }
    var self = this;
    this._delayTimerId = setTimeout(function() {
        self._delayTimerId = -1;
        self.showContainer();
    }, this.root.showDelay);
};

ActionMenuItem.prototype.itemMouseLeft = function(e) {
    this._clearDelayTimer();
    if (this.disabled) return;
    if (!$(e.relatedTarget).closest(this.$container()).length) {
        this.removeActiveClass();
        this.startHideTimer();
    }
};

ActionMenuItem.prototype.containerMouseLeft = function(e) {
    if (this.disabled) return;
    this._clearDelayTimer();
    var $related = $(e.relatedTarget);
    if ($related.closest(this.$()).length) {
        return;
    }

    var container = this.parent ? this.parent.$container() : this.root.$();

    if ($related.closest(container).length) {
        this.startHideTimer();
        return;
    }
    this.root.startHideTimer();
};

ActionMenuItem.prototype.containerMouseEntered = function(e) {
    if (this.disabled) return;
    this.root.clearDelayTimer();
    this._clearDelayTimer();
    this.addActiveClass();
    if (this.isShown()) {
        this.hideChildren(e.target);
    }
};

ActionMenuItem.prototype.itemClicked = function() {
    if (this.disabled) return;
    if (this.children) {
        this._clearDelayTimer();
        this.showContainer();
    } else {
        var prevented = false;
        try {
            this.handler({preventDefault: function() {prevented = true;}});;
        } finally {
            if (!prevented) {
                this.root.hideContainer();
                this.root.emit("itemClick", this.id);
            }
        }
    }
};

ActionMenuItem.prototype.$ = function() {
    return this._domNode;
};

ActionMenuItem.prototype.$container = function() {
    return this._containerDom;
};

ActionMenuItem.prototype._createContainerDom = function(level) {
    var levelClass = level <= 5 ? "action-menu-level-" + level
                                : "action-menu-level-too-deep";

    return $('<div>', {
        class: this.root.containerClass + " " + levelClass
    }).css({
        position: "absolute",
        zIndex: level * 100000
    });
};

ActionMenuItem.prototype._createDom = function(content) {
    if (this.divider) {
        return $('<div>', {class: this.root.dividerClass});
    } else {
        return $('<div>', {class: this.root.itemClass}).html(content);
    }
};

ActionMenuItem.prototype.refresh = function() {
    if (this.divider || !this.isShown()) return;
    this.$().html(this.content(this) + "");
    if (this.parent) this.parent.positionSubMenu();
};

ActionMenuItem.prototype.setParent = function(parent) {
    this.parent = parent;
    this.$().appendTo(this.parent.$container());
    this.parent.$().addClass("action-menu-sub-menu-item");
};

ActionMenuItem.prototype.enable = function() {
    if (!this.disabled) return;
    this.disabled = false;
    this.$().removeClass(this.root.disabledClass);
};

ActionMenuItem.prototype.disable = function() {
    if (this.disabled) return;
    this.disabled = true;
    this.$().addClass(this.root.disabledClass);
    this.hideContainer();
};

ActionMenuItem.prototype.isShown = function() {
    return this.$container().parent().length > 0;
};

ActionMenuItem.prototype.getHorizontalDirection = function() {
    return this.parent ? this.parent._preferredHorizontalDirection
                       : this._preferredHorizontalDirection;
};

ActionMenuItem.prototype.getVerticalDirection = function() {
    return this.parent ? this.parent._preferredVerticalDirection
                       : this._preferredVerticalDirection;
};

ActionMenuItem.prototype.positionSubMenu = function() {
    if (!this.isShown()) return;
    var itemBox = this.$()[0].getBoundingClientRect();
    var containerBox = this.$container()[0].getBoundingClientRect();
    var xMax = $(window).width();
    var yMax = $(window).height();
    // Fits within the viewport
    if (xMax > containerBox.width && yMax > containerBox.height) {
        var left = -1;
        var top = -1;

        var preferredDirection = this.getHorizontalDirection();

        while (left < 0 || left + containerBox.width > xMax) {
            if (preferredDirection === "right") {
                left = Math.max(0, itemBox.right - 3);

                if (left + containerBox.width > xMax) {
                    left = xMax - containerBox.width;
                    preferredDirection = "left";
                }
            } else {
                left = itemBox.left + 3 - containerBox.width;

                if (left < 0) {
                    left = 0;
                    preferredDirection = "right";
                }
            }
        }
        this._preferredHorizontalDirection = preferredDirection;

    preferredDirection = this.getVerticalDirection();

    while (top < 0 || top + containerBox.height > yMax) {
        if (preferredDirection === "down") {
            top = Math.max(0, itemBox.top + 3);

            if (top + containerBox.height > yMax) {
                top = yMax - containerBox.height;
                preferredDirection = "up";
            }
        } else {
            top = itemBox.bottom - 3 - containerBox.height;

            if (top < 0) {
                top = 0;
                preferredDirection = "down";
            } else if (top + containerBox.height > yMax) {
                top = yMax - containerBox.height;
            }
        }
    }
    this._preferredVerticalDirection = preferredDirection;

        this.$container().css({
            top: top,
            left: left
        });
    }
};

ActionMenuItem.prototype.addActiveClass = function() {
    if (this.disabled) return;
    this.$().addClass(this.root.activeSubMenuClass);
};

ActionMenuItem.prototype.removeActiveClass = function() {
    this.$().removeClass(this.root.activeSubMenuClass);
};

ActionMenuItem.prototype.showContainer = function() {
    this.addActiveClass();
    this.$container().appendTo("body");
    this.positionSubMenu();
};

ActionMenuItem.prototype.hideContainer = function() {
    this._preferredVerticalDirection = "down";
    this._preferredHorizontalDirection = "right";
    this._clearDelayTimer();
    this.$container().detach();
    this.removeActiveClass();
    if (this.children) {
        this.children.forEach(function(child) {
            child.hideContainer();
        });
    }
};

function createMenuItem(root, spec, level) {
    var children = null;
    if (spec.children) {
        if (spec.divider) throw new Error("divider cannot have children");
        var children = spec.children.map(function(childSpec) {
            return createMenuItem(root, childSpec, level + 1);
        });
    }
    return new ActionMenuItem(root, spec, children, level);
}

function ActionMenu(opts) {
    EventEmitter.call(this);
    opts = Object(opts);

    this.rootClass = opts.rootClass || "action-menu-root";
    this.containerClass = opts.containerClass || "action-menu-submenu";
    this.itemClass = opts.itemClass || "action-menu-item";
    this.disabledClass = opts.disabledClass || "action-menu-disabled";
    this.dividerClass = opts.dividerClass || "action-menu-divider";
    this.activeSubMenuClass = opts.activeSubMenuClass || "action-menu-active";
    this.showDelay = Math.min(1000, Math.max(0, +opts.subMenuShowDelay || 300));
    this.hideDelay = Math.min(3000, Math.max(0, +opts.subMenuHideDelay || 800));


    this._delayTimerId = -1;
    this._domNode = $('<div>', {
        class: this.rootClass
    });

    this._menuItems = opts.menu.map(function(spec) {
        return createMenuItem(this, spec, opts._initialLevel || 1);
    }, this);

    this._menuItems.forEach(function(item) {
        item.$().appendTo(this.$());
    }, this);

    this._idToItem = {};
    this.forEach(function(item) {
        if (item.divider) return;
        if (!item.id) {
            throw new Error("unique id is required for menu item");
        }
        var id = item.id + "";

        if (this._idToItem[id]) {
            throw new Error("unique id is required for menu item. " + id + " is duplicate.");
        }

        this._idToItem[id] = item;
    }, this);
};
util.inherits(ActionMenu, EventEmitter);

ActionMenu.prototype.destroy = function() {
    this.clearDelayTimer();
    this.forEach(function(child) { child.destroy(); });
    this.hideContainer();
    this.$().remove();
    this.removeAllListeners();

};

ActionMenu.prototype.$containers = function() {
    var ret = this.$();
    this.forEach(function(item) {
        if (item.children && item.isShown())  {
            ret = ret.add(item.$container()[0]);
        }
    });
    return ret;
};

ActionMenu.prototype.$ = function() {
    return this._domNode;
};

ActionMenu.prototype.clearDelayTimer = function() {
    if (this._delayTimerId !== -1) {
        clearTimeout(this._delayTimerId);
        this._delayTimerId = -1;
    }
};

ActionMenu.prototype.startHideTimer = function() {
    this.clearDelayTimer();
    var self = this;
    this._delayTimerId = setTimeout(function() {
        self._delayTimerId = -1;
        self.hideContainer();
    }, this.hideDelay);
};

ActionMenu.prototype.hideContainer = function() {
    this._menuItems.forEach(function(item) {
        item.hideContainer();
    });
};

ActionMenu.prototype.forEach = function(fn, ctx) {
    var items = this._menuItems.slice();
    var index = 0;

    while (items.length > 0) {
        var item = items.shift();

        if (item.children) {
            items.push.apply(items, item.children);
        }

        if (fn.call(ctx || item, item, index) === false) return;
        index++;
    }
};

ActionMenu.prototype.refreshAll = function() {
    this.forEach(ActionMenuItem.prototype.refresh);
};

ActionMenu.prototype.disableAll = function() {
    this.forEach(ActionMenuItem.prototype.disable);
    this.emit("activationChange", this);
};

ActionMenu.prototype.enableAll = function() {
    this.forEach(ActionMenuItem.prototype.enable);
    this.emit("activationChange", this);
};

ActionMenu.prototype.disable = function(actions) {
    if (!Array.isArray(actions)) {
        actions = [actions];
    }

    actions.forEach(function(action) {
        this._idToItem[action].disable();
    }, this);
    this.emit("activationChange", this);
};

ActionMenu.prototype.enable = function(actions) {
    if (!Array.isArray(actions)) {
        actions = [actions];
    }
    actions.forEach(function(action) {
        this._idToItem[action].enable();
    }, this);
    this.emit("activationChange", this);
};

ActionMenu.ContextMenu = function ContextMenu(dom, opts) {
    EventEmitter.call(this);
    opts = Object(opts);
    opts._initialLevel = 2;
    opts.rootClass = opts.rootClass ? opts.rootClass + " action-menu-context-root"
                                    : "action-menu-root action-menu-context-root";
    this._menu = new ActionMenu(opts);
    this._domNode = this._menu.$().css({
        position: "absolute",
        zIndex: 1
    });
    this._shown = false;
    this._targetDom = $(dom);
    this._x = 0;
    this._y = 0;
    this._xMax = 0;
    this._yMax = 0;

    this.documentClicked = this.documentClicked.bind(this);
    this.hide = this.hide.bind(this);
    this.rightClicked = this.rightClicked.bind(this);
    this.keypressed = this.keypressed.bind(this);
    this.position = this.position.bind(this);

    this.preventDefault = $.noop;

    this._targetDom.on("contextmenu", this.rightClicked);
    // Use event capturing so that these are handled even if stopPropagation()
    // is called.
    document.addEventListener("click", this.documentClicked, true);
    document.addEventListener("mousedown", this.documentClicked, true);
    document.addEventListener("keydown", this.keypressed, true);
    window.addEventListener("blur", this.hide, true);
    window.addEventListener("scroll", this.position, true);
    window.addEventListener("resize", this.position, true);

    this._menu.on("itemClick", this.hide);
    util.documentHidden.on("change", this.hide);
};
util.inherits(ActionMenu.ContextMenu, EventEmitter);

ActionMenu.ContextMenu.prototype.destroy = function() {
    this.hide();
    util.documentHidden.removeListener("change", this.hide);
    this._menu.removeListener("itemClick", this.hide);
    window.removeEventListener("blur", this.hide, true);
    window.removeEventListener("scroll", this.position, true);
    window.removeEventListener("resize", this.position, true);
    document.removeEventListener("click", this.documentClicked, true);
    document.removeEventListener("mousedown", this.documentClicked, true);
    document.removeEventListener("keydown", this.keypressed, true);
    this._targetDom.off("contextmenu", this.rightClicked);
    this.removeAllListeners();
    this._menu.destroy();
};

ActionMenu.ContextMenu.prototype.$ = function() {
    return this._domNode;
};

ActionMenu.ContextMenu.prototype.position = function() {
    if (!this._shown) return;
    var x = this._x;
    var y = this._y;
    var box = this.$()[0].getBoundingClientRect();
    var xMax = $(window).width();
    var yMax = $(window).height();

    var positionChanged = false;
    if (xMax !== this._xMax || yMax !== this._yMax) {
        x = x * (xMax / this._xMax);
        y = y * (yMax / this._yMax);
        this._x = x;
        this._y = y;
        this._xMax = xMax;
        this._yMax = yMax;
        positionChanged = true;
    }

    if (x + box.width > xMax) {
        positionChanged = true;
        x = Math.max(0, xMax - box.width);
    }

    if (y + box.height > yMax) {
        positionChanged = true;
        y = Math.max(0, yMax - box.height);
    }

    this.$().css({left: x, top: y});

    if (positionChanged) {
        this._menu.forEach(function(child) {
            if (child.children) {
                child.positionSubMenu();
            }
        });
    }
};

ActionMenu.ContextMenu.prototype.rightClicked = function(e) {
    this.hide();
    this.show(e);
    if (this._shown) {
        e.preventDefault();
        this._x = e.clientX;
        this._y = e.clientY;
        this._xMax = $(window).width();
        this._yMax = $(window).height();
        this.position();
    }
};

ActionMenu.ContextMenu.prototype.show = function(e) {
    if (this._shown) return;
    var prevented = false;
    this.preventDefault = function() {prevented = true;};
    this.emit("willShowMenu", e, this);
    if (prevented) return;
    this._shown = true;
    this.$().appendTo("body");
    this.emit("didShowMenu", e, this);

};

ActionMenu.ContextMenu.prototype.hide = function() {
    if (!this._shown) return;
    this._shown = false;
    this.$().detach();
    this._menu.hideContainer();
};

["disable", "enable", "disableAll", "enableAll", "refreshAll",
"forEach"].forEach(function(methodName) {
    var menuMethod = ActionMenu.prototype[methodName];
    ActionMenu.ContextMenu.prototype[methodName] = function()  {
        return menuMethod.apply(this._menu, arguments);
    };
});

ActionMenu.ContextMenu.prototype.documentClicked = function(e) {
    if (!this._shown) return;

    var $target = $(e.target);
    var containerClicked = false;
    this._menu.$containers().each(function() {
        if ($target.closest(this).length > 0) {
            containerClicked = true;
            return false;
        }
    });

    if (!containerClicked) {
        this.hide();
    }
};

ActionMenu.ContextMenu.prototype.keypressed = function() {
    if (!this._shown) return;
    this.hide();
};

return ActionMenu; })();

;
;
function Popup(width, height, opts) {
    EventEmitter.call(this);
    var self = this;
    this._idBase = +(new Date);
    this._popups = {};
    this._lastAdd = null;
    this.length = 0;
    this._width = width;
    this._height = height;
    this._stacks = opts && !!opts.stacks || true;
    this._stackOffsetX = opts && opts.stackOffsetX || 15;
    this._stackOffsetY = opts && opts.stackOffsetY || 15;
    this._closerClass = opts && opts.closerClass || "popup-closer-class";
    this._closeEvents = {};
    $(window)
        .bind("resize", function() {
            var key, popups = self._popups,
                left,
                top, width, height, winWidth = $(window)
                .width(),
                winHeight = $(window)
                .height(),
                popup, offset, id;

            for (key in popups) {

                popup = document.getElementById(key);
                width = parseInt(popup.style.width, 10);
                height = parseInt(popup.style.height, 10);
                offset = popups[key].offset;
                left = (((winWidth - width) / 2) >> 0) + offset * self._stackOffsetX;
                top = (((winHeight - height) / 2) >> 0) + offset * self._stackOffsetY;
                left = left < 0 ? 0 : left;
                top = top < 0 ? 0 : top;
                popup.style.left = left + "px";
                popup.style.top = top + "px";
            }
        });

    $(document)
        .delegate("." + this._closerClass.split(" ")[0], "click", function() {
            self.close.call(self, this);
        });

    this._className = opts && opts.addClass || "popup-main";
};
util.inherits(Popup, EventEmitter);

Popup.prototype.closeEvent = function(fn, id) {
    id = id || this._lastAdd;
    this._closeEvents[id] = fn;
};

Popup.prototype.closeAll = function() {
    if (!this.length) {
        return false;
    }
    var key, popups = this._popups;
    for (key in popups) {
        $("#" + key)
            .remove();
    }
    this._popups = {};
    this._lastAdd = null;
    this.length = 0;
    for (key in this._closeEvents) {
        this._closeEvents[key]();
        delete this._closeEvents[key];
    }
    this.emit("close");
    return this;
};

Popup.prototype.close = function(elm) {

    var node = elm,
        popup, className = this._className,
        popups = this._popups,
        l = popups.length,
        id, obj;
    if (!elm && this._lastAdd !== null) {
        node = $("#" + (this._lastAdd));

        delete popups[this._lastAdd];
        $(node)
            .remove();
        this.length--;
        if (typeof this._closeEvents[this._lastAdd] ==
            "function") {
            this._closeEvents[this._lastAdd]();
            delete this._closeEvents[this._lastAdd];
        }
        this.emit("close");
    } else {
        while (node) {

            if ((" " + node.className + " ")
                .indexOf(className) > -1) {
                popup = node;
                break;
            }
            node = node.parentNode;
        }

        if (popup && popups[popup.id]) {

            $(popup)
                .remove();
            delete popups[popup.id];
            this.length--;
            if (typeof this._closeEvents[popup.id] ==
                "function") {
                this._closeEvents[popup.id]();
                delete this._closeEvents[popup.id];
            }
            this.emit("close");
        }
    }

    if (!this.length) {
        this._lastAdd = null;
    } else {
        this._lastAdd = $("." + this._className)
            .last()[0].id;
    }
    return this;
};

Popup.prototype.open = function(html, width, height) {
    var div = document.createElement("div"),
        id, top, left,
        winWidth = $(window)
        .width(),
        winHeight = $(window)
        .height(),
        width = width || this._width,
        height = height || this._height,
        offset = this._stacks ? this.length : 0,
        closerDiv = document.createElement("div"),
        contentDelay, self = this,
        $div;

    id = "popup-" + (++this._idBase);
    left = (((winWidth - width) / 2) >> 0) + offset * this._stackOffsetX;
    top = (((winHeight - height) / 2) >> 0) + offset * this._stackOffsetY;
    left = left < 0 ? 0 : left;
    top = top < 0 ? 0 : top;
    div.id = id;
    closerDiv.className = this._closerClass;
    div.appendChild(closerDiv);
    div.className = this._className;
    div.setAttribute("style", "width:" + width + "px;height:" +
        height + "px;position:absolute;top:" + top +
        "px;left:" + left + "px;z-index:" + (100000 +
            offset) + ";display:block;");
    $div = $(div);
    $div.appendTo("body");
    this.emit("beforeOpen", id);
    this._popups[id] = {
        width: width,
        height: height,
        offset: offset
    };
    this._lastAdd = id;
    this.length++;
    $div.append(html);
    this.emit("open");
    return this;
};

Popup.prototype.html = function(html, elm) {
    elm = elm || (this._lastAdd && document.getElementById(this
        ._lastAdd));
    if (!elm) {
        return null;
    }
    elm.innerHTML = html;
    return elm;
};

;
;
function BlockingPopup() {
    Popup.apply(this, Array.prototype.slice.call(arguments, 0));
    this._blockerId = "blocker-" + (+new Date);
};
util.inherits(BlockingPopup, Popup);

BlockingPopup.prototype.closeAll = function() {
    if (!this.closeAll$()) {
        return false;
    }
    $("#" + this._blockerId).remove();
    return this;
};

BlockingPopup.prototype.open = function(html, width, height) {
    this.open$(html, width, height);

    if (this.length < 2) {
        $("<div id=\"" + this._blockerId +
                "\"style=\"background-color:rgba(0, 0, 0, 0.2);position:absolute;" +
                "top:0px;left:0px;z-index:99999;display:block;width:" +
                $(window)
                .width() + "px;" +
                "height:" + $(window)
                .height() + "px;\"></div>")
            .prependTo("body").one("click", this.closeAll.bind(this));
    }
    return this;
};

BlockingPopup.prototype.close = function(elm) {
    this.close$(elm);
    if (!this.length) {
        $("#" + this._blockerId)
            .remove();
    }
    return this;
};

;
;


function highlight(string, matchedCodePoints, tagStart, tagEnd) {
    if (!tagStart) tagStart = '<strong>';
    if (!tagEnd) tagEnd = '</strong>';
    var lowerCaseString = string.toLowerCase();

    if (lowerCaseString.length !== string.length) {
        // TODO: Implement.
        return string;
    }

    var ret = [];
    var currentIndex = 0;
    var i = 0;
    while (i < matchedCodePoints.length) {
        var start = util.indexOfCodePoint(lowerCaseString, matchedCodePoints[i], currentIndex);
        var end = start;

        for (var j = i + 1, k = start + 1; j < matchedCodePoints.length; ++j, ++k) {
            if (lowerCaseString.charCodeAt(k) === matchedCodePoints[j]) {
                end = k;
            } else {
                break;
            }
        }

        if (start === currentIndex) {
            ret.push(tagStart, string.slice(start, end + 1), tagEnd);
        } else {
            ret.push(string.slice(currentIndex, start), tagStart, string.slice(start, end + 1), tagEnd);
        }
        currentIndex = k;
        i = j;
    }
    if (currentIndex < string.length - 1) {
        ret.push(string.slice(currentIndex));
    }
    return ret.join("");
}

function TrackSearchResult(track, index, trackSearcher) {
    this.track = track;
    this.index = index;
    this.trackSearcher = trackSearcher;
    this._domNode = this._createDom();
}

TrackSearchResult.prototype._createDom = function() {
    return $("<div class='track-searcher-result ui-text notextflow'></div>");
};

TrackSearchResult.prototype.$ = function() {
    return this._domNode;
};

TrackSearchResult.prototype.getIndex = function() {
    return this.index;
};

TrackSearchResult.prototype.unselect = function() {
    this.$().removeClass("selected");
};

TrackSearchResult.prototype.select = function() {
    this.$().addClass("selected");
};

TrackSearchResult.prototype.remove = function() {
    this.$().remove();
};

TrackSearchResult.prototype.attach = function($parent) {
    var self = this;
    var highlighted = highlight(this.track.formatName(),
                              this.trackSearcher._currentQueryComponents,
                              "\x01",
                              "\x02");
    highlighted = highlighted.htmlEncode()
                        .replace(/\x01/g, "<strong>")
                        .replace(/\x02/g, "</strong>");
    this.$().html(highlighted);
    $parent.append(this.$());
    this.$().bind("click", function() {
        self.trackSearcher.selectResult(self);
    });
};

function TrackSearcher(playlist, domNode) {
    EventEmitter.call(this);
    this._playlist = playlist;
    this._currentResult = null;
    this._results = [];
    this._domNode = $(domNode);
    this._onKeyDown = $.proxy(this._onKeyDown, this);
    this._onInput = $.proxy(this._onInput, this);
    this._destroyed = false;
    this._currentQueryComponents = [];

    this.$().html("<input type='text' spellcheck='false' autocomplete='off' " +
        "class='track-searcher-input app-bread-text app-popup-input'>" +
        "<div class='track-searcher-header'>Results</div>" +
        "<div class='track-searcher-results'></div>");

    this.input().bind("keydown", this._onKeyDown);
    this.input().bind("input", this._onInput);
}
util.inherits(TrackSearcher, EventEmitter);

(function() {
    var MAX_RESULTS = 50;
    var MAX_LETTER_DISTANCE = 25;

    function queryComponents(query) {
        return [].map.call(query.replace(util.unicode.alphaNumericFilteringPattern, "")
                .toLowerCase(), toCharCode);
    }

    function toCharCode(v) {
        return v.charCodeAt(0);
    }

    function search(components, tracks) {
        if (!components.length) return [];
        var results = [];

        for (var i = 0; i < tracks.length; ++i) {
            var track = tracks[i];
            var searchString = track.getSearchString();
            if (!searchString.length) continue;

            var previousIndex = -1;
            var mostConsecutiveLetters = 0;
            var mostConsecutiveLettersCount = 0;
            var mostConsecutiveLettersMatchIndex = -1;
            var currentConsecutiveLetters = 0;
            var currentLetterIndex = 0;


            componentLoop: for (var j = 0; j < components.length; ++j) {
                var component = components[j];

                for (var k = currentLetterIndex; k < searchString.length; ++k) {
                    var letter = searchString.charCodeAt(k);

                    if (letter === component) {
                        if (previousIndex >= 0 && previousIndex === k - 1) {
                            currentConsecutiveLetters++;
                        } else if (currentConsecutiveLetters > 0) {
                            if (mostConsecutiveLetters === currentConsecutiveLetters) {
                                mostConsecutiveLettersCount++;
                            } else if (currentConsecutiveLetters > mostConsecutiveLetters) {
                                mostConsecutiveLettersCount = 1;
                                mostConsecutiveLetters = currentConsecutiveLetters;
                                mostConsecutiveLettersMatchIndex = k;
                            }
                            currentConsecutiveLetters = 0;
                        }
                        previousIndex = k;
                        currentLetterIndex = k + 1;
                        continue componentLoop;
                    }
                }
                break componentLoop;
            }

            if (mostConsecutiveLetters === currentConsecutiveLetters) {
                mostConsecutiveLettersCount++;
            } else if (currentConsecutiveLetters > mostConsecutiveLetters) {
                mostConsecutiveLetters = currentConsecutiveLetters;
                mostConsecutiveLettersCount = 1;
                mostConsecutiveLettersMatchIndex = k;
            }

            if (j === components.length) {
                results.push({
                    track: track,
                    mostConsecutiveLetters: mostConsecutiveLetters,
                    mostConsecutiveLettersCount: mostConsecutiveLettersCount,
                    mostConsecutiveLettersMatchIndex: mostConsecutiveLettersMatchIndex
                });
            }
        }

        return results.sort(function(a, b) {
            var comparison;

            if ((comparison = b.mostConsecutiveLetters - a.mostConsecutiveLetters) !== 0) {
                return comparison;
            }

            if ((comparison = b.mostConsecutiveLettersCount - a.mostConsecutiveLettersCount) !== 0) {
                return comparison;
            }

            if ((comparison = a.mostConsecutiveLettersMatchIndex - b.mostConsecutiveLettersMatchIndex) !== 0) {
                return comparison;
            }

            return a.track.formatName().localeCompare(b.track.formatName());
        }).slice(0, MAX_RESULTS);
    }

    TrackSearcher.prototype._onKeyDown = function(e) {
        switch(e.which) {
            case 38:
                e.preventDefault();
                this.moveToPrev();
                break;
            case 40:
                e.preventDefault();
                this.moveToNext();
                break;
            case 13:
                e.preventDefault();
                this.selectResult(this._currentResult);
                break;
            case 27:
                e.preventDefault();
                this.destroy();
                break;
        }
    };

    TrackSearcher.prototype._onInput = function(e) {
        this.search();
    };

    TrackSearcher.prototype.destroy = function() {
        if (this._destroyed) return;
        this._results = null;
        this.$().remove();
        this.emit("destroy");
    };

    TrackSearcher.prototype.moveToNext = function() {
        var index = this._currentResult ? this._currentResult.getIndex() + 1 : 0;
        index = Math.min(this.length() - 1, Math.max(0, index));
        this.setCurrentResult(this._results[index]);
    };

    TrackSearcher.prototype.moveToPrev = function() {
        var index = this._currentResult ? this._currentResult.getIndex() - 1 : 0;
        index = Math.min(this.length() - 1, Math.max(0, index));
        this.setCurrentResult(this._results[index]);
    };

    TrackSearcher.prototype.setCurrentResult = function(result) {
        if (this._currentResult) this._currentResult.unselect();
        this._currentResult = result;
        if (result) {
            result.select();
            util.scrollIntoView.alignMiddle(result.$()[0], result.$().parent()[0]);
        }
    };

    TrackSearcher.prototype.selectResult = function(result) {
        if (result) {
            this.destroy();
            this._playlist.changeTrackExplicitly(result.track);
            this._playlist.centerOnTrack(result.track);
        }
    };

    TrackSearcher.prototype.search = function() {
        var value = this.input().val();
        var components = queryComponents(value);

        if (util.arrayEquals(components, this._currentQueryComponents)) {
            return;
        }
        this.setCurrentResult(null);

        this._results.forEach(function(result) {
            result.remove();
        });
        this._currentQueryComponents = components;
        this._results = search(components, this._playlist.getTracks()).map(function(v, i) {
            return new TrackSearchResult(v.track, i, this);
        }, this);

        if (this._results.length) {
            var $parent = this.$().find(".track-searcher-results");
            this._results.forEach(function(result) {
                result.attach($parent);
            }, this);
            this.moveToNext();
        }
    };

    TrackSearcher.prototype.length = function() {
        return this._results.length;
    };

    TrackSearcher.prototype.input = function() {
        return this.$().find(".track-searcher-input");
    };

    TrackSearcher.prototype.$ = function() {
        return this._domNode;
    };
})();

;
;
function LocalFiles(playlist, allowMime, allowExt) {
    var i, l;
    this._mimes = Object.create(null);
    this._extensions = Object.create(null);
    for (i = 0, l = allowMime && allowMime.length || 0; i < l; ++i) {
        this._mimes[allowMime[i]] = true;
    }
    for (i = 0, l = allowExt && allowExt.length || 0; i < l; ++i) {
        this._extensions[allowExt[i]] = true;
    }
    this._playlist = playlist;
}

(function() {
    const rext = /\.([A-Z_a-z0-9-]+)$/;
    function getExtension(name) {
        return name.match(rext);
    }

    LocalFiles.prototype.isMimeTypeSupported = function(mime) {
        return this._mimes[mime] === true;
    };


    LocalFiles.prototype.isExtensionSupported = function(extName) {
        return this._extensions[extName] === true;
    };

    LocalFiles.prototype.handle = function(files) {
        var tracks = [];
        for (var i = 0; i < files.length; ++i) {
            var file = files[i];
            var ext = getExtension(file.name);

            if (ext) {
                ext = ext[1].toLowerCase();
            } else {
                ext = "";
            }

            if (this.isExtensionSupported(ext) ||
                this.isMimeTypeSupported(file.type)) {
                tracks.push(new Track(file));
            } else if (!ext && !file.type) {
                tracks.push(new Track(file));
            }
        }

        this._playlist.add(tracks);
    };
})();

;
;
function Slider(domNode, opts) {
    EventEmitter.call(this);
    this._domNode = $(domNode);
    this._direction = opts && opts.direction || "horizontal";

    if (this._direction == "vertical") {
        this._mouseCoordinateProp = "clientY";
        this._offsetDirectionProp = "top";
        this._offsetDimensionFunc = "outerHeight";
    } else {
        this._mouseCoordinateProp = "clientX";
        this._offsetDirectionProp = "left";
        this._offsetDimensionFunc = "outerWidth";
    }

    this._clickMove = opts && opts.clickMove || true;
    this._offset = 0;
    this._dimension = 0;
    this._percentage = -1;

    this._onReLayout = $.proxy(this._onReLayout, this);

    this._init();
}
util.inherits(Slider, EventEmitter);

Slider.prototype.$ = function() {
    return this._domNode;
};

Slider.prototype._calculateDimensions = function() {
    this._offset = this.$().offset()[this._offsetDirectionProp];
    this._dimension = this.$()[this._offsetDimensionFunc]();
};

Slider.prototype._onReLayout = function() {
    this._calculateDimensions();
};

Slider.prototype.__percentage = function(e) {
    var r = (e[this._mouseCoordinateProp] - this._offset) / this._dimension;
    r = r > 1 ? 1 : r;
    r = r < 0 ? 0 : r;
    return r;
};

Slider.prototype.__createMouseUp = function() {
    var self = this;
    return function(e) {
        self.emit("slideEnd", self.__percentage(e));
        $(document)
            .off("mousemove", self.__onmousemove)
            .off("mouseup", self.__onmouseup);
        $(window).off("relayout", self._onReLayout);
    }
};

Slider.prototype.__createMouseMover = function() {
    var self = this;
    return function(e) {
        if (typeof e.which === "number" && e.which !== 1) {
            return self.__onmouseup(self._lastEvent);
        }
        self._lastEvent = e;
        self.emit("slide", self.__percentage(e));
    };
};

Slider.prototype._init = function() {
    var self = this;
    this.__onmouseup = this.__createMouseUp();
    this.__onmousemove = this.__createMouseMover();
    this.$().on("mousedown", function(e) {
        if (e.which !== 1) {
            return true;
        }

        self._calculateDimensions();
        self.emit("slideBegin", e);

        if (self._clickMove) {
            self.emit("slide", self.__percentage(e));
        }

        $(document)
            .on("mousemove", self.__onmousemove)
            .on("mouseup", self.__onmouseup);
        $(window).on("relayout", self._onReLayout);
        e.preventDefault();
        return false;
    });

};

;
;
var WorkerPool = (function() {

var runningId = 0;
var WORKER_THREAD = 0;
var MAIN_THREAD = 1;

function PoolWorker(pool, url) {
    EventEmitter.call(this);
    this.pool = pool;
    this.url = url;
    this.worker = new Worker(url);

    this.workerQueue = [];
    this.mainQueue = [];

    this.workerVacant = true;
    this.mainVacant = true;

    this.currentWorkerWork = null;
    this.currentMainWork = null;

    this._onMessage = $.proxy(this._onMessage, this);
    this._onError = $.proxy(this._onError, this);
    this.worker.addEventListener("message", this._onMessage, false);
    this.worker.addEventListener("error", this._onError, false);
}
util.inherits(PoolWorker, EventEmitter);

PoolWorker.prototype._onError = function(e) {
    var err = new Error(e.message);
    err.stack = e.filename + ":" + e.lineno;
    var currentWork = this.currentWorkerWork;
    this.currentWorkerWork = null;

    if (currentWork) {
        currentWork.reject(err);
        this._workerNext();
    } else {
        throw err;
    }
};

PoolWorker.prototype._onMessage = function(e) {
    if (e.data.log) {
        console.log.apply(console, e.data.args);
        return;
    }
    if (this.currentWorkerWork && this.currentWorkerWork.id === e.data.id) {
        var currentWork = this.currentWorkerWork;
        this.currentWorkerWork = null;
        if (e.data.transferList && e.data.transferList.length) {
            this.emit("transferList", e.data.transferList);
        }
        if (e.data.error) {
            currentWork.reject(e.data.error);
        } else {
            currentWork.resolve(e.data.result);
        }
        this._workerNext();
    }
};

PoolWorker.prototype._workerNext = function() {
    if (!this.workerQueue.length) {
        this.workerVacant = true;
        this.currentWorkerWork = null;
    } else {
        this._startWork(this.workerQueue.shift());
    }
};

PoolWorker.prototype._mainNext = function() {
    if (!this.mainQueue.length) {
        this.mainVacant = true;
        this.currentMainWork = null;
    } else {
        this._startWork(this.mainQueue.shift());
    }
};

PoolWorker.prototype._startWork = function(work) {
    if (work.descriptor.type === WORKER_THREAD) {
        var transferList = work.descriptor.transferList;
        var message = {
            id: work.id,
            args: work.descriptor.args,
            methodName: work.descriptor.methodName,
            transferList: null
        };
        if (transferList && transferList.length) {
            message.transferList = transferList
            this.worker.postMessage(message, transferList);
        } else {
            this.worker.postMessage(message);
        }
        this.workerVacant = false;
        this.currentWorkerWork = work;
    } else if (work.descriptor.type === MAIN_THREAD) {
        var self = this;
        work.resolve(new Promise(function(resolve) {
            resolve(work.descriptor.fn());
        }).finally(function() {
            self._mainNext();
        }));
        this.mainVacant = false;
        this.currentMainWork = work;
    }
};

PoolWorker.prototype.isVacantForWorkerWork = function() {
    return this.workerVacant;
};

PoolWorker.prototype.isVacantForMainWork = function() {
    return this.mainVacant;
};

PoolWorker.prototype.queueWork = function(descriptor) {
    var workId = runningId++;
    var self = this;
    return new Promise(function(resolve, reject) {
        var work = {
            id: workId,
            resolve: resolve,
            reject: reject,
            descriptor: descriptor
        };

        if (descriptor.type === MAIN_THREAD) {
            if (!self.mainVacant) {
                self.mainQueue.push(work);
            } else {
                self._startWork(work);
                self.mainVacant = false;
            }
        } else if (descriptor.type === WORKER_THREAD) {
            if (!self.workerVacant) {
                self.workerQueue.push(work);
            } else {
                self._startWork(work);
                self.workerVacant = false;
            }
        }
    });
};

PoolWorker.prototype.invokeInMainThread = function(fn) {
    var descriptor = {
        type: MAIN_THREAD,
        fn: fn
    };

    return this.queueWork(descriptor);
};

PoolWorker.prototype.invokeInWorkerThread = function(methodName, args, transferList) {
    var descriptor = {
        type: WORKER_THREAD,
        methodName: methodName,
        args: args || [],
        transferList: transferList || []
    };

    return this.queueWork(descriptor);
};

function WorkerPool(count, url) {
    EventEmitter.call(this);
    count = Math.max(1, +count) || 1;
    this.url = url;
    this.lastWorkerWorkQueued = -1;
    this.lastWorkerMainQueued = -1;
    this.poolWorkers = new Array(count);
    this.reservedWorkers = [];

    for (var i = 0; i < count; ++i) {
        this.poolWorkers[i] = new PoolWorker(this, url);
    }
}
util.inherits(WorkerPool, EventEmitter);

WorkerPool.prototype.reserveWorker = function() {
    var worker = this.poolWorkers.shift();
    if (worker) {
        this.reservedWorkers.push(worker);
    }
    return worker || null;
};

WorkerPool.prototype.restoreWorker = function(worker) {
    var i = this.reservedWorkers.indexOf(worker);
    if (i >= 0) {
        this.reservedWorkers.splice(i, 1);
        this.poolWorkers.push(worker);
    }
};

WorkerPool.prototype._getNextPoolWorkerForWorkerWork = function() {
    for (var i = 0; i < this.poolworkers.length; ++i) {
        if (this.poolWorkers[i].isVacantForWorkerWork()) {
            return this.poolWorkers[i];
        }
    }
    var index = (this.lastWorkerWorkQueued  + 1) % this.poolworkers.length;
    this.lastWorkerWorkQueued = index;
    return this.poolWorkers[index];
};

WorkerPool.prototype._getNextPoolWorkerForMainWork = function() {
    for (var i = 0; i < this.poolworkers.length; ++i) {
        if (this.poolWorkers[i].isVacantForMainWork()) {
            return this.poolWorkers[i];
        }
    }
    var index = (this.lastWorkerMainQueued + 1) % this.poolworkers.length;
    this.lastWorkerMainQueued = index;
    return this.poolWorkers[index];
};

WorkerPool.prototype.invokeInMainThread = function(fn) {
    var descriptor = {
        type: MAIN_THREAD,
        fn: fn
    };

    return this._getNextPoolWorkerForMainWork().queueWork(descriptor);
};

WorkerPool.prototype.invokeInWorkerThread = function(methodName, args, transferList) {
    var descriptor = {
        type: WORKER_THREAD,
        methodName: methodName,
        args: args,
        transferList: transferList || []
    };

    return this._getNextPoolWorkerForWorkerWork().queueWork(descriptor);
};

return WorkerPool;})();

;
;
var ReplayGainProcessor = (function() {"use strict";

// Chrome likes to hold on to malloced arrays even when the tab will crash from running out of memory
// so just use the same preallocated array for everything.
// There is one trick that will release all malloced memory from typed arrays: opening developer tools or
// reopening it if it was already open.
var PREALLOCATION_SIZE = 882000; //4410000;
var OfflineAudioContext = window.OfflineAudioContext || window.webkitOfflineAudioContext;

function ReplayGainTrackProcessor(replayGainProcessor, audioBuffer) {
    this.replayGainProcessor = replayGainProcessor;
    this.audioBuffer = audioBuffer;
    this.worker = replayGainProcessor._worker;

    this._buffers = replayGainProcessor._buffers;
    this._onTransferList = $.proxy(this._onTransferList, this);
    // The worker will transfer back the pre allocated arrays once it's done
    // with the current chunk.
    this.worker.on("transferList", this._onTransferList);
}

ReplayGainTrackProcessor.prototype._getBuffer = function(index) {
    var value = this._buffers[index];
    if (!value) {
        value = this._buffers[index] = new Float32Array(PREALLOCATION_SIZE);
    }
    return value;
};

ReplayGainTrackProcessor.prototype._onTransferList = function(transferList) {
    for (var i = 0; i < transferList.length; ++i) {
        this.replayGainProcessor._buffers[i] = this._buffers[i] = new Float32Array(transferList[i]);
    }
};

ReplayGainTrackProcessor.prototype.start = function(track) {
    var self = this;
    var channels = Math.min(5, self.audioBuffer.numberOfChannels);
    var sampleRate = self.audioBuffer.sampleRate;
    var length = self.audioBuffer.length;
    var index = 0;

    return self.worker.invokeInWorkerThread("initializeReplayGainCalculation", [{
        channels: self.audioBuffer.numberOfChannels,
        sampleRate: self.audioBuffer.sampleRate
    }]).then(function loop() {
        var frameCount = Math.min(length - index, PREALLOCATION_SIZE);

        for (var i = 0; i < channels; ++i) {
            var buffer = self._getBuffer(i);
            self.audioBuffer.copyFromChannel(buffer, i, index);
        }
        index += frameCount;
        return self.worker.invokeInWorkerThread("addFrames", [{
            length: frameCount
        }], self._buffers.map(function(v) {
            return v.buffer;
        })).then(function() {
            if (index < length) {
                return loop();
            } else {
                var album = track.getTagData().getAlbum();
                return self.worker.invokeInWorkerThread("getReplayGain", [{album: album}]);
            }
        });
    }).tap(function(response) {
        response.duration = self.audioBuffer.duration;
    }).catch(function(e) {
        return self.worker.invokeInWorkerThread("cancelReplayGainCalculation").thenThrow(e);
    }).finally(function() {
        self.worker.removeListener("transferList", self._onTransferList);
        self.audioBuffer = self.replayGainProcessor = self.worker = self._buffers = null;
    });
};

function ReplayGainProcessor(workerPool) {
    this._worker = workerPool.reserveWorker();
    this._buffers = new Array(5);
    this._buffers.length = 0;
}

ReplayGainProcessor.prototype._createDecoder = function(channels, sampleRate) {
    return new OfflineAudioContext(channels, 1024, sampleRate);
};

ReplayGainProcessor.prototype.getReplayGainForTrack = function(track) {
    var url;
    var self = this;
    var audioBuffer = null;
    return this._worker.invokeInMainThread(function(release) {
        return new Promise(function(resolve, reject) {
            if (track.isDetachedFromPlaylist()) {
                return reject(new TrackWasRemovedError());
            }
            url = URL.createObjectURL(track.file);
            var request = new XMLHttpRequest();

            request.open('GET', url, true);
            request.responseType = 'arraybuffer';
            request.onload = function() {
                var basicInfo = track.getBasicInfo();
                self._createDecoder(basicInfo.channels,
                                    basicInfo.sampleRate).decodeAudioData(request.response, function(_audioBuffer) {
                    audioBuffer = _audioBuffer;
                    resolve();
                }, function() {
                    reject(new AudioError(MediaError.MEDIA_ERR_DECODE));
                });
                request = null;
            };

            request.onerror = function(e) {
                request = null;
                reject(new Error("invalid audio file"));
            };
            request.send();
        }).then(function() {
            var replayGainTrackProcessor = new ReplayGainTrackProcessor(self, audioBuffer);
            audioBuffer = null;
            return replayGainTrackProcessor.start(track).finally(function() {
                if (url) {
                    URL.revokeObjectURL(url);
                    url = null;
                }
            });
        })
    });
}

return ReplayGainProcessor; })();

;
;
var tagDatabase = (function() {"use strict";
const VERSION = 2;
const NAME = "TagDatabase";
const KEY_NAME = "trackUid";
const TABLE_NAME = "trackInfo";
const READ_WRITE = "readwrite";
const READ_ONLY = "readonly";

const indexedDB = window.indexedDB || window.mozIndexedDB || window.msIndexedDB;
const IDBTransaction = window.IDBTransaction ||  window.msIDBTransaction || {READ_WRITE: "readwrite"}; // This line should only be needed if it is needed to support the object's constants for older browsers
const IDBKeyRange = window.IDBKeyRange || window.msIDBKeyRange;


function TagDatabase() {
    var request = indexedDB.open(NAME, VERSION);
    this.db = util.IDBPromisify(request);
    this.db.suppressUnhandledRejections();

    this._onUpgradeNeeded = $.proxy(this._onUpgradeNeeded, this);
    request.onupgradeneeded = this._onUpgradeNeeded;
}


TagDatabase.prototype._onUpgradeNeeded = function(event) {
    var db = event.target.result;
    var objectStore = db.createObjectStore(TABLE_NAME, { keyPath: KEY_NAME });
    this.db = util.IDBPromisify(objectStore.transaction).thenReturn(db);
};

TagDatabase.prototype.query = function(trackUid) {
    return this.db.then(function(db) {
        return util.IDBPromisify(db.transaction(TABLE_NAME).objectStore(TABLE_NAME).get(trackUid));
    });
};

TagDatabase.prototype.insert = function(trackUid, data) {
    data.trackUid = trackUid;
    return this.db.then(function(db) {
        var store = db.transaction(TABLE_NAME, READ_WRITE).objectStore(TABLE_NAME);
        return util.IDBPromisify(store.add(data));
    });
};

TagDatabase.prototype.updateRating = function(trackUid, rating) {
    var self = this;
    return this.db.then(function(db) {
        var store = db.transaction(TABLE_NAME, READ_ONLY).objectStore(TABLE_NAME);
        return util.IDBPromisify(store.get(trackUid));
    }).then(function(data) {
        var store = self.db.value().transaction(TABLE_NAME, READ_WRITE).objectStore(TABLE_NAME);
        data = Object(data);
        data.trackUid = trackUid;
        data.rating = rating;
        return util.IDBPromisify(store.put(data));
    });
};


return new TagDatabase();})();

;
;
function TagData(track, title, artist, basicInfo, album, albumIndex, picture) {
    this.track = track;
    this.title = title || null;
    if (this.title) this.title = util.formatTagString(this.title);
    this.artist = artist || null;
    if (this.artist) this.artist = util.formatTagString(this.artist);
    this.basicInfo = basicInfo || {
        duration: NaN,
        sampleRate: 44100,
        channels: 2
    };
    this.basicInfo.channels = this.basicInfo.channels || 2;
    this.basicInfo.sampleRate = this.basicInfo.sampleRate || 44100;
    this.basicInfo.channels = Math.min(Math.max(1, this.basicInfo.channels));
    this.album = album || null;
    if (this.album) this.album = util.formatTagString(this.album);
    this.albumIndex = albumIndex || -1;
    this.trackGain = 0;
    this.albumGain = 0;
    this.trackPeak = 1;
    this.albumPeak = 1;
    this.rating = -1;
    this.picture = picture;

    this._formattedTime = null;
    this._formattedName = null;
    this._image = null;

    this.beginSilenceLength = this.basicInfo.encoderDelay || 0;
    this.endSilenceLength = this.basicInfo.encoderPadding || 0;
}

TagData.prototype.formatTime = function() {
    if (this._formattedTime !== null) return this._formattedTime;
    if (!this.basicInfo.duration) {
        return this._formattedTime = "";
    }
    var duration = Math.max(0, this.basicInfo.duration - this.getTotalSilenceLength());
    return (this._formattedTime = util.toTimeString(duration));
};

var stripExtensionPattern = new RegExp("\\.(?:" + features.allowExtensions.join("|") + ")$", "i");
var separatorPattern = /(.+)\s*-\s*(.+)/;
TagData.prototype.formatName = function() {
    if (this._formattedName !== null) return this._formattedName;
    if (!this.title && !this.artist) {
        var fileName = this.track.getFileName().replace(stripExtensionPattern, "");
        var matches = fileName.match(separatorPattern);
        var trackTitle;
        if (!matches) {
            trackTitle = util.capitalize(fileName);
        } else {
            trackTitle = util.capitalize(matches[1]) + " - " + util.capitalize(matches[2]);
        }

        return (this._formattedName = trackTitle);
    }
    var separator = this.artist && this.title ? " - " : "";
    var artist = this.artist ? this.artist : "";
    var title = this.title ? this.title : "";
    return (this._formattedName = artist + separator + title);
};

TagData.prototype.shouldCalculateReplayGain = function() {
    return this.getTrackGain() === 0;
};

TagData.prototype.getTrackGain = function() {
    return this.trackGain;
};

TagData.prototype.getAlbumGain = function() {
    return this.albumGain;
};

TagData.prototype.getTrackPeak = function() {
    return this.trackPeak;
};

TagData.prototype.getAlbumPeak = function() {
    return this.albumPeak;
};

TagData.prototype.getAlbum = function() {
    return this.album;
};

TagData.prototype.getArtist = function() {
    return this.artist;
};

TagData.prototype.isRated = function() {
    return this.rating !== -1;
};

TagData.prototype.getRating = function() {
    return this.rating;
};

TagData.prototype.setRating = function(val) {
    this.rating = Math.min(5, Math.max(1, +val));
    tagDatabase.updateRating(this.track.getUid(), this.rating);
};

TagData.prototype.unsetRating = function() {
    this.rating = -1;
    tagDatabase.updateRating(this.track.getUid(), this.rating);
};

var NULL_STRING = "\x00";

TagData.prototype.hasPicture = function() {
    return !!this.picture;
};

TagData.prototype.getImage = function() {
    if (!this.picture) return null;
    if (this._image) return this._image.cloneNode();

    var blob = this.track.getFile().slice(this.picture.start,
                                          this.picture.start + this.picture.length,
                                          this.picture.type);
    var url = URL.createObjectURL(blob);
    this._image = new Image();
    this._image.src = url;
    return this._image.cloneNode();
};

TagData.prototype.getImageUrl = function() {
    var ret = this.getImage();
    if (!ret) return null;
    return ret.src;
};

TagData.prototype.destroy = function() {
    if (this._image) {
        URL.revokeObjectURL(this._image.src);
        this._image = null;
    }
};

TagData.prototype.getTitleForSort = function() {
    if (this.title === null) return NULL_STRING;
    return this.title;
};

TagData.prototype.getAlbumForSort = function() {
    if (this.album === null) return NULL_STRING;
    return this.album;
};

TagData.prototype.getArtistForSort = function() {
    if (this.artist === null) return NULL_STRING;
    return this.artist;
};

TagData.prototype.getAlbumIndexForSort = function() {
    return this.albumIndex;
};

TagData.prototype.getTotalSilenceLength = function() {
    return this.beginSilenceLength + this.endSilenceLength;
};

TagData.prototype.getBeginSilenceLength = function() {
    return this.beginSilenceLength;
};

TagData.prototype.setDataFromTagDatabase = function(data) {
    this.beginSilenceLength = data.silence && data.silence.beginSilenceLength ||
                              this.beginSilenceLength ||
                              0;
    this.endSilenceLength = data.silence && data.silence.endSilenceLength ||
                            this.endSilenceLength ||
                            0;
    this.trackGain = data.trackGain;
    this.trackPeak = data.trackPeak || 1;
    this.albumGain = data.albumGain;
    this.albumPeak = data.albumPeak || 1;
    this._formattedTime = null;
    this.basicInfo.duration = data.duration || this.duration || NaN;
    this.rating = data.rating || -1;
    this.track.tagDataUpdated();
};

;
;
var ID3Process = (function() {"use strict";

const BlobConstructor = window.Blob ||
                        window.WebKitBlob ||
                        window.WebkitBlob ||
                        window.MozBlob ||
                        window.MsBlob ||
                        null;

const BlobSlice = BlobConstructor.prototype.slice ||
                  BlobConstructor.prototype.webkitSlice ||
                  BlobConstructor.prototype.webKitSlice ||
                  BlobConstructor.prototype.mozSlice ||
                  BlobConstructor.prototype.MsSlice ||
                  BlobConstructor.prototype.msSlice ||
                  null;

const XING_FRAMES = 0x0001;
const XING_BYTES = 0x0002;
const XING_TOC = 0x0004;
const XING_QUALITY_INDICATOR = 0x0004;

const ID3Encoding = {
    ISO88591: 0,
    UNICODE: 1,
    UTF16BE: 2,
    UTF8: 3
};

const ID3Artist = ["TP1", "TP1", "TP1", "TPE1", "TPE1"];
const ID3Title = ["TT2", "TT2", "TT2", "TIT2", "TIT2"];
const ID3Album = ["TAL", "TAL", "TAL", "TALB", "TALB"];
const ID3TrackIndex = ["TRK", "TRK", "TRK", "TRCK", "TRCK"];
const ID3Picture = ["PIC", "PIC", "PIC", "APIC", "APIC"];

const MPEGSyncWord = /\xFF[\xF0-\xFF][\x02-\xEF][\x00-\xFF]/;

const MPEGBitRate = [
    [0, 8, 16, 24, 32, 40, 48, 56, 64, 80, 96, 112, 128, 144, 160, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 8, 16, 24, 32, 40, 48, 56, 64, 80, 96, 112, 128, 144, 160, 0],
    [0, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, 0]
];

const MPEGSampleRate = [
    [11025, 12000, 8000, 0],
    [0, 0, 0, 0],
    [22050, 24000, 16000, 0],
    [44100, 48000, 32000, 0]
];

const MPEGChannels = [2, 2, 2, 1];

function ID3Process(playlist, replayGainProcessor) {
    this.replayGainProcessor = replayGainProcessor;
    this.playlist = playlist;
    this.concurrentParsers = 8;
    this.queue = [];
    this.queueProcessors = new Array(this.concurrentParsers);
    for (var i = 0; i < this.concurrentParsers; ++i) {
        this.queueProcessors[i] = null;
    }
    this.queueSet = new DS.Set();
    this.jobPollerId = -1;
    playlist.on("lengthChange", $.proxy(this.playlistLengthChanged, this));
}

function isNull(value) {
    return value === null;
}

ID3Process.prototype.checkEmpty = function() {
    if (this.queueProcessors.every(isNull)) {
        var tracks = this.playlist.getUnparsedTracks(this.concurrentParsers * 8);
        if (tracks.length) {
            this.placeQueue(tracks);
            return true;
        }
    }
    return false;
};

ID3Process.prototype.playlistLengthChanged = function(newLength, oldLength) {
    var self = this;
    if (newLength > oldLength && this.jobPollerId === -1) {
        this.jobPollerId = setTimeout(function jobPoller() {
            self.jobPollerId = setTimeout(jobPoller, 1);
            if (!self.checkEmpty()) {
                clearTimeout(self.jobPollerId);
                self.jobPollerId = -1;
            }
        }, 1);
    }
};

ID3Process.prototype.placeQueue = function(queue) {
    if (!BlobSlice || !queue.length) {
        return;
    }

    for (var i = 0; i < queue.length; ++i) {
        var track = queue[i];
        if (this.queueSet.contains(track)) {
            continue;
        }

        this.queueSet.add(track);
        this.queue.push(track);
    }

    this.queueProcessors.forEach(function(queueProcess, index) {
        var self = this;
        if (!queueProcess) {
            this.queueProcessors[index] = this.loadNext().reflect().then(function(result) {
                self.queueProcessors[index] = null;
                self.checkEmpty();
                if (result.isRejected()) {
                    throw result.reason();
                }
                return null;
            });
        }
    }, this);
};

ID3Process.prototype.getTimeFromXing = function(bytes, sampleRate) {
    var index = bytes.indexOf("Xing");
    index = index === -1 ? bytes.indexOf("Info") : index;

    if (index === -1) return null;

    if (util.int32BE(bytes, index + 4) & XING_FRAMES) {
        var frames = util.int32BE(bytes, index + 8);
        return ~~(1152 * frames / sampleRate);
    }
    return null;
};

ID3Process.prototype.getTimeFromVBRi = function(bytes, sampleRate) {
    var offset = bytes.indexOf("VBRI");
    if (offset < 0) {
        return null;
    }
    var frames = util.int32BE(bytes, offset + 14) >>> 0;
    return Math.floor(1152 * frames / sampleRate);
};

ID3Process.prototype.getTagSize = function(bytes, version, magicOffset) {
    if (magicOffset === undefined) magicOffset = 0;

    if (version < 3) {
        return util.int24BE(bytes, 3 + magicOffset) >>> 0;
    } else if (version === 3) {
        return util.int32BE(bytes, 4 + magicOffset) >>> 0;
    } else if (version > 3) {
        return util.synchInt32(bytes, 4 + magicOffset) >>> 0;
    }
    throw new Error("InvalidVersion");
};

ID3Process.prototype.loadNext = function() {
    var self = this;
    if (!this.queue.length) {
        return Promise.resolve(false);
    }
    var track = this.queue.shift();
    if (track.isDetachedFromPlaylist()) {
        this.queueSet.delete(track);
        return Promise.resolve(false);
    }

    return util.readAsBinaryString(BlobSlice.call(track.file, 0, 256))
        .then(function(bytes) {
            var format = track.getFormat(bytes);
            if (format === Track.MP3) {
                return self.parseMpegTagData(bytes, track);
            } else if (format === Track.WAV) {
                return self.parseWavTagData(bytes, track);
            } else if (format === Track.OGG) {
                return self.parseOggTagData(bytes, track);
            } else if (format === Track.AAC) {
                return new TagData(track);
            } else if (format === Track.WEBM) {
                return new TagData(track);
            } else {
                throw new AudioError();
            }
        })
        .then(function(result) {
            if (!result|| !result.basicInfo) {
                return new TagData(track, null, null, {
                    channels: 2,
                    sampleRate: 44100,
                    duration: NaN
                });
            }
            return result;
        })
        .then(function(tagData) {
            track.setTagData(tagData);
            if (tagData.shouldCalculateReplayGain()) {
                var id = track.getUid();

                tagDatabase.query(id).then(function(value) {
                    if (!value) {
                        track.setAnalysisStatus();
                        return self.replayGainProcessor.getReplayGainForTrack(track).finally(function() {
                            track.unsetAnalysisStatus();
                        });
                    } else {
                        tagData.setDataFromTagDatabase(value);
                        return null;
                    }
                }).then(function(value) {
                    if (value) {
                        value.title = tagData.title;
                        value.artist = tagData.artist;
                        value.album = tagData.album;
                        value.albumIndex = tagData.albumIndex;
                        tagData.setDataFromTagDatabase(value);
                        return tagDatabase.insert(id, value);
                    }
                }).catch(AudioError, function(e) {
                    self.playlist.removeTrack(track);
                }).catch(TrackWasRemovedError, function(e) {});
            }
            return tagData;
        })
        .catch(AudioError, FileError, function(e) {
            self.playlist.removeTrack(track);
        })
        .catch(function(e) {
            self.playlist.removeTrack(track);
            if (e instanceof Error) {
                throw e;
            }
        })
        .finally(function() {
            self.queueSet.delete(track);
            return self.loadNext();
        });
};

ID3Process.prototype.getPictures = function(bytes, version, offsetMap) {
    const magic = ID3Picture[version];
    var index = bytes.indexOf(magic);
    var ret = null;

    if (index !== -1) ret = [];

    while (index !== -1) {
        var size = this.getTagSize(bytes, version, index);
        var offset = index;

        if (version <= 2) {
            offset += 6;
            var encoding = bytes.charCodeAt(offset);
            var nullMagic = this.getNullTerminatorByEncoding(encoding);
            offset += 1;
            var type = "image/" + bytes.substr(offset, 3).toLowerCase();
            offset += 3;
            var pictureKind = bytes.charCodeAt(offset);
            offset += 1;
            var dataStart = bytes.indexOf(nullMagic, offset) + nullMagic.length;
            var descriptionLength = dataStart - nullMagic.length - offset;
            offset += (descriptionLength + nullMagic.length);
            var dataLength = size - (5 + nullMagic.length + descriptionLength);
            offset += dataLength;
            ret.push({
                start: this.translatePositiveOffset(index, offsetMap, dataStart - index),
                length: dataLength,
                type: type,
                id3version: "2.2"
            });
            index = offset;
        } else if (version === 3) {
            offset += 10;
            var encoding = bytes.charCodeAt(offset);
            var nullMagic = this.getNullTerminatorByEncoding(encoding);
            offset += 1;
            var type = bytes.slice(offset, bytes.indexOf("\x00", offset));
            if (!type) {
                return null;
            }
            var typeLength = type.length;
            type = type.toLowerCase();
            if (type.indexOf("/") === -1) {
                if (/jpg|jpeg|png/.test(type)) {
                    type = "image/" + type;
                } else {
                    return null;
                }
            }
            offset += (typeLength + 1);
            var pictureKind = bytes.charCodeAt(offset);
            offset += 1;
            var dataStart = bytes.indexOf(nullMagic, offset) + nullMagic.length;
            var descriptionLength = dataStart - nullMagic.length - offset;
            offset += (descriptionLength + nullMagic.length);
            var dataLength = size - (nullMagic.length - 3 - descriptionLength - typeLength);
            offset += dataLength;
            ret.push({
                start: this.translatePositiveOffset(index, offsetMap, dataStart - index),
                length: dataLength,
                type: type,
                id3version: "2.3"
            });
            index = offset;
        } else {
            offset += 8;
            var flags = this.parseId3v2Bits(bytes, offset);
            offset += 2;

            if (flags.hasDataLengthIndicator) {
                tagSize = util.synchInt32(bytes, offset);
                offset += 4;
            }

            var encoding = bytes.charCodeAt(offset);
            var nullMagic = this.getNullTerminatorByEncoding(encoding);
            offset += 1;
            var type = bytes.slice(offset, bytes.indexOf("\x00", offset));
            if (!type) {
                return null;
            }
            var typeLength = type.length;
            type = type.toLowerCase();
            if (type.indexOf("/") === -1) {
                if (/jpg|jpeg|png/.test(type)) {
                    type = "image/" + type;
                } else {
                    return null;
                }
            }
            offset += (typeLength + 1);
            var pictureKind = bytes.charCodeAt(offset);
            offset += 1;
            var dataStart = bytes.indexOf(nullMagic, offset) + nullMagic.length;
            var descriptionLength = dataStart - nullMagic.length - offset;
            offset += (descriptionLength + nullMagic.length);
            var dataLength = size - (nullMagic.length - 3 - descriptionLength - typeLength);

            if (flags.hasBeenUnsynchronized) {
                var unsynchIndex;
                while ((unsynchIndex = bytes.indexOf("\xff\x00", offset)) !== -1) {
                    if (unsynchIndex < dataStart + dataLength) {
                        bytes = bytes.slice(0, unsynchIndex) + bytes.slice(unsynchIndex + 1);
                        dataLength--;
                    } else {
                        break;
                    }
                }
            }

            offset += dataLength;
            ret.push({
                start: this.translatePositiveOffset(index, offsetMap, dataStart - index),
                length: dataLength,
                type: type,
                id3version: "2.4"
            });
            index = offset;
        }
        index = bytes.indexOf(magic, index);
    }

    return ret;
};

ID3Process.prototype.parseOggTagData = function(bytes, track) {
    var oggsIndex = bytes.indexOf("OggS");
    if (oggsIndex === -1) return null;
    var segmentDescriptors = bytes.charCodeAt(oggsIndex + 26);
    var totalSize = 0;
    var index = oggsIndex + 27;
    for (var i = 0; i < segmentDescriptors; ++i) {
        totalSize += bytes.charCodeAt(index);
        index++;
    }

    var self = this;
    return util.readAsBinaryString(BlobSlice.call(track.file, index, index + totalSize)).then(function(bytes) {
        if (bytes.indexOf("vorbis") === 1) {
            var basicInfo = self.getVorbisBasicInfo(bytes, track.file.size);
            return new TagData(track, null, null, basicInfo);
        } else {
            return new TagData(track);
        }
    });
};

ID3Process.prototype.parseWavTagData = function(bytes, track) {
    var riffIndex = bytes.indexOf("RIFF");
    var fmtIndex = bytes.indexOf("fmt ");
    if (riffIndex !== 0 || fmtIndex !== 12) {
        return new TagData(track);
    }
    var basicInfo = this.getWavBasicInfo(bytes);
    return new TagData(track, null, null, basicInfo);
};

ID3Process.prototype.parseMpegTagData = function(bytes, track) {
    var ID3v2Pos = bytes.indexOf("ID3");
    var fileSize = track.getFileSize();

    if (ID3v2Pos > -1) {
        var size = util.synchInt32(bytes, 6);
        var startStart = ID3v2Pos;
        var startEnd = ID3v2Pos + size + 1527;
        var endStart = fileSize - 200;
        var endEnd = fileSize;

        var self = this;
        return util.readAsBinaryString(new BlobConstructor([
            BlobSlice.call(track.file, startStart,  startEnd),
            BlobSlice.call(track.file, endStart, endEnd)
        ])).then(function(bytes) {
            return self.getID3v2(bytes, track, [
                [0, startEnd - startStart, startStart],
                [startEnd - startStart, (startEnd - startStart) + (endEnd - endStart), endStart]
            ]);
        });
    } else {
        var startStart = 0;
        var startEnd = 1527;
        var endStart = fileSize - 200;
        var endEnd = fileSize;

        var self = this;
        return util.readAsBinaryString(new BlobConstructor([
            BlobSlice.call(track.file, startStart,  startEnd),
            BlobSlice.call(track.file, endStart, endEnd)
        ])).then(function(bytes) {
            return self.getID3v1(bytes, track, [
                [0, startEnd - startStart, startStart],
                [startEnd - startStart, (startEnd - startStart) + (endEnd - endStart), endStart]
            ]);
        });
    }
};

ID3Process.prototype.getVorbisBasicInfo = function(bytes, fileSize) {
    var channels = bytes.charCodeAt(11);
    var rate = util.int32LE(bytes, 12) >>> 0;
    var bitrateUpper = util.int32LE(bytes, 16) >>> 0;
    var bitrateNominal = util.int32LE(bytes, 20) >>> 0;
    var bitrateLower = util.int32LE(bytes, 24) >>> 0;

    var duration = NaN
    if (bitrateNominal) {
        duration = Math.floor(fileSize * 8 / bitrateNominal);
    } else if (bitrateLower && bitrateUpper) {
        duration = Math.floor(fileSize * 8 / ((bitrateLower + bitrateUpper) / 2));
    }

    var sampleRate = util.int32LE(bytes, 12) >>> 0;

    return {
        channels: bytes.charCodeAt(11),
        sampleRate: sampleRate,
        duration: duration,
        encoderDelay: 4096 / sampleRate,
        encoderPadding: 0
    };
};

ID3Process.prototype.getWavBasicInfo = function(bytes) {
    var channels = util.int16LE(bytes, 22);
    var sampleRate = util.int32LE(bytes, 24);
    var byteRate = util.int32LE(bytes, 28);
    var chunkType = bytes.substr(36, 4);
    var duration = NaN;

    if (chunkType === "data") {
        var chunkSize = util.int32LE(bytes, 40) >>> 0;
        duration = chunkSize / byteRate;
    }

    return {
        duration: Math.floor(duration),
        sampleRate: sampleRate,
        channels: channels,
        encoderDelay: 0,
        encoderPadding: 0
    };
};

ID3Process.prototype.parseMpegBasicInfo = function(bytes, track) {
    var syncWord = bytes.match(MPEGSyncWord);

    if (syncWord) {
        var firstFrame = syncWord[0];
        var version2Bit = (firstFrame.charCodeAt(1) & 0x18) >> 3;
        var bitRate = MPEGBitRate[version2Bit][(
            firstFrame.charCodeAt(2) & 0xF0) >> 4];
        var sampleRate = MPEGSampleRate[version2Bit][(
            firstFrame.charCodeAt(2) & 0x0C) >> 2];

        var channels = MPEGChannels[util.bits(firstFrame.charCodeAt(3), 6, 2)];

        var fileSize = track.file.size;

        if (!bitRate || !channels || !sampleRate) return null;

        var duration = this.getTimeFromXing(bytes, sampleRate) ||
                       this.getTimeFromVBRi(bytes, sampleRate) ||
                       Math.round(fileSize / ((bitRate * 1000) / 8)) ||
                       0;

        return {
            duration: duration,
            sampleRate: sampleRate,
            channels: channels,
            encoderDelay: 2048 / sampleRate,
            encoderPadding: 1024 / sampleRate
        };
    }
    return null;
};

ID3Process.prototype.getMpegBasicInfo = Promise.method(function(bytes, offsetMap, track) {
    var start = offsetMap[0][1] - 1527;
    var end = offsetMap[0][1];
    var trialsLeft = 5;
    var self = this;

    return (function trial(bytes) {
        var basicInfo = self.parseMpegBasicInfo(bytes, track);
        if (basicInfo) {
            return basicInfo;
        }

        if (trialsLeft-- < 0) {
            throw new AudioError(MediaError.MEDIA_ERR_DECODE);
        }

        start = Math.min(offsetMap[0][2] + end, track.file.size - 1);
        end = Math.min(start + 1527 * 20, track.file.size);

        return util.readAsBinaryString(BlobSlice.call(track.file, start, end)).then(trial);
    })(bytes.slice(start, end));
});

ID3Process.prototype.getID3v1String = function(bytes, startPosition) {
    var string = bytes.substr(startPosition, 30);
    var nullPosition = string.indexOf("\u0000");
    if (nullPosition >= 0) {
        return string.slice(0, nullPosition);
    } else {
        return string;
    }
};

ID3Process.prototype.getNullTerminatorByEncoding = function(encoding) {
    switch (encoding) {
        case ID3Encoding.UNICODE:
        case ID3Encoding.UTF16BE:
            return "\x00\x00";
        default:
            return "\x00";
    }
};

ID3Process.prototype.decodeID3v2Text = function(text, encoding) {
    if (encoding === ID3Encoding.UNICODE) {
        return util.unicode.decodeUnicodeEncodedBinaryString(text);
    } else if (encoding === ID3Encoding.ISO88591) {
        return util.stripBinaryBom(text);
    } else if (encoding === ID3Encoding.UTF16BE) {
        return util.unicode.decodeUnicodeEncodedBinaryString(text, true);
    } else if (encoding === ID3Encoding.UTF8) {
        return util.unicode.decodeUtf8EncodedBinaryString(text);
    } else {
        return util.stripBinaryBom(text);;
    }
};

ID3Process.prototype.getID3v2String = function(bytes, tagIdentifier, version, offset) {
    if (offset === undefined) offset = 0;
    var position = bytes.indexOf(tagIdentifier, offset);
    if (position < 0) return null;
    var tagSize = this.getTagSize(bytes.substr(position, 10), version);

    var encoding, contents;
    if (version > 2) {
        var flags = this.parseId3v2Bits(bytes, position + 8);

        if (flags.hasDataLengthIndicator) {
            tagSize = util.synchInt32(bytes, position + 10);
            encoding = bytes.charCodeAt(position + 14);
            contents = bytes.substr(position + 15, tagSize - 1);
        } else {
            encoding = bytes.charCodeAt(position + 10);
            contents = bytes.substr(position + 11, tagSize - 1);
        }

        if (flags.hasBeenUnsynchronized) {
            while (contents.indexOf("\xff\x00") !== -1) {
                contents = contents.replace("\xff\x00", "\xff");
            }
        }
    } else {
        encoding = bytes.charCodeAt(position + 6);
        contents = bytes.substr(position + 7, tagSize - 1);
    }

    return this.decodeID3v2Text(contents, encoding);
};

ID3Process.prototype.getID3v1 = Promise.method(function(bytes, track, offsetMap) {
    var id3Bytes = bytes.slice(offsetMap[1][1] - 128);
    var tagPos = id3Bytes.indexOf("TAG");
    var title = null;
    var artist = null;
    var album = null;
    var trackIndex = -1;

    if (tagPos === 0) {
        title = this.getID3v1String(id3Bytes, tagPos + 3);
        artist = this.getID3v1String(id3Bytes, tagPos + 33);
        album = this.getID3v1String(id3Bytes, tagPos + 63);
        var trackIndexData = id3Bytes.substr(tagPos + 125, 2);
        trackIndex = -1;
        if (trackIndexData.charCodeAt(0) === 0) {
            trackIndex = trackIndexData.charCodeAt(1);
        }
    }

    return this.getMpegBasicInfo(bytes, offsetMap, track).then(function(basicInfo) {
        return new TagData(track, title, artist, basicInfo, album, trackIndex);
    });
});

ID3Process.prototype.getID3v2 = Promise.method(function(bytes, track, offsetMap) {
    var version = bytes.charCodeAt(3);
    var artist = this.getID3v2String(bytes, ID3Artist[version], version);
    var title = this.getID3v2String(bytes, ID3Title[version], version);
    var album = this.getID3v2String(bytes, ID3Album[version], version);
    var trackIndex = this.getID3v2String(bytes, ID3TrackIndex[version], version);
    var pictures = this.getPictures(bytes, version, offsetMap);
    var picture = null;

    if (pictures && pictures.length) {
        if (pictures.length === 1) {
            picture = pictures.first();
        } else {
            var maxSize = -Infinity;
            var maxSizePic = null;
            for (var i = 0; i < pictures.length; ++i) {
                var pic = pictures[i];

                if (pic.length > maxSize) {
                    maxSize = pic.length;
                    maxSizePic = pic;
                }
            }
            picture = maxSizePic;
        }
    }


    if (trackIndex) {
        var match = trackIndex.match(/\d+/);
        if (match) {
            trackIndex = parseInt(match, 10);
        } else {
            trackIndex = -1;
        }
    } else {
        trackIndex = -1;
    }

    return this.getMpegBasicInfo(bytes, offsetMap, track).then(function(basicInfo) {
        return new TagData(track, title, artist, basicInfo, album, trackIndex, picture);
    });
});

ID3Process.prototype.parseId3v2Bits = function(bytes, offset) {
    var bits = util.int16BE(bytes, offset);

    return {
        tagAlterPreservation: util.bit(bits, 14),
        fileAlterPreservation: util.bit(bits, 13),
        readOnly: util.bit(bits, 12),
        containsGroupInfo: util.bit(bits, 6),
        isCompressed: util.bit(bits, 3),
        isEncrypted: util.bit(bits, 2),
        hasBeenUnsynchronized: util.bit(bits, 1),
        hasDataLengthIndicator: util.bit(bits, 0)
    };
};

ID3Process.prototype.parseApeBits = function(bytes, offset) {
    var bits = util.int32LE(bytes, offset);
    var containsHeader = util.bit(bits, 31);
    var containsFooter = util.bit(bits, 30);
    var isHeader = util.bit(bits, 29);
    var isFooter = !isHeader;
    var dataType = util.bits(bits, 1, 2);
    var readOnly = util.bit(bits, 0);

    return {
        isHeader: isHeader,
        isFooter: isFooter,
        dataType: dataType,
        containsFooter: containsFooter,
        containsHeader: containsHeader,
        readOnly: readOnly
    };
};

ID3Process.prototype.parseApe = function(bytes, offset, track, offsetMap) {
    var version = util.int32LE(bytes, offset + 8);

    if (version !== 2000) {
        return Promise.resolve({});
    }

    var tagSize = util.int32LE(bytes, offset + 12);
    var itemCount = util.int32LE(bytes, offset + 16);
    var flags = this.parseApeBits(bytes, offset + 20);
    var start, end;

    if (flags.isHeader) {
        var start = this.translatePositiveOffset(offset, offsetMap, 32);
        var end = this.translatePositiveOffset(offset, offsetMap, 32 + tagSize);
    } else {
        var start = this.translateNegativeOffset(offset, offsetMap, tagSize - 32);
        var end = this.translateNegativeOffset(offset, offsetMap, 0);
    }
    apeHeader = BlobSlice.call(track.file, start, end);

    var self = this;
    return util.readAsBinaryString(apeHeader).then(function(bytes) {
        var offset = 0;
        var ret = Object.create(null);
        for (var i = 0; i < itemCount; ++i) {
            var valueLen = util.int32LE(bytes, offset);
            offset += 8;
            var nullIndex = bytes.indexOf("\x00", offset);
            var key = bytes.slice(offset, nullIndex);
            offset = nullIndex + 1;
            var value = bytes.substr(offset, valueLen);
            offset += valueLen;
            ret[key.toLowerCase()] = value;
        }
        return ret;
    });
};

ID3Process.prototype.translatePositiveOffset = function(offset, offsetMap, plus) {
    var startFileMap = offsetMap[0];
    var endFileMap = offsetMap[1];

    if (offset >= startFileMap[0] && offset < startFileMap[1]) {
        return startFileMap[2] + offset + plus;
    } else if (offset >= endFileMap[0] && offset < endFileMap[1]) {
        return endFileMap[2] + (offset - (startFileMap[1] - startFileMap[0])) + plus;
    } else {
        throw new Error("offset " + offset + " is not described by the given offsetMap");
    }
};

ID3Process.prototype.translateNegativeOffset = function(offset, offsetMap, minus) {
    if (minus === undefined) minus = 0;
    var startFileMap = offsetMap[0];
    var endFileMap = offsetMap[1];

    if (offset >= startFileMap[0] && offset < startFileMap[1]) {
        return startFileMap[2] + offset - minus;
    } else if (offset >= endFileMap[0] && offset < endFileMap[1]) {
        return endFileMap[2] + (offset - (startFileMap[1] - startFileMap[0])) - minus;
    } else {
        throw new Error("offset " + offset + " is not described by the given offsetMap");
    }
};

return ID3Process;})();

;
;
const Player = (function () {"use strict";

const audioCtx = (function() {
    var AudioContext = window.AudioContext || window.webkitAudioContext;
    return new AudioContext();
})();

const mediaElementPool = (function() {
    $(document).one("click.poolpriming touchstart.poolpriming", function() {
        $(document).off(".poolpriming");
        pool.forEach(function(element) {
            element.volume = 0;
            element.play();
        });
    });

    const pool = [
        document.createElement("audio"),
        document.createElement("audio"),
        document.createElement("audio"),
        document.createElement("audio"),
        document.createElement("audio"),
        document.createElement("audio")
    ];

    var id = 1;

    return {
        alloc: function() {
            var element = pool.shift();
            element.currentTime = 0;
            element.volume = 0;
            element.src = "";
            element.pause();
            if (!element.id) element.id = id++;
            return element;
        },

        free: function(element) {
            element.currentTime = 0;
            element.volume = 0;
            element.muted = true;
            element.src = "";
            element.load();
            element.pause();
            pool.push(element);
        }
    };
})();

const getMediaElementSourceFor = function(mediaElement) {
    var src = $(mediaElement).data("media-element-source");

    if (!src) {
        src = audioCtx.createMediaElementSource(mediaElement);
        $(mediaElement).data("media-element-source", src);
    }
    return src;
};

const PAUSE_RESUME_FADE_TIME = 0.37;
const RESUME_FADE_CURVE = new Float32Array([0, 1]);
const PAUSE_FADE_CURVE = new Float32Array([1, 0]);

// Supports deletion mid-iteration.
function forEachAudioManager(fn) {
    var currentLength = audioManagers.length;
    for (var i = 0; i < audioManagers.length; ++i) {
        fn(audioManagers[i], i, audioManagers);
        // Deleted from the array.
        if (currentLength > audioManagers.length) {
            i -= (currentLength - audioManagers.length);
            currentLength = audioManagers.length;
        }
    }
}

function destroyAudioManagers() {
    var ams = [];
    forEachAudioManager(function(am, index, audioManagers) {
        am.pause();
        ams.push(am)
        audioManagers.splice(index, 1);
    });
    Promise.map(ams, function(am) {
        if (!am.pauseResumeFadePromise) {
            if (am.destroyed) return;
            if (am.started) {
                am.pause();
            } else {
                am.destroy();
                return;
            }
        }
        return am.pauseResumeFadePromise.finally(function() {
            am.destroy();
        });
    });
}

const audioManagers = [];
function AudioManager(player, track, implicitlyLoaded) {
    audioManagers.push(this);
    var tagData = track.getTagData();
    var sampleRate = track.getBasicInfo().sampleRate;
    this.implicitlyLoaded = implicitlyLoaded;
    this.player = player;
    this.destroyed = false;
    this.started = false;
    this.track = track;

    var preloadedMediaElement = player.flushPreloadedMediaElementFor(track);
    if (preloadedMediaElement) {
        var mediaData = preloadedMediaElement.release();
        this.url = mediaData.url;
        this.mediaElement = mediaData.element;
        this.image = mediaData.image;
        this.mediaElementRequiresLoading = false;
    } else {
        this.url = URL.createObjectURL(track.getFile());
        this.mediaElement = mediaElementPool.alloc();
        this.mediaElementRequiresLoading = true;
        this.image = track.getImage();
    }

    this.mediaElement.autoplay = false;
    this.mediaElement.controls = false;
    this.mediaElement.loop = false;
    this.mediaElement.volume = 1;
    this.mediaElement.muted = false;
    this.mediaElement.preload = "none";
    this.setCurrentTime(0);
    this.mediaElement.pause();

    this.source = getMediaElementSourceFor(this.mediaElement);
    this.visualizer = new AudioVisualizer(audioCtx, {
        fps: 48,
        bins: Player.visualizerBins(),
        baseSmoothingConstant: 0.00007,
        maxFrequency: 12500,
        minFrequency: 20
    });
    this.pauseResumeFadeGain = audioCtx.createGain();
    this.replayGain = audioCtx.createGain();
    this.preampGain = audioCtx.createGain();
    this.volumeGain = audioCtx.createGain();
    this.muteGain = audioCtx.createGain();
    this.fadeInGain = audioCtx.createGain();
    this.fadeOutGain = audioCtx.createGain();
    this.filterNodes = [];

    this.pauseResumeFadeGain.gain.value = 1;
    this.pauseResumeFadePromise = null;
    this.muteGain.gain.value = player.isMuted() ? 0 : 1;
    this.preampGain.gain.value = 1;
    this.volumeGain.gain.value = player.getVolume();

    var replayGain = equalizer.decibelChangeToAmplitudeRatio(
        track.getTrackGain() || track.getAlbumGain() || -6);

    if (track.getTrackPeak() * replayGain > 1) {
        replayGain = (1 / track.getTrackPeak()) * replayGain;
    }

    this.replayGain.gain.value = replayGain;

    this.source.connect(this.pauseResumeFadeGain);
    this.pauseResumeFadeGain.connect(this.replayGain);
    this.replayGain.connect(this.preampGain);
    this.connectEqualizerFilters(equalizer.getBands(this.track));
    this.visualizer.connect(this.volumeGain);
    this.volumeGain.connect(this.muteGain);
    this.muteGain.connect(this.fadeInGain);
    this.fadeInGain.connect(this.fadeOutGain)
    this.fadeOutGain.connect(audioCtx.destination);
    this.timeUpdated = this.timeUpdated.bind(this);
    this.ended = this.ended.bind(this);
    this.errored = this.errored.bind(this);
    this.durationChanged = this.durationChanged.bind(this);
    this.equalizerChanged = this.equalizerChanged.bind(this);
    this.crossFadingChanged = this.crossFadingChanged.bind(this);
    this.nextTrackChanged = this.nextTrackChanged.bind(this);

    equalizer.on("equalizerChange", this.equalizerChanged);
    crossfading.on("crossFadingChange", this.crossFadingChanged);
    player.playlist.on("nextTrackChange", this.nextTrackChanged);
}

AudioManager.prototype.nextTrackChanged = function() {
    if (this.destroyed) return;
    this.updateSchedules();
};

AudioManager.prototype.getImage = function() {
    return this.image;
};

AudioManager.prototype.equalizerChanged = function() {
    if (this.destroyed) return;
    this.connectEqualizerFilters(equalizer.getBands(this.track));
};

AudioManager.prototype.crossFadingChanged = function() {
    if (this.destroyed) return;
    this.updateSchedules();
};

AudioManager.prototype.connectEqualizerFilters = function(bands) {
    if (this.destroyed) return;
    var a = Date.now();
    var preampGain = 1;
    var bandsFrequencySorted = Object.keys(bands).map(function(key) {
        if (!isFinite(+key)) return null;
        return {
            frequency: +key,
            gain: bands[key]
        };
    }).filter(Boolean).sort(function(a, b) {
        return a.frequency - b.frequency;
    });

    if (typeof bands.preamp === "number") {
        preampGain = equalizer.decibelChangeToAmplitudeRatio(bands.preamp);
    } else {
        var maxIncrease = bandsFrequencySorted.reduce(function(max, current) {
            return Math.max(current.gain, max);
        }, -Infinity);

        if (maxIncrease > 0) {
            preampGain = equalizer.decibelChangeToAmplitudeRatio(-0.75 * maxIncrease);
        }
    }

    this.filterNodes.forEach(function(node) {
        node.disconnect();
    });

    var someBandHasGainOrAttenuation = bandsFrequencySorted.some(function(v) {
        return +v.gain !== 0;
    });

    if (someBandHasGainOrAttenuation) {
        var firstBand = bandsFrequencySorted.shift();
        var firstFilterNode = audioCtx.createBiquadFilter();
        firstFilterNode.type = "lowshelf";
        firstFilterNode.Q.value = 1;
        firstFilterNode.frequency.value = firstBand.frequency;
        firstFilterNode.gain.value = firstBand.gain;

        var lastBand = bandsFrequencySorted.pop();
        var lastFilterNode = audioCtx.createBiquadFilter();
        lastFilterNode.type = "highshelf";
        lastFilterNode.Q.value = 1;
        lastFilterNode.frequency.value = lastBand.frequency;
        lastFilterNode.gain.value = lastBand.gain;

        this.filterNodes = [firstFilterNode].concat(bandsFrequencySorted.map(function(band) {
            var filterNode = audioCtx.createBiquadFilter();
            filterNode.type = "peaking";
            filterNode.Q.value = 1;
            filterNode.frequency.value = band.frequency;
            filterNode.gain.value = band.gain;
            return filterNode;
        }), lastFilterNode);

        this.preampGain.gain.value = preampGain;

        var lastFilter = this.filterNodes.reduce(function(prev, curr) {
            prev.connect(curr);
            return curr;
        }, this.preampGain);

        lastFilter.connect(this.visualizer.getAudioNode());
    } else {
        this.preampGain.gain.value = 1;
        this.preampGain.connect(this.visualizer.getAudioNode());
    }
};

AudioManager.prototype.setCurrentTime = function(currentTime) {
    if (this.destroyed) return;
    this.mediaElement.currentTime = this.track.convertFromSilenceAdjustedTime(currentTime);
};

AudioManager.prototype.getCurrentTime = function() {
    if (this.destroyed) return 0;
    return this.track.convertToSilenceAdjustedTime(this.mediaElement.currentTime);
};

AudioManager.prototype.getDuration = function() {
    if (this.destroyed) return 0;
    return this.track.getSilenceAdjustedDuration(this.mediaElement.duration);
};

AudioManager.prototype.durationChanged = function() {
    if (this.destroyed) return;
    this.updateSchedules(!this.implicitlyLoaded);
};

AudioManager.prototype.errored = function() {
    if (this.destroyed) return;
    this.player.audioManagerErrored(this);
};

AudioManager.prototype.ended = function() {
    if (this.destroyed) return;
    this.player.audioManagerEnded(this);
};

AudioManager.prototype.timeUpdated = function() {
    if (this.destroyed) return;
    this.player.audioManagerProgressed(this);
};

AudioManager.prototype.pause = function() {
    if (this.destroyed || !this.started) return;
    var now = audioCtx.currentTime;
    this.cancelPauseResumeFade();
    this.pauseResumeFadeGain.gain.cancelScheduledValues(0);
    this.pauseResumeFadeGain.gain.setValueCurveAtTime(
        PAUSE_FADE_CURVE, now, PAUSE_RESUME_FADE_TIME);
    var self = this;
    this.pauseResumeFadePromise = Promise.delay(PAUSE_RESUME_FADE_TIME * 1000).then(function() {
        if (self.destroyed) return;
        self.mediaElement.pause();
        self.visualizer.pause();
    }).finally(function() {
        self.pauseResumeFadePromise  = null;
    });
};

AudioManager.prototype.resume = function() {
    if (this.destroyed || !this.started) return;
    var now = audioCtx.currentTime;
    this.cancelPauseResumeFade();
    this.mediaElement.play();
    this.visualizer.resume();
    this.pauseResumeFadeGain.gain.cancelScheduledValues(0);
    this.pauseResumeFadeGain.gain.setValueCurveAtTime(
        RESUME_FADE_CURVE, now, PAUSE_RESUME_FADE_TIME);
};

AudioManager.prototype.start = function() {
    if (this.destroyed || this.started) return;
    this.started = true;

    this.mediaElement.addEventListener("timeupdate", this.timeUpdated, false);
    this.mediaElement.addEventListener("ended", this.ended, false);
    this.mediaElement.addEventListener("error", this.errored, false);
    this.mediaElement.addEventListener("durationchange", this.durationChanged, false);

    if (this.mediaElementRequiresLoading) {
        this.mediaElement.src = this.url;
        this.mediaElement.load();
    }
    this.mediaElement.play();
};

AudioManager.prototype.mute = function() {
    if (this.destroyed) return;
    var now = audioCtx.currentTime;
    this.muteGain.gain.cancelScheduledValues(0);
    this.muteGain.gain.setValueCurveAtTime(PAUSE_FADE_CURVE, now, PAUSE_RESUME_FADE_TIME);
};

AudioManager.prototype.unmute = function() {
    if (this.destroyed) return;
    var now = audioCtx.currentTime;
    this.muteGain.gain.cancelScheduledValues(0);
    this.muteGain.gain.setValueCurveAtTime(RESUME_FADE_CURVE, now, PAUSE_RESUME_FADE_TIME);
};

AudioManager.prototype.seek = function(time) {
    if (this.destroyed || !this.started) return;
    this.setCurrentTime(time);
};

AudioManager.prototype.updateVolume = function(volume) {
    if (this.destroyed) return;
    this.volumeGain.gain.value = volume;
};

AudioManager.prototype.updateSchedules = function(forceReset) {
    if (this.destroyed) return;
    var now = audioCtx.currentTime;
    var trackPosition = this.getCurrentTime();
    var trackLength = this.getDuration();
    this.fadeInGain.gain.cancelScheduledValues(0);
    this.fadeOutGain.gain.cancelScheduledValues(0);
    this.fadeInGain.gain.value = 1;
    this.fadeOutGain.gain.value = 1;

    var crossFadePreferences = crossfading.getPreferences();
    var fadeInTime = crossFadePreferences.getInTime();
    var fadeOutTime = crossFadePreferences.getOutTime();
    var fadeInEnabled = crossFadePreferences.getInEnabled();
    var fadeOutEnabled = crossFadePreferences.getOutEnabled();
    var fadeInSamples = crossFadePreferences.getInCurveSamples();
    var fadeOutSamples = crossFadePreferences.getOutCurveSamples();

    if (!crossFadePreferences.getShouldAlbumCrossFade()) {
        if (this.track.comesAfterInSameAlbum(this.player.playlist.getPreviousTrack())) {
            fadeInEnabled = false;
        }

        if (this.track.comesBeforeInSameAlbum(this.player.playlist.getNextTrack())) {
            fadeOutEnabled = false;
        }
    }

    if (fadeInEnabled && this.implicitlyLoaded && !forceReset) {
        var audioCtxTime = now - trackPosition;
        if (audioCtxTime > 0) {
            this.fadeInGain.gain.setValueCurveAtTime(
                fadeInSamples, audioCtxTime, fadeInTime);
        }
    }

    if (fadeOutEnabled) {
        var trackPositionForFadeOut = trackLength - fadeOutTime;
        var secondsUntilFadeOut = trackPositionForFadeOut - trackPosition;
        var audioCtxTime = Math.max(0, now + secondsUntilFadeOut);

        this.fadeOutGain.gain.setValueCurveAtTime(
            fadeOutSamples, audioCtxTime, fadeOutTime);
    }

};

AudioManager.prototype.cancelPauseResumeFade = function() {
    if (this.pauseResumeFadePromise) {
        this.pauseResumeFadePromise.cancel();
        this.pauseResumeFadePromise = null;
    }
};

AudioManager.prototype.getVisualizer = function() {
    if (this.destroyed || !this.started) return null;
    return this.visualizer;
};

AudioManager.prototype.destroy = function() {
    if (this.destroyed) return;
    this.image = null;
    equalizer.removeListener("equalizerChange", this.equalizerChanged);
    crossfading.removeListener("crossFadingChange", this.crossFadingChanged);
    this.player.playlist.removeListener("nextTrackChange", this.nextTrackChanged);
    URL.revokeObjectURL(this.url);
    this.url = null;
    this.filterNodes.forEach(function(node) {
        node.disconnect();
    });
    this.pauseResumeFadeGain.disconnect();
    this.muteGain.disconnect();
    this.preampGain.disconnect();
    this.volumeGain.disconnect();
    this.fadeInGain.disconnect();
    this.fadeOutGain.disconnect();
    this.source.disconnect();
    this.visualizer.destroy();
    this.mediaElement.removeEventListener("timeupdate", this.timeUpdated, false);
    this.mediaElement.removeEventListener("ended", this.ended, false);
    this.mediaElement.removeEventListener("error", this.errored, false);
    this.mediaElement.removeEventListener("durationchange", this.durationChanged, false);
    mediaElementPool.free(this.mediaElement);
    this.mediaElement = null;
    this.player = null;
    this.fadeInGain = null;
    this.fadeOutGain = null;
    this.source = null;
    this.visualizer = null;
    this.preampGain = null;
    this.volumeGain = null;
    this.muteGain = null;
    this.pauseResumeFadeGain = null;
    this.filterNodes = [];
    this.track = null;
    this.destroyed = true;
    var index = audioManagers.indexOf(this);
    if (index >= 0) {
        audioManagers.splice(index, 1);
    }
};

const VOLUME_KEY = "volume";
const MUTED_KEY = "muted";

function Player(dom, playlist, opts) {
    EventEmitter.call(this);
    opts = Object(opts);
    this._domNode = $(dom);

    this._playButtonDomNode = this.$().find(opts.playButtonDom);
    this._pauseButtonDomNode = this.$().find(opts.pauseButtonDom);
    this._previousButtonDomNode = this.$().find(opts.previousButtonDom);
    this._stopButtonDomNode = this.$().find(opts.stopButtonDom);
    this._nextButtonDomNode = this.$().find(opts.nextButtonDom);

    this.currentAudioManager = null;
    this.volume = 0.15;
    this.isStopped = true;
    this.isPaused = false;
    this.isPlaying = false;
    this.isMutedValue = false;
    this.implicitLoading = false;
    this.playlist = playlist;
    this.queuedNextTrackImplicitly = false;
    this._preloadedTracks = [];

    this.visualizerData = this.visualizerData.bind(this);
    this.nextTrackChanged = this.nextTrackChanged.bind(this);


    this.$play().click(this.play.bind(this));
    this.$pause().click(this.pause.bind(this));
    this.$stop().click(this.stop.bind(this));
    this.$next().click(playlist.next.bind(playlist));
    this.$previous().click(playlist.prev.bind(playlist));

    this._playTooltip = PanelControls.makeTooltip(this.$play(), "Resume playback");
    this._pauseTooltip = PanelControls.makeTooltip(this.$pause(), "Pause playback");
    this._stopTooltip = PanelControls.makeTooltip(this.$stop(), "Stop playback");
    this._nextTooltip = PanelControls.makeTooltip(this.$next(), "Next track");
    this._previousTooltip = PanelControls.makeTooltip(this.$previous(), "Previous track");

    playlist.on("loadNeed", this.loadTrack.bind(this));
    playlist.on("playlistEmpty", this.stop.bind(this));
    playlist.on("nextTrackChange", this.nextTrackChanged);
    playlist.on("historyChange", this.historyChanged.bind(this));

    var self = this;
    keyValueDatabase.getInitialValues().then(function(values) {
        if (VOLUME_KEY in values) self.setVolume(values.volume);
        if (MUTED_KEY in values && values.muted) self.toggleMute();
    });
}
util.inherits(Player, EventEmitter);

Player.prototype.$allButtons = function() {
    return this.$play().add(this.$pause())
                      .add(this.$previous())
                      .add(this.$stop())
                      .add(this.$next());
};

Player.prototype.$ = function() {
    return this._domNode;
};

Player.prototype.$play = function() {
    return this._playButtonDomNode;
}

Player.prototype.$pause = function() {
    return this._pauseButtonDomNode;
}

Player.prototype.$previous = function() {
    return this._previousButtonDomNode;
}

Player.prototype.$stop = function() {
    return this._stopButtonDomNode;
}

Player.prototype.$next = function() {
    return this._nextButtonDomNode;
}

Player.prototype.visualizerData = function(data) {
    this.emit("visualizerData", data);
};

Player.prototype.historyChanged = function() {
    if (this.playlist.hasHistory()) {
        this.$previous().removeClass("disabled");
    } else {
        this.$previous().addClass("disabled");
    }
};

Player.prototype.nextTrackChanged = function() {
    var track = this.playlist.getNextTrack();
    this.$pause().addClass("disabled");
    if (!track) {
        this.$play().addClass("disabled");
        this.$next().addClass("disabled");
        this.$previous().addClass("disabled");
        return;
    }
    this.$play().removeClass("disabled");
    if (this.playlist.getCurrentTrack()) {
        this.$pause().removeClass("disabled");
    }

    this.$next().removeClass("disabled");

    if (this.playlist.hasHistory()) {
        this.$previous().removeClass("disabled");
    }

    for (var i = 0; i < this._preloadedTracks.length; ++i) {
        if (this._preloadedTracks[i].isForTrack(track)) return;
    }

    var preloadedTrack = new PreloadedMediaElement(track);
    preloadedTrack.startPreload();
    this._preloadedTracks.push(preloadedTrack);

    while (this._preloadedTracks.length > 2) {
        this._preloadedTracks.shift().destroy();
    }
};

Player.prototype.flushPreloadedMediaElementFor = function(track) {
    var ret = null;
    for (var i = 0; i < this._preloadedTracks.length; ++i) {
        if (this._preloadedTracks[i].isForTrack(track)) {
            ret = this._preloadedTracks[i];
            this._preloadedTracks.splice(i, 1);
            break;
        }
    }
    return ret;
};

Player.prototype.nextTrackImplicitly = function() {
    if (this.isPaused) {
        if (this.queuedNextTrackImplicitly) return;
        this.queuedNextTrackImplicitly = true;
        var playId = this.playlist.getCurrentPlayId();
        var self = this;
        // Queue the next track load when the player resumes.
        this.once("trackPlaying", function() {
            this.queuedNextTrackImplicitly = false;
            // If it was exactly the same track playthrough that was resumed.
            if (!self.isPaused && self.playlist.getCurrentPlayId() === playId) {
                self.nextTrackImplicitly();
            }
        });
        return;
    }

    this.implicitLoading = true;
    if (!this.playlist.next()) {
        this.implicitLoading = false;
    }
};

Player.prototype.audioManagerErrored = function(audioManager) {
    if (audioManager === this.currentAudioManager) {
        this.emit("error", this.playlist.getCurrentTrack());
        this.playlist.removeTrack(this.playlist.getCurrentTrack());
        this.nextTrackImplicitly();
    }
    audioManager.destroy();
};

Player.prototype.audioManagerEnded = function(audioManager) {
    if (audioManager === this.currentAudioManager) {
        this.playlist.trackPlayedSuccessfully();
        this.nextTrackImplicitly();
    }
    audioManager.destroy();
};

Player.prototype.getProgress = function() {
    if (!this.currentAudioManager) return -1;
    var duration = this.currentAudioManager.getDuration();
    if (!duration) return -1;
    var currentTime = this.currentAudioManager.getCurrentTime();
    return Math.round((currentTime / duration) * 100) / 100;
};

Player.prototype.setProgress = function(p) {
    if (!this.currentAudioManager) return;
    p = Math.min(Math.max(p, 0), 1);
    var duration = this.currentAudioManager.getDuration();
    if (!duration) return;
    return this.seek(p * duration);
};

Player.prototype.getFadeInTimeForNextTrack = function() {
    var preferences = crossfading.getPreferences();
    var fadeInTime = preferences.getInTime();
    if (fadeInTime <= 0) return 0;

    var audioManager = this.currentAudioManager;

    if (!audioManager) return 0;

    if (!preferences.getShouldAlbumCrossFade() &&
        audioManager.track.isFromSameAlbumAs(this.playlist.getNextTrack())) {
        return 0;
    }

    return fadeInTime;
};

Player.prototype.audioManagerProgressed= function(audioManager) {
    if (audioManager === this.currentAudioManager) {
        var currentTime = audioManager.getCurrentTime();
        var totalTime = audioManager.getDuration();
        var fadeInTime = this.getFadeInTimeForNextTrack();

        this.emit("progress", currentTime, totalTime);

        if ((currentTime >= totalTime && totalTime > 0 && currentTime > 0) ||
            (fadeInTime > 0 && totalTime > 0 && currentTime > 0 && (totalTime - currentTime > 0) &&
            (totalTime - currentTime <= fadeInTime))) {
            this.playlist.trackPlayedSuccessfully();
            this.nextTrackImplicitly();
        }
    }
};

Player.prototype.getSampleRate = function() {
    var track = this.playlist.getCurrentTrack();
    if (!track) return 44100;
    var tagData = track.getTagData();
    if (!tagData) return 44100;
    return tagData.basicInfo.sampleRate;
};

Player.prototype.getImage= function() {
    if (this.currentAudioManager) {
        return this.currentAudioManager.getImage();
    }
    return null;
};

Player.prototype.pause = function() {
    if (!this.isPlaying) return this;
    this.isPaused = true;
    this.isStopped = false;
    this.isPlaying = false;
    forEachAudioManager(function(am) {
        am.pause();
    });
    this.pausedPlay();
};

Player.prototype.resume = function() {
    if (this.isPaused) {
        this.emit("trackPlaying");
        this.play();
    }
};

Player.prototype.play = function() {
    if (this.isPlaying) return this;

    if (!this.playlist._currentTrack) {
        this.playlist.playFirst();
        return this;
    }

    this.emit("trackPlaying");
    this.isPaused = false;
    this.isStopped = false;
    this.isPlaying = true;
    forEachAudioManager(function(am) {
        am.updateSchedules();
        am.resume();
    });
    this.startedPlay();
};

Player.prototype.stop = function() {
    if (this.isStopped) return this;
    this.isStopped = true;
    this.isPaused = false;
    this.isPlaying = false;
    this.currentAudioManager = null;
    destroyAudioManagers();
    this.playlist.stop();
    this.emit("progress", 0, 0);
    this.stoppedPlay();
};

Player.prototype.loadTrack = function(track) {
    this.emit("progress", 0, 0);

    this.isStopped = false;
    this.isPlaying = true;
    this.isPaused = false;

    var implicit = this.implicitLoading;
    if (this.implicitLoading) {
        this.implicitLoading = false;
    } else {
        destroyAudioManagers();
    }

    if (this.currentAudioManager) {
        var visualizer = this.currentAudioManager.getVisualizer();
        if (visualizer) {
            visualizer.removeListener("data", this.visualizerData);
        }
    }
    this.currentAudioManager = new AudioManager(this, track, implicit);
    this.currentAudioManager.visualizer.on("data", this.visualizerData);
    this.startedPlay();
    this.emit("trackPlaying");
    this.emit("newTrackLoad");
    this.currentAudioManager.start();
};

Player.prototype.startedPlay = function() {
    this.$allButtons().removeClass("active");
    this.$play().addClass("active");
    this.$pause().removeClass("disabled");
    this.emit("play");
};

Player.prototype.stoppedPlay = function() {
    this.$allButtons().removeClass("active");
    this.$stop().addClass("active");
    this.$pause().addClass("disabled");
    this.emit("stop");
};

Player.prototype.pausedPlay = function() {
    this.$allButtons().removeClass("active");
    this.$pause().addClass("active");
    this.emit("pause");
};

Player.prototype.seek = function(seconds) {
    if (!this.isPlaying && !this.isPaused) return this;
    if (!this.currentAudioManager || this.currentAudioManager.destroyed) return;
    var cutOff = Math.max(0.5, this.getFadeInTimeForNextTrack());
    var maxSeek = this.currentAudioManager.getDuration() - cutOff;
    if (!isFinite(maxSeek)) return;
    seconds = Math.max(0, Math.min(seconds, maxSeek));
    this.currentAudioManager.seek(seconds);
    this.currentAudioManager.updateSchedules(true);
};

Player.prototype.isMuted = function() {
    return this.isMutedValue;
};

Player.prototype.toggleMute = function() {
    this.isMutedValue = !this.isMutedValue;
    if (this.isMutedValue) {
        this.emit("muted", true);
        forEachAudioManager(function(am) {
            am.mute();
        });
        keyValueDatabase.set(MUTED_KEY, true);
    } else {
        this.emit("muted", false);
        forEachAudioManager(function(am) {
            am.unmute();
        });
        keyValueDatabase.set(MUTED_KEY, false);
    }
};

Player.prototype.getDuration = function() {
    if (!this.currentAudioManager)
            throw new Error("cannot get duration no audioManager");
    return this.currentAudioManager.getDuration();
};

Player.prototype.getProbableDuration = function() {
    if (!this.currentAudioManager)
            throw new Error("cannot get duration no audioManager");
    var ret = this.currentAudioManager.getDuration();
    if (ret) return ret;
    var track = this.playlist.getCurrentTrack();
    if (track.tagData && track.tagData.basicInfo) {
        return track.getSilenceAdjustedDuration(track.tagData.basicInfo.duration || 0);
    }
};

Player.prototype.getVolume = function() {
    return this.volume;
};

Player.prototype.setVolume = function(val) {
    val = Math.min(Math.max(0, val), 1);
    var volume = this.volume = val;
    forEachAudioManager(function(am) {
        am.updateVolume(volume);
    });
    this.emit("volumeChange");
    keyValueDatabase.set(VOLUME_KEY, volume);
    return this;
};

Player.prototype.getAnalyzer = function() {
    if (!this.isPlaying || !this.currentAudioManager) return null;
    return this.currentAudioManager.getAnalyzer();
};

var visualizerBins = 3;
Player.visualizerBins = function(value) {
    if (value !== undefined) {
        visualizerBins = value;
    } else {
        return visualizerBins;
    }
};


function PreloadedMediaElement(track) {
    var tagData = track.getTagData();
    this.error = false;
    this.url = URL.createObjectURL(track.getFile());
    this.mediaElement =  mediaElementPool.alloc();

    this.mediaElement.autoplay = false;
    this.mediaElement.controls = false;
    this.mediaElement.loop = false;
    this.mediaElement.volume = 0;
    this.mediaElement.muted = true;
    this.mediaElement.preload = "none";

    this.track = track;
    this.timeUpdated = this.timeUpdated.bind(this);
    this.errored = this.errored.bind(this);
    this.tagDateUpated = this.tagDateUpated.bind(this);

    this.image = track.getImage();

    if (!tagData || !tagData.hasPicture()) {
        this.track.once("tagDataUpdate", this.tagDateUpated);
    }
}

PreloadedMediaElement.prototype.tagDateUpated = function() {
    this.image = this.track.getImage();
};

PreloadedMediaElement.prototype.errored = function() {
    this.error = true;
};

PreloadedMediaElement.prototype.removeListeners = function() {
    this.mediaElement.removeEventListener("timeupdate", this.timeUpdated, false);
    this.mediaElement.removeEventListener("error", this.errored, false);
    this.track.removeListener("tagDataUpdate", this.tagDateUpated);
};

PreloadedMediaElement.prototype.timeUpdated = function() {
    if (this.url && this.mediaElement) {
        var time = this.track.convertToSilenceAdjustedTime(this.mediaElement.currentTime);
        if (time > 1) {
            this.mediaElement.pause();
            this.mediaElement.currentTime = 0;
        }
    }
};

PreloadedMediaElement.prototype.startPreload = function() {
    if (this.url && this.mediaElement) {
        this.mediaElement.addEventListener("timeupdate", this.timeUpdated, false);
        this.mediaElement.addEventListener("error", this.errored, false);
        this.mediaElement.src = this.url;
        this.mediaElement.load();
        this.mediaElement.play();
    } else {
        throw new Error("already released");
    }
};

PreloadedMediaElement.prototype.destroy = function() {
    if (this.url && this.mediaElement) {
        this.removeListeners();
        mediaElementPool.free(this.mediaElement);
        URL.revokeObjectURL(this.url);
        this.track = this.url = this.mediaElement = null;
        this.image = null;
    }
};

PreloadedMediaElement.prototype.isForTrack = function(track) {
    if (!this.track || this.error || !this.mediaElement) return false;
    return this.track === track;
};

PreloadedMediaElement.prototype.release = function() {
    if (this.url && this.mediaElement) {
        this.removeListeners();
        var ret = {
            url: this.url,
            element: this.mediaElement,
            image: this.image
        };
        this.image = this.track = this.url = this.mediaElement = null;
        return ret;
    } else {
        throw new Error("already released");
    }
};

return Player;})();

;
;
(function($) {
    function clicked() {
        $(this).data("file_input").click();
    }

    function createInput(atts) {
        var input = document.createElement("input");
        atts = Object(atts);
        Object.keys(atts).forEach(function(key) {
            input[key] = atts[key];
        });
        $(input).css({
            position: "absolute",
            top: "-9999px",
            left: "-9999px"
        });
        input.type = "file";
        $("body").append(input);
        return input;
    }

    $.fn.fileInput = function(action, atts) {
        return this.each(function() {
            if (action === "create") {
                if ($(this).data("file_input")) {
                    throw new Error("fileinput already on this element");
                }
                var input = createInput(atts);
                $(this).data("file_input", input);
                $(this).data("file_input_atts", Object(atts));
                $(this).bind("click", clicked);
            } else if (action === "delete") {
                if (!$(this).data("file_input")) {
                    return;
                }
                var input = $(this).data("file_input");
                $(this).data("file_input", null);
                $(this).data("file_input_atts", null);
                $(this).unbind("click", clicked);
                $(input).remove();
            } else if (action === "clearFiles") {
                if (!$(this).data("file_input")) {
                    return;
                }
                var storedAtts = $(this).data("file_input_atts");
                var input = $(this).data("file_input");
                $(input).remove();
                input = createInput(storedAtts);
                $(this).data("file_input", input);
            }
        });
    };
})(jQuery);

;
;
var hotkeyManager = (function() {"use strict";

const STORAGE_KEY = "hotkey-bindings";
const HOTKEY_TYPE_PERSISTENT = 0;
const HOTKEY_TYPE_NORMAL = 1;

var POPUP_HTML = "<div class='popup-content-container' id='hotkey-manager'>                                      \
    <div class='popup-header'>                                                                                   \
        <h2 class='app-header-2'>Hotkey setup</h2>                                                               \
    </div>                                                                                                       \
                                                                                                                 \
    <div class='popup-body'>                                                                                     \
        <div class='app-bread-text'>                                                                             \
            Boost your <a href='http://www.youtube.com/watch?v=YbpCLqryN-Q' target='_blank_'>APM</a>             \
            by binding various shortcuts to keyboard buttons. If a hotkey is bound to a native browser action,   \
            that action will be overridden. For example, binding 'Ctrl+S' will disable the default browser action\
            (save page) as long as it is bound. Overriding also applies to application bound hotkeys.            \
            <span class='emphasis-color'>Most hotkeys are disabled when a popup is open.</span>                  \
        </div>                                                                                                   \
        <div class='hotkey-manager-columns-container'>                                                           \
            <div id='app-hotkeys-wrapper'>                                                                       \
                <div class='app-hotkey-header hotkey-manager-left-column'>Action</div>                           \
                <div class='hotkey-manager-left-column app-hotkey-header'>Bound to</div>                         \
                <div class='clear'></div>                                                                        \
                <div class='app-hotkeys-container ps-container'></div>                                                        \
            </div>                                                                                               \
            <div class='hotkey-manager-description-container'>                                                   \
                <div class='hotkey-manager-description-header app-hotkey-header'>Description</div>               \
                <div class='app-describe-action'></div>                                                          \
            </div>                                                                                               \
            <div class='clear'></div>                                                                            \
        </div>                                                                                                   \
        <div class='hotkey-manager-stage-separator'>                                                             \
            <div class='app-hotkey-bind-container'>                                                              \
                <div class='notextflow hotkey-manager-binding-to-header left'>                                   \
                    Binding <span class='hotkey-action-name'></span> to:                                         \
                </div>                                                                                           \
                <div class='app-keybind-input app-stealth-input left'></div>                                     \
                    <div class='app-accept-bind app-popup-button left'>Apply</div>                               \
                <div class='app-deny-bind app-popup-button left'>Cancel</div>                                    \
                <div class='app-hotkey-unbind app-popup-button left'>Unbind</div>                                \
                <div class='clear'></div>                                                                        \
            </div>                                                                                               \
        </div>                                                                                                   \
    </div>                                                                                                       \
</div>";

var HOTKEY_HTML = "<div class='clear app-hotkey-container'>                   \
    <div class='app-hotkey-name'></div>                                       \
    <div class='app-hotkey-binding'></div>                                    \
</div>";

function HotkeyManager(bindingMap, categories) {
    this._descriptors = [];
    this._bindingMap = bindingMap;
    this._categories = categories;
    this._enabled = false;
}

HotkeyManager.prototype.setBindingMap = function(bindingMap) {
    this.disablePersistentHotkeys();
    this.disableHotkeys();
    this._bindingMap = bindingMap;
    this.enableHotkeys();
    this.enablePersistentHotkeys();
};

HotkeyManager.prototype._enableHotkeys = function(type) {
    if (type === HOTKEY_TYPE_NORMAL) {
        if (this._enabled) return;
        this._enabled = true;
    }
    Object.keys(this._bindingMap).forEach(function(action) {
        var keyCombination = this._bindingMap[action];
        var descriptor = this.getDescriptorForAction(action);

        if ((type === HOTKEY_TYPE_PERSISTENT && descriptor.persistent === true) ||
            (type === HOTKEY_TYPE_NORMAL && !descriptor.persistent)) {
            Hotkeys.add(keyCombination, descriptor.handler, descriptor.options);
        }
    }, this);
};

HotkeyManager.prototype._disableHotkeys = function(type) {
    if (type === HOTKEY_TYPE_NORMAL) {
        if (!this._enabled) return;
        this._enabled = false;
    }
    Object.keys(this._bindingMap).forEach(function(action) {
        var keyCombination = this._bindingMap[action];
        var descriptor = this.getDescriptorForAction(action);

        if ((type === HOTKEY_TYPE_PERSISTENT && descriptor.persistent === true) ||
            (type === HOTKEY_TYPE_NORMAL && !descriptor.persistent)) {
            Hotkeys.remove(keyCombination, descriptor.handler);
        }
    }, this);
};

HotkeyManager.prototype.enableHotkeys = function() {
    this._enableHotkeys(HOTKEY_TYPE_NORMAL);
};

HotkeyManager.prototype.disableHotkeys = function() {
    this._disableHotkeys(HOTKEY_TYPE_NORMAL);
};

HotkeyManager.prototype.enablePersistentHotkeys = function() {
    this._enableHotkeys(HOTKEY_TYPE_PERSISTENT);
};

HotkeyManager.prototype.disablePersistentHotkeys = function() {
    this._disableHotkeys(HOTKEY_TYPE_PERSISTENT);
};


HotkeyManager.prototype.addDescriptor = function(descriptor) {
    if (this._categories.indexOf(descriptor.category) === -1) {
        throw new Error("unknown category: " + descriptor.category);
    }
    this._descriptors.push(descriptor);
};

HotkeyManager.prototype.setBindingForDescriptor = function(descriptor, binding) {
    this._bindingMap[descriptor.action] = binding;
};

HotkeyManager.prototype.getBindingForDescriptor = function(descriptor) {
    return this._bindingMap[descriptor.action];
};

HotkeyManager.prototype.getDescriptorForAction = function(action) {
    for (var i = 0; i < this._descriptors.length; ++i) {
        if (this._descriptors[i].action === action) {
            return this._descriptors[i];
        }
    }
    throw new Error("unknown action:" + action);
};

HotkeyManager.prototype.getDescriptorsForCategory = function(category) {
    return this._descriptors.filter(function(descriptor) {
        return descriptor.category === category;
    });
};

HotkeyManager.prototype.getCategories = function() {
    return this._categories;
};

HotkeyManager.prototype.getDescriptors = function() {
    return this._descriptors;
};

HotkeyManager.prototype.saveBindings = function() {
    keyValueDatabase.set(STORAGE_KEY, this._bindingMap);
};

var defaults = {
    "Select all": "ctrl+a",
    "Clear": "esc",
    "Filter": "j",
    "Next track": "ctrl+right arrow",
    "Previous track": "ctrl+left arrow",
    "Play selected": "enter",

    "Select next up": "up arrow",
    "Select next down": "down arrow",
    "Add next up": "shift+up arrow",
    "Add next down": "shift+down arrow",
    "Remove topmost": "alt+down arrow",
    "Remove bottommost": "alt+up arrow",
    "Move up": "ctrl+up arrow",
    "Move down": "ctrl+down arrow",

    "Select next page up": "pageup",
    "Select next page down": "pagedown",
    "Add next page up": "shift+pageup",
    "Add next page down": "shift+pagedown",
    "Remove topmost page": "alt+pagedown",
    "Remove bottommost page": "alt+pageup",
    "Move page up": "ctrl+pageup",
    "Move page down": "ctrl+pagedown",

    "Select first": "home",
    "Select last": "end",
    "Add all up": "shift+home",
    "Add all down": "shift+end",


    "Rate 1 star": "alt+1",
    "Rate 2 stars": "alt+2",
    "Rate 3 stars": "alt+3",
    "Rate 4 stars": "alt+4",
    "Rate 5 stars": "alt+5",

    "Remove rating": "alt+0",

    "Play": "z",
    "Pause": "x",
    "Stop": "c",
    "Normal mode": "b",
    "Shuffle mode": "n",
    "Repeat mode": "m",
    "Remove": "del",
    "Sort by album": "alt+q",
    "Sort by artist": "alt+w",
    "Sort by title": "alt+e",
    "Seek back": "left arrow",
    "Seek forward": "right arrow",
    "Volume down": "-",
    "Volume up": "+",
    "Center on current track": "space",
    "Toggle mute": "alt+ctrl+m",
    "Open directory picker": "alt+d",
    "Open file picker": "alt+f",
    "Open hotkey manager": "alt+z",
    "Open equalizer": "alt+x",
    "Open crossfading options": "alt+c",
    "Toggle time display mode": "alt+t"
};

keyValueDatabase.getInitialValues().then(function(values) {
    if (STORAGE_KEY in values) {
        var bindingMap = {};
        $.extend(bindingMap, defaults, values[STORAGE_KEY]);
        hotkeyManager.setBindingMap(bindingMap);
    }
});

var hotkeyManager = new HotkeyManager(defaults, [
    "Music player", "Playlist management", "General actions"]);

hotkeyManager.addDescriptor({
    category: "General actions",
    action: "Clear",
    description: "Clear selections or popups.",
    handler: function() {
        if (popup.length) {
            popup.closeAll();
        }
        playlist.main.clearSelection();
        return false;
    },
    persistent: true,
    allowRebind: false,
    options: {
        allowInput: true
    }
});

hotkeyManager.addDescriptor({
    category: "General actions",
    action: "Open hotkey manager",
    description: "Opens this popup.",
    handler: openHotkeyManager
});

function HotkeyBinding(hotkeyManager, hotkeyBinder, descriptor) {
    this.hotkeyManager = hotkeyManager;
    this.hotkeyBinder = hotkeyBinder;
    this.descriptor = descriptor;
    this.binding = hotkeyManager.getBindingForDescriptor(descriptor);

    var dom = $(HOTKEY_HTML);

    dom.bind("mouseenter", $.proxy(this.onMouseEnter, this));
    dom.bind("mouseleave", $.proxy(this.onMouseLeave, this));
    dom.bind("click", $.proxy(this.onClick, this));

    dom.find(".app-hotkey-name").text(this.descriptor.action);
    dom.find(".app-hotkey-binding").text(this.binding);
    this._domNode = dom;
}

HotkeyBinding.prototype.$ = function() {
    return this._domNode;
};

HotkeyBinding.prototype.setBindingTo = function(str) {
    this.binding = str;
    this.$().find(".app-hotkey-binding").text(this.binding);
};

HotkeyBinding.prototype.onMouseEnter = function(e) {
    this.hotkeyBinder.$().find(".app-describe-action").text(this.descriptor.description);
};

HotkeyBinding.prototype.onMouseLeave = function(e) {
    this.hotkeyBinder.$().find(".app-describe-action").text("");

};

HotkeyBinding.prototype.onClick = function(e) {
    this.hotkeyBinder.startBinding(this);
};

function HotkeyBinder(hotkeyManager, domNode) {
    this._currentlyBindingTo = null;
    this._currentHotkeyString = "";
    this._hotkeyManager = hotkeyManager;
    this._domNode = $(domNode);

    this.cancelBinding = $.proxy(this.cancelBinding, this);
    this.applyBinding = $.proxy(this.applyBinding, this);
    this.unbindBinding = $.proxy(this.unbindBinding, this);
    this.listenUserHotkeys = $.proxy(this.listenUserHotkeys, this);


    this.$().find(".app-accept-bind").bind("click", this.applyBinding);
    this.$().find(".app-deny-bind").bind("click", this.cancelBinding);
    this.$().find(".app-hotkey-unbind").bind("click", this.unbindBinding);
    $(document).bind("keydown", this.listenUserHotkeys);

    this._hotkeyBindings = [];
    hotkeyManager.getCategories().forEach(function(category) {
        var categoryRendered = false;
        var descriptors = hotkeyManager.getDescriptorsForCategory(category);
        descriptors.forEach(function(descriptor) {
            if (descriptor.allowRebind === false) return;

            if (!categoryRendered) {
                var dom = $('<div class="app-hotkey-category"></div>').text(category);
                this.$().find(".app-hotkeys-container").append(dom);
                categoryRendered = true;
            }
            var binding = new HotkeyBinding(hotkeyManager, this, descriptor);
            this.$().find(".app-hotkeys-container").append(binding.$());
            this._hotkeyBindings.push(binding);
        }, this);
    }, this);

    this.$().find(".ps-container").perfectScrollbar();
}

HotkeyBinder.prototype.$ = function() {
    return this._domNode;
};

HotkeyBinder.prototype.listenUserHotkeys = function(e) {
    if (this._currentlyBindingTo) {
        e.preventDefault();
        var special = Hotkeys.keys[e.which];
        var character = String.fromCharCode(e.which).toLowerCase();
        var modifier = "";
        if (e.altKey && special !== "alt") modifier += "alt+";
        if (e.shiftKey && special !== "shift") modifier += "shift+";
        if (e.ctrlKey && special !== "ctrl") modifier += "ctrl+";
        if (e.metaKey && special !== "meta" && !e.ctrlKey) modifier += "meta+";

        var binding = "";
        if (special && modifier + special) {
            binding = modifier + special;
        } else if (modifier + character) {
            binding = modifier + character;
        } else if (modifier + shiftKeys[character]) {
            binding = modifier + shiftKeys[character];
        } else if (modifier === "shift+" && shiftKeys[character]) {
            binding = modifier + shiftKeys[character];
        }

        if (binding) {
            this.setCurrentHotkeyString(binding);
        }
    }
};

HotkeyBinder.prototype.setCurrentHotkeyString = function(value) {
    this._currentHotkeyString = value;
    this.$().find(".app-keybind-input").text(value);
}

HotkeyBinder.prototype.startBinding = function(hotkeyBinding) {
    this.cancelBinding();
    this.setCurrentHotkeyString(hotkeyBinding.binding);
    this.$().find(".hotkey-action-name").text(hotkeyBinding.descriptor.action);
    this._currentlyBindingTo = hotkeyBinding;
    this.$().find(".app-hotkey-bind-container").show();

};

HotkeyBinder.prototype.cancelBinding = function() {
    if (this._currentlyBindingTo) {
        this._currentlyBindingTo = null;
        this.$().find(".app-hotkey-bind-container").hide();
        this.setCurrentHotkeyString("");
    }
};

HotkeyBinder.prototype.applyBinding = function() {
    if (this._currentlyBindingTo) {
        if (this._currentHotkeyString) {
            this._hotkeyBindings.forEach(function(hotkeyBinding) {
                if (hotkeyBinding === this._currentlyBindingTo) {
                    hotkeyBinding.setBindingTo(this._currentHotkeyString)
                    this._hotkeyManager.setBindingForDescriptor(hotkeyBinding.descriptor, this._currentHotkeyString);
                } else if (hotkeyBinding.binding === this._currentHotkeyString) {
                    hotkeyBinding.setBindingTo("");
                    this._hotkeyManager.setBindingForDescriptor(hotkeyBinding.descriptor, "");
                }
            }, this);
        }
        this.stopBinding();
    }
};

HotkeyBinder.prototype.unbindBinding = function() {
    if (this._currentlyBindingTo) {
        this._currentlyBindingTo.setBindingTo("");
        this._hotkeyManager.setBindingForDescriptor(this._currentlyBindingTo.descriptor, "");
        this.stopBinding();
    }
};

HotkeyBinder.prototype.stopBinding = function() {
    this.cancelBinding();
    this._hotkeyManager.saveBindings();
};

HotkeyBinder.prototype.destroy = function() {
    this.$().find(".ps-container").perfectScrollbar('destroy');
    this.$().remove();
    $(document).unbind("keydown", this.listenUserHotkeys);
};


function openHotkeyManager() {
    popup.open(POPUP_HTML, 630, 504);

    var hotkeyBinder = new HotkeyBinder(hotkeyManager, "#hotkey-manager");

    popup.once("close", function() {
        hotkeyBinder.destroy();
    });
}

$(".menul-hotkeys").click(openHotkeyManager);

return hotkeyManager })();

;
;
var equalizer = new EventEmitter();

(function() { "use strict";
    const STORAGE_KEY = "equalizer";
    equalizer.amplitudeRatioToDecibelChange = function(ratio) {
        if (!isFinite(+ratio)) throw new Error("ratio must be a number");
        return 20 * Math.log(ratio) * Math.LOG10E;
    };

    equalizer.decibelChangeToAmplitudeRatio = function(decibel) {
        if (!isFinite(+decibel)) return 1;
        return Math.pow(10, (decibel / 20));
    };

    var presets = {
        "None": {
            "70": 0,
            "180": 0,
            "320": 0,
            "600": 0,
            "1000": 0,
            "3000": 0,
            "6000": 0,
            "12000": 0,
            "14000": 0,
            "16000": 0,
            "preamp": 0
        },

        "Classical": {
            "70": -1,
            "180": -1,
            "320": -1,
            "600": -1,
            "1000": -1,
            "3000": -1,
            "6000": -7,
            "12000": -7,
            "14000": -7,
            "16000": -9,
            "preamp": -1
        },
        "Club": {
            "70": -1,
            "180": -1,
            "320": 8,
            "600": 5,
            "1000": 5,
            "3000": 5,
            "6000": 3,
            "12000": -1,
            "14000": -1,
            "16000": -1,
            "preamp": -6.71999979019165
        },
        "Dance": {
            "70": 9,
            "180": 7,
            "320": 2,
            "600": -1,
            "1000": -1,
            "3000": -5,
            "6000": -7,
            "12000": -7,
            "14000": -1,
            "16000": -1,
            "preamp": -4.319999694824219
        },
        "Full Bass": {
            "70": -8,
            "180": 9,
            "320": 9,
            "600": 5,
            "1000": 1,
            "3000": -4,
            "6000": -8,
            "12000": -10,
            "14000": -11,
            "16000": -11,
            "preamp": -7.199999809265137
        },
        "Full Bass & Treble": {
            "70": 7,
            "180": 5,
            "320": -1,
            "600": -7,
            "1000": -4,
            "3000": 1,
            "6000": 8,
            "12000": 11,
            "14000": 12,
            "16000": 12,
            "preamp": -10.079999923706055
        },
        "Full Treble": {
            "70": -9,
            "180": -9,
            "320": -9,
            "600": -4,
            "1000": 2,
            "3000": 11,
            "6000": 16,
            "12000": 16,
            "14000": 16,
            "16000": 16,
            "preamp": -12
        },
        "Laptop Speakers / Headphone": {
            "70": 4,
            "180": 11,
            "320": 5,
            "600": -3,
            "1000": -2,
            "3000": 1,
            "6000": 4,
            "12000": 9,
            "14000": 12,
            "16000": 14,
            "preamp": -8.15999984741211
        },
        "Large Hall": {
            "70": 10,
            "180": 10,
            "320": 5,
            "600": 5,
            "1000": -1,
            "3000": -4,
            "6000": -4,
            "12000": -4,
            "14000": -1,
            "16000": -1,
            "preamp": -7.199999809265137
        },
        "Live": {
            "70": -4,
            "180": -1,
            "320": 4,
            "600": 5,
            "1000": 5,
            "3000": 5,
            "6000": 4,
            "12000": 2,
            "14000": 2,
            "16000": 2,
            "preamp": -5.279999732971191
        },
        "Party": {
            "70": 7,
            "180": 7,
            "320": -1,
            "600": -1,
            "1000": -1,
            "3000": -1,
            "6000": -1,
            "12000": -1,
            "14000": 7,
            "16000": 7,
            "preamp": -5.279999732971191
        },
        "Pop": {
            "70": -1,
            "180": 4,
            "320": 7,
            "600": 8,
            "1000": 5,
            "3000": -1,
            "6000": -2,
            "12000": -2,
            "14000": -1,
            "16000": -1,
            "preamp": -6.239999771118164
        },
        "Reggae": {
            "70": -1,
            "180": -1,
            "320": -1,
            "600": -5,
            "1000": -1,
            "3000": 6,
            "6000": 6,
            "12000": -1,
            "14000": -1,
            "16000": -1,
            "preamp": -8.15999984741211
        },
        "Rock": {
            "70": 8,
            "180": 4,
            "320": -5,
            "600": -8,
            "1000": -3,
            "3000": 4,
            "6000": 8,
            "12000": 11,
            "14000": 11,
            "16000": 11,
            "preamp": -10.079999923706055
        },
        "Ska": {
            "70": -2,
            "180": -4,
            "320": -4,
            "600": -1,
            "1000": 4,
            "3000": 5,
            "6000": 8,
            "12000": 9,
            "14000": 11,
            "16000": 9,
            "preamp": -11.039999961853027
        },
        "Soft": {
            "70": 4,
            "180": 1,
            "320": -1,
            "600": -2,
            "1000": -1,
            "3000": 4,
            "6000": 8,
            "12000": 9,
            "14000": 11,
            "16000": 12,
            "preamp": -9.59999942779541
        },
        "Soft Rock": {
            "70": 4,
            "180": 4,
            "320": 2,
            "600": -1,
            "1000": -4,
            "3000": -5,
            "6000": -3,
            "12000": -1,
            "14000": 2,
            "16000": 8,
            "preamp": -5.279999732971191
        },
        "Techno": {
            "70": 8,
            "180": 5,
            "320": -1,
            "600": -5,
            "1000": -4,
            "3000": -1,
            "6000": 8,
            "12000": 9,
            "14000": 9,
            "16000": 8,
            "preamp": -7.679999828338623
        }
    };

    var EQUALIZER_MAX_GAIN = 12;
    var EQUALIZER_MIN_GAIN = -12;

    equalizer.bands = [
        [70, 'lowshelf'],
        [180, 'peaking'],
        [320, 'peaking'],
        [600, 'peaking'],
        [1000, 'peaking'],
        [3000, 'peaking'],
        [6000, 'peaking'],
        [12000, 'peaking'],
        [14000, 'peaking'],
        [16000, 'highshelf']
    ];

    equalizer.equalizer = Object.create(null);

    equalizer.toGainValue = function(value) {
        value = parseInt(value, 10);
        if (!isFinite(value)) return 0;
        return Math.max(Math.min(value, EQUALIZER_MAX_GAIN), EQUALIZER_MIN_GAIN);
    };

    equalizer.frequencyToIndex = (function() {
        var map = Object.create(null);

        equalizer.bands.forEach(function(band, index) {
            map[band[0]] = index;
        });

        return function(freq) {
            return map[freq];
        };
    })();

    function formatFreq(freq) {
        if (freq < 1000) {
            return freq + " Hz";
        } else {
            return Math.round(freq / 1000) + " KHz";
        }
    }

    function getCurrentlyMatchingPreset() {
        var freqs = Object.keys(equalizer.equalizer);
        var presetNames = Object.keys(presets);

        for (var i = 0; i < presetNames.length; ++i) {
            var preset = presets[presetNames[i]];

            if (freqs.every(function(freq) {
                return equalizer.equalizer[freq] === preset[freq];
            })) {
                return presetNames[i];
            }
        }
        return "Custom";
    }

    var html = (function() {
        var descriptorContainerHtml = "<div class='equalizer-descriptor-container'>                         \
            <div id='equalizer-max-gain' class='equalizer-max-gain'>+"+EQUALIZER_MAX_GAIN+" dB</div>        \
            <div id='equalizer-current-gain' class='equalizer-current-gain'>                                \
                <div class='equalizer-current-gain-sign'></div>                                             \
                <div class='equalizer-current-gain-value'>0</div>                                           \
                <div class='equalizer-current-gain-unit'>dB</div>                                           \
            </div>                                                                                          \
            <div id='equalizer-min-gain' class='equalizer-min-gain'>"+EQUALIZER_MIN_GAIN+" dB</div>         \
        </div>";

        var sliderContainerHtml = "<div class='equalizer-sliders-container'>" +
            equalizer.bands.map(function(band) {
                var sliderId = "equalizer-band-" + band[0] + "-slider";
                var knobId = "equalizer-band-" + band[0] + "-knob";
                return "<div class='equalizer-slider-container'>                             \
                    <div id='"+sliderId+"' class='app-general-slider-wrap vertical equalizer-slider-wrap'>\
                        <div id='"+knobId+"' class='app-general-slider-knob vertical'></div> \
                    </div>                                                                   \
                    <div class='notextflow band-frequency-label'>"+formatFreq(band[0])+"</div>          \
                </div>";
            }).join("") + "</div>";

        var presetHtml = "<select id='equalizer-preset-selector'><option selected value='Custom'>Custom</option>" +
            Object.keys(presets).map(function(presetName) {
                return "<option value='"+presetName+"'>"+presetName+"</option>";
            }).join("") +
        "</select>";

        var presetContainerHtml = "<div class='equalizer-preset-container'>                 \
            <span class='equalizer-preset-label'>Load a preset: </span> "+presetHtml+"      \
        </div>";


        return "<div class='popup-content-container'>                            \
                <div class='popup-header'>                                       \
                    <h2 class='app-header-2'>Equalizer</h2>                      \
                </div>                                                           \
                <div class='popup-body'>                                         \
                    <div class='equalizer-popup-content-container'>              \
                        "+descriptorContainerHtml+"                              \
                        "+sliderContainerHtml+"                                  \
                        "+presetContainerHtml+"                                  \
                    </div>                                                       \
                </div>                                                           \
            </div>";
    })();

    function gainValueToProgress(gainValue) {
        var max = Math.abs(EQUALIZER_MIN_GAIN) + Math.abs(EQUALIZER_MAX_GAIN);
        var abs = gainValue + EQUALIZER_MAX_GAIN;
        return abs / max;
    }

    function progressToGainValue(progress) {
        var max = Math.abs(EQUALIZER_MIN_GAIN) + Math.abs(EQUALIZER_MAX_GAIN);
        var value = Math.round(progress * max);
        return value - Math.abs(EQUALIZER_MAX_GAIN);
    }

    function formatGainValue(value) {
        if (value > 0) {
            return ["+", Math.abs(value), "dB"];
        } else if (value < 0) {
            return ["-", Math.abs(value), "dB"];
        } else {
            return ["", 0, "dB"];
        }
    }

    function selectCurrentlyMatchingPreset() {
        var preset = getCurrentlyMatchingPreset();

        $("#equalizer-preset-selector option").each(function() {
            this.selected = $(this).val() === preset;
        });
    }

    function selectCustomPreset() {
        $("#equalizer-preset-selector").val("Custom");
    }

    var triggerEqualizerChange = util.throttle(function() {
        equalizer.emit("equalizerChange");
    }, 50);

    function openEditor() {
        popup.open(html, 560, 279);

        selectCurrentlyMatchingPreset();
        var currentGain =  $("#equalizer-current-gain");
        var currentGainSign = currentGain.find(".equalizer-current-gain-sign");
        var currentGainValue = currentGain.find(".equalizer-current-gain-value");
        var currentGainUnit = currentGain.find(".equalizer-current-gain-unit");

        var sliders = equalizer.bands.map(function(band) {
            var currentValue = null;
            var freq = band[0];
            var db = equalizer.equalizer[freq];
            var sliderSelector = "#equalizer-band-" + freq + "-slider";
            var knob = document.getElementById("equalizer-band-" + freq + "-knob");


            var slider = new Slider(sliderSelector, {
                direction: "vertical"
            });

            function updateKnob(p) {
                knob.style.top = (p * 110 - 5) + "px";
            }

            slider.on("slideBegin", function() {
                currentValue = null;
                currentGain.show();
            });

            slider.on("slide", function(p) {
                selectCustomPreset();
                updateKnob(p);
                var value = equalizer.toGainValue(progressToGainValue(1 - p));
                var formatting = formatGainValue(value);

                currentGainSign.text(formatting[0]);
                currentGainValue.text(formatting[1]);
                currentGainUnit.text(formatting[2]);
                currentValue = value;
                equalizer.equalizer[freq] = value;
                equalizer.equalizer.preamp = null;
                triggerEqualizerChange();
            });

            slider.on("slideEnd", function() {
                var value = currentValue;
                currentValue = null;
                currentGain.hide();
                equalizer.equalizer[freq] = value;
                keyValueDatabase.set(STORAGE_KEY, equalizer.equalizer);
                triggerEqualizerChange();
            });

            updateKnob(1 - gainValueToProgress(db));

            return {
                update: function(db) {
                    updateKnob(1 - gainValueToProgress(db));
                }
            }
        });

        $("#equalizer-preset-selector").bind("change", function() {
            var presetName = $(this).val();

            if (presetName !== "Custom") {
                var preset = presets[presetName];
                Object.keys(equalizer.equalizer).forEach(function(freq, index) {
                    // Check for "preamp".
                    if (!isFinite(+freq)) return;
                    var db = preset[freq];
                    sliders[index].update(db);
                    equalizer.equalizer[freq] = db;
                });
                equalizer.equalizer.preamp = preset.preamp;
                keyValueDatabase.set(STORAGE_KEY, equalizer.equalizer);
                triggerEqualizerChange();
            }
        });
    }

    keyValueDatabase.getInitialValues().then(function(values) {
        if (STORAGE_KEY in values) {
            var EQ = Object.create(null);
            equalizer.bands.forEach(function(band) {
                var freq = band[0];
                EQ[freq] = equalizer.toGainValue(values[STORAGE_KEY][freq]);
            });
            equalizer.equalizer = EQ;
        } else {
            equalizer.bands.forEach(function(band) {
                equalizer.equalizer[band[0]] = 0;
            });
        }
    });

    equalizer.getBands = function(track) {
        return equalizer.equalizer;
    };

    $(".menul-equalizer").click(openEditor);

    hotkeyManager.addDescriptor({
        category: "General actions",
        action: "Open equalizer",
        description: "Opens the equalizer popup.",
        handler: openEditor
    });
})()

;
;
var playlist = playlist || {};
var popup;

popup = new BlockingPopup(500, 300, {
    closerClass: "app-popup-closer glyphicon glyphicon-remove",
    addClass: "app-popup-container thick-shadow"
});

popup.on("beforeOpen", function(id) {
    $("#" + id)
        .hide()
        .fadeIn(400);
});
popup.on("close", function() {
    hotkeyManager.enableHotkeys();
    if (!this.length) {
        $("#app-container")
            .fadeTo(0, 1);
    }
});
popup.on("open", function() {
    hotkeyManager.disableHotkeys();
    if (this.length < 2) {
        $("#app-container")
            .fadeTo(0, 0.3);
    }
});

$(window).on("resize", function() {
    $(window).trigger("relayout");
});

(function() {
    const DEFAULT_ITEM_HEIGHT = 21;

    playlist.trackDisplay = new TrackDisplay("app-track-display");

    playlist.main = new Playlist("#app-playlist-container", {
        itemHeight: DEFAULT_ITEM_HEIGHT
    });

    const actions = {
        selectAll: function(e) {
            if (e && e.preventDefault) e.preventDefault();
            playlist.main.selectAll();
        },
        filter: function() { filter.show(); },
        play: function() { playlist.main.playFirstSelected(); },
        delete: function() { playlist.main.removeSelected(); },
        sortByTitle: function() { playlist.main.sortByTitle(); },
        sortByArtist: function() { playlist.main.sortByArtist(); },
        sortByAlbum: function() { playlist.main.sortByAlbum(); },
        sortByRating: function() { playlist.main.sortByRating(); },
        sortByDuration: function() { playlist.main.sortByDuration(); },
        sortByReverseOrder: function() { playlist.main.sortByReverseOrder(); },
    };

    const trackActionsSpec = {
        menu: [{
            id: "select-all",
            disabled: true,
            content: '<div class="action-menu-item-content"><span class="icon material-icons small-material-icon">select_all</span> Select all</div>',
            onClick: actions.selectAll
        }, {
            id: "filter",
            disabled: true,
            content: '<div class="action-menu-item-content"><span class="icon glyphicon glyphicon-filter"></span> Filter</div>',
            onClick: actions.filter
        }, {
            id: "play",
            disabled: true,
            content: '<div class="action-menu-item-content"><span class="icon glyphicon glyphicon-play-circle"></span> Play</div>',
            onClick: actions.play
        }, {
            id: "delete",
            disabled: true,
            content: '<div class="action-menu-item-content"><span class="icon material-icons small-material-icon">delete</span> Delete</div>',
            onClick: actions.delete
        }, {
            id: "sort",
            disabled: true,
            content: '<div class="action-menu-item-content"><span class="icon glyphicon glyphicon-sort"></span> Sort by</div>',
            children: [{
                id: "sort-by-album",
                content: '<div class="action-menu-item-content"><span class="icon material-icons small-material-icon">album</span> Album</div>',
                onClick: actions.sortByTitle

            }, {
                id: "sort-by-artist",
                content: '<div class="action-menu-item-content"><span class="icon material-icons small-material-icon">mic</span> Artist</div>',
                onClick: actions.sortByArtist

            }, {
                id: "sort-by-title",
                content: '<div class="action-menu-item-content"><span class="icon material-icons small-material-icon">music_note</span> Title</div>',
                onClick: actions.sortByAlbum

            }, {
                id: "sort-by-rating",
                content: '<div class="action-menu-item-content"><span class="icon material-icons small-material-icon">grade</span> Rating</div>',
                onClick: actions.sortByRating

            }, {
                id: "sort-by-duration",
                content: '<div class="action-menu-item-content"><span class="icon material-icons small-material-icon">access_time</span> Duration</div>',
                onClick: actions.sortByDuration
            }, {
                divider: true
            }, {
                id: "sort-by-reverse-order",
                content: '<div class="action-menu-item-content"><span class="icon material-icons small-material-icon">undo</span> Reverse order</div>',
                onClick: actions.sortByReverseOrder
            }]
        }]
    };

    var trackActionMenu = new ActionMenu(trackActionsSpec);
    var trackContextMenu = new ActionMenu.ContextMenu(playlist.main.$(), trackActionsSpec);

    if (features.touch) {
        trackActionMenu.$().appendTo(".tracks-menu-container");
    }

    playlist.main.on("tracksSelected", function(selectable) {
        var selectedItemsCount = selectable.getSelectedItemCount();
        $("#app-selection-count").text(util.shortNumber(selectedItemsCount));

        var actionsToDisable = [];
        var actionsToEnable = [];

        if (selectedItemsCount === 0) {
            actionsToDisable.push("play", "delete", "sort");
        } else if (selectedItemsCount === 1) {
            actionsToEnable.push("play", "delete");
            actionsToDisable.push("sort");
        } else {
            actionsToEnable.push("play", "delete", "sort");
        }

        if (playlist.main.length === playlist.main.getSelectedTrackCount()) {
            actionsToDisable.push("select-all");
        } else {
            actionsToEnable.push("select-all");
        }

        trackActionMenu.enable(actionsToEnable);
        trackActionMenu.disable(actionsToDisable);
        trackContextMenu.enable(actionsToEnable);
        trackContextMenu.disable(actionsToDisable);
    });

    playlist.main.on("lengthChange", function(newLength, oldLength) {
        var haveTracks = newLength > 0;
        var actionsToDisable = [];
        var actionsToEnable = [];

        if (haveTracks) {
            if (newLength === playlist.main.getSelectedTrackCount()) {
                actionsToDisable.push("select-all");
            } else {
                actionsToEnable.push("select-all");
            }
            actionsToEnable.push("filter");
        } else {
            actionsToDisable.push("select-all", "filter");
        }

        trackActionMenu.enable(actionsToEnable);
        trackActionMenu.disable(actionsToDisable);
        trackContextMenu.enable(actionsToEnable);
        trackContextMenu.disable(actionsToDisable);
    });

    var playlistModeManager = new PlaylistModeManager(".playlist-controls-container", playlist.main);

    PanelControls.makeTooltip($(".menul-folder"), "Add a folder");
    PanelControls.makeTooltip($(".menul-files"), "Add files");
    PanelControls.makeTooltip($(".menul-hotkeys"), "Configure hotkeys");
    PanelControls.makeTooltip($(".menul-crossfade"), "Configure crossfading");
    PanelControls.makeTooltip($(".menul-equalizer"), "Configure equalizer");

    playlist.main.on("trackChange", function(track) {
        if (!track) return;
        var index = track.getIndex();
        var trackNumber = index >= 0 ? (index + 1) + "." : "";
        playlist.trackDisplay.newTitle(trackNumber + " " + track.formatFullName()).beginMarquee();
    });

    $(document).ready(function() {
        if (features.directories) {
            $('.menul-folder, .add-folder-link').fileInput("create", {
                onchange: function() {
                    localFiles.handle(this.files);
                    $(".menul-folder").fileInput("clearFiles");
                },
                webkitdirectory: true,
                directory: true,
                mozdirectory: true
            });
        } else {
            $(".menul-folder, .suggestion-folders").remove();
        }

        $('.menul-files, .add-files-link').fileInput("create", {
            onchange: function() {
                localFiles.handle(this.files);
                $(".menul-files").fileInput("clearFiles");
            },
            multiple: true,
            accept: features.allowMimes.join(",")
        });
    });


    $(window).on("load", function() {
        keyValueDatabase.getInitialValues().then(function() {
            $("#app-loader").remove();
            $("#app-container").show();
            playlist.main.windowLayoutChanged();
        });
    });

    window.addEventListener("beforeunload", function(e) {
        e.preventDefault();
        e.returnValue = "Are you sure you want to exit?";
        return e.returnValue;
    }, false);

    hotkeyManager.addDescriptor({
        category: "General actions",
        action: "Open directory picker",
        description: "Open a directory picker to pick a directory to load audio files from.",
        handler: function() {
            $(".menul-folder").click();
        }
    });

    hotkeyManager.addDescriptor({
        category: "General actions",
        action: "Open file picker",
        description: "Open a file picker to pick a directory to load audio files from.",
        handler: function() {
            $(".menul-files").click();
        }
    });

    hotkeyManager.addDescriptor({
        category: "Playlist management",
        action: "Play selected",
        description: "Starts playing the selected track. If multiple tracks are selected, the first track of the selection is played.",
        handler: actions.play
    });

    // Arrow up and arrow down selection stuff.
    hotkeyManager.addDescriptor({
        category: "Playlist management",
        action: "Select next up",
        description: "Select the next track up.",
        handler: function() {
            playlist.main.selectPrev();
        }
    });

    hotkeyManager.addDescriptor({
        category: "Playlist management",
        action: "Select next down",
        description: "Select the next track down.",
        handler: function() {
            playlist.main.selectNext();
        }
    });

    hotkeyManager.addDescriptor({
        category: "Playlist management",
        action: "Add next up",
        description: "Add the next track up to selection.",
        handler: function() {
            playlist.main.selectPrevAppend();
        }
    });

    hotkeyManager.addDescriptor({
        category: "Playlist management",
        action: "Add next down",
        description: "Add next track down to selection.",
        handler: function() {
            playlist.main.selectNextAppend();
        }
    });

    hotkeyManager.addDescriptor({
        category: "Playlist management",
        action: "Remove topmost",
        description: "Remove the topmost track from selection",
        handler: function() {
            playlist.main.removeTopmostSelection();
        }
    });

    hotkeyManager.addDescriptor({
        category: "Playlist management",
        action: "Remove bottommost",
        description: "Remove the bottommost track from selection",
        handler: function() {
            playlist.main.removeBottommostSelection();
        }
    });

    hotkeyManager.addDescriptor({
        category: "Playlist management",
        action: "Move up",
        description: "Move selected tracks up.",
        handler: function() {
            playlist.main.moveSelectionUp();
        }
    });

    hotkeyManager.addDescriptor({
        category: "Playlist management",
        action: "Move down",
        description: "Move selected tracks down.",
        handler: function() {
            playlist.main.moveSelectionDown();
        }
    });

    // Page up and page down selection stuff.
    hotkeyManager.addDescriptor({
        category: "Playlist management",
        action: "Select next page up",
        description: "Select the track next page up. Can be used to move around a long playlist quickly.",
        handler: function() {
            playlist.main.selectPagePrev();
        }
    });

    hotkeyManager.addDescriptor({
        category: "Playlist management",
        action: "Select next page down",
        description: "Select the track next page down. Can be used to move around a long playlist quickly.",
        handler: function() {
            playlist.main.selectPageNext();
        }
    });

    hotkeyManager.addDescriptor({
        category: "Playlist management",
        action: "Add next page up",
        description: "Add all tracks next page up to selection.",
        handler: function() {
            playlist.main.selectPagePrevAppend();
        }
    });

    hotkeyManager.addDescriptor({
        category: "Playlist management",
        action: "Add next page down",
        description: "Add all tracks next page down to selection.",
        handler: function() {
            playlist.main.selectPageNextAppend();
        }
    });

    hotkeyManager.addDescriptor({
        category: "Playlist management",
        action: "Remove topmost page",
        description: "Remove the topmost pageful of tracks from selection",
        handler: function() {
            playlist.main.removeTopmostPageSelection();
        }
    });

    hotkeyManager.addDescriptor({
        category: "Playlist management",
        action: "Remove bottommost page",
        description: "Remove the bottommost pageful of tracks from selection",
        handler: function() {
            playlist.main.removeBottommostPageSelection();
        }
    });

    hotkeyManager.addDescriptor({
        category: "Playlist management",
        action: "Move page up",
        description: "Move selected tracks up by a page.",
        handler: function() {
            playlist.main.moveSelectionPageUp();
        }
    });

    hotkeyManager.addDescriptor({
        category: "Playlist management",
        action: "Move page down",
        description: "Move selected tracks down by a page.",
        handler: function() {
            playlist.main.moveSelectionPageDown();
        }
    });

    // Home and End selection stuff.

    hotkeyManager.addDescriptor({
        category: "Playlist management",
        action: "Select first",
        description: "Select first track in the playlist.",
        handler: function() {
            playlist.main.selectFirst();
        }
    });

    hotkeyManager.addDescriptor({
        category: "Playlist management",
        action: "Select last",
        description: "Select last track in the playlist.",
        handler: function() {
            playlist.main.selectLast();
        }
    });

    hotkeyManager.addDescriptor({
        category: "Playlist management",
        action: "Add all up",
        description: "Add all tracks up to selection",
        handler: function() {
            playlist.main.selectAllUp();
        }
    });

    hotkeyManager.addDescriptor({
        category: "Playlist management",
        action: "Add all down",
        description: "Add all tracks down to selection",
        handler: function() {
            playlist.main.selectAllDown();
        }
    });

    hotkeyManager.addDescriptor({
        category: "Playlist management",
        action: "Remove",
        description: "Delete the currently selected tracks from the playlist.",
        handler: actions.delete
    });

    hotkeyManager.addDescriptor({
        category: "Playlist management",
        action: "Sort by album",
        description: "Sorts the selected tracks by their album's name in alphabetical order.",
        handler: actions.sortByAlbum
    });

    hotkeyManager.addDescriptor({
        category: "Playlist management",
        action: "Sort by artist",
        description: "Sorts the selected tracks by their artist's name in alphabetical order.",
        handler: actions.sortByArtist
    });


    hotkeyManager.addDescriptor({
        category: "Playlist management",
        action: "Sort by title",
        description: "Sorts the selected tracks by their titles's name in alphabetical order.",
        handler: actions.sortByTitle
    });

    hotkeyManager.addDescriptor({
        category: "Playlist management",
        action: "Select all",
        description: "Selects all tracks in the playlist.",
        handler: actions.selectAll
    });

    hotkeyManager.addDescriptor({
        category: "Playlist management",
        action: "Center on current track",
        description: "Center the playlist to the currently plaing track. If no track is playing, the currently selected track is played.",
        handler: function() {
            if (!playlist.main.getCurrentTrack()) {
                actions.play();
            }
            if (playlist.main.getCurrentTrack()) {
                playlist.main.centerOnTrack(playlist.main.getCurrentTrack());
                playlist.main.selectTrack(playlist.main.getCurrentTrack());
            }

        }
    });

    [1, 2, 3, 4, 5].forEach(function(ratingValue) {
        var starWord = ratingValue + " " + (ratingValue === 1 ? "star" : "stars");
        hotkeyManager.addDescriptor({
            category: "Playlist management",
            action: "Rate " + starWord,
            description: "Give a rating of " + starWord + " to the currently selected track. To select the currently playing track, press space.",
            handler: function() {
                var track = playlist.main.getSelection().first();
                if (track) track.rate(ratingValue);
            }
        });
    });

    hotkeyManager.addDescriptor({
        category: "Playlist management",
        action: "Remove rating",
        description: "Remove the currently selected track's rating.",
        handler: function() {
            var track = playlist.main.getSelection().first();
            if (track) track.rate(-1);
        }
    });
})();

;
;
var crossfading = crossfading || new EventEmitter();
(function() {"use strict";

const PROGRESS_INCREASE = 1;
const PROGRESS_DECREASE = 2;

const DEFAULT_CURVE = "sCurve";
const MIN_TIME = 0;
const MAX_TIME = 12;
const DEFAULT_TIME = 5;

const STORAGE_KEY = "crossfade-preference";

const CURVE_MAP = {
    "linear": "Linear",
    "sCurve": "S-Curve",
    "cubicFromStart": "Cubic",
    "exponentialFromStart": "Exponential Start",
    "exponentialToEnd": "Exponential End"
};

const CURVE_SELECTOR_HTML = (function() {
    return "<select class='fade-curve-select'>" + Object.keys(CURVE_MAP).map(function(key) {
        return "<option value='"+key+"'>"+CURVE_MAP[key]+"</option>";
    }).join("") + "</select>";
})();

const FADE_CONFIGURATOR_HTML =
    "<div class='fade-enabler-container'>                                                             \
        <div class='checkbox-container'>                                                              \
            <label class='fade-enable-label checkbox-label'>                                          \
                <input type='checkbox' class='fade-enable-checkbox checkbox'>                         \
                <span class='fade-enable-text'></span>                                                \
            </label>                                                                                  \
            <div class='fade-indicator'></div>                                                        \
        </div>                                                                                        \
                                                                                                      \
    </div>                                                                                            \
    <div class='fade-inputs-container'>                                                               \
        <div class='normal-fade-label'>Time</div>                                                     \
        <div class='app-general-slider-wrap left fade-slider'>                                        \
            <div class='app-general-slider-knob'></div>                                               \
            <div class='app-general-slider-bg'></div>                                                 \
        </div>                                                                                        \
        <div class='normal-fade-value'></div>                                                         \
        <br class='clear' />                                                                          \
    </div>                                                                                            \
    <div class='fade-inputs-container'>                                                               \
        <div class='fade-curve-label'>Curve</div>                                                     \
        <div class='fade-curve-container'></div>                                                      \
        <br class='clear' />                                                                          \
        </div>                                                                                        \
    </div>";

function CrossFadePreferences(inEnabled, inTime, inCurve,
                             outEnabled, outTime, outCurve,
                             shouldAlbumCrossFade) {
    this.inEnabled = CrossFadePreferences.asValidEnabled(inEnabled);
    this.inTime = CrossFadePreferences.asValidTime(inTime);
    this.inCurve = CrossFadePreferences.asValidCurve(inCurve);
    this.outEnabled = CrossFadePreferences.asValidEnabled(outEnabled);
    this.outTime = CrossFadePreferences.asValidTime(outTime);
    this.outCurve = CrossFadePreferences.asValidCurve(outCurve);
    this.shouldAlbumCrossFade = CrossFadePreferences.asValidShouldAlbumCrossFade(shouldAlbumCrossFade);
    Object.seal(this);
}

CrossFadePreferences.prototype.equals = function(other) {
    if (!other || !(other instanceof CrossFadePreferences)) return false;
    return  this.inEnabled === other.inEnabled &&
            this.inTime === other.inTime &&
            this.inCurve === other.inCurve &&
            this.outEnabled === other.outEnabled &&
            this.outTime === other.outTime &&
            this.outCurve === other.outCurve &&
            this.shouldAlbumCrossFade === other.shouldAlbumCrossFade;
};

CrossFadePreferences.prototype.copyFrom = function(other) {
    this.inEnabled = other.inEnabled;
    this.inTime = other.inTime;
    this.inCurve = other.inCurve;
    this.outEnabled = other.outEnabled;
    this.outTime = other.outTime;
    this.outCurve = other.outCurve;
    this.shouldAlbumCrossFade = other.shouldAlbumCrossFade;
};

CrossFadePreferences.prototype.toJSON = function() {
    return {
        inEnabled: this.inEnabled,
        inTime: this.inTime,
        inCurve: this.inCurve,
        outEnabled: this.outEnabled,
        outTime: this.outTime,
        outCurve: this.outCurve,
        shouldAlbumCrossFade: this.shouldAlbumCrossFade
    };
};

CrossFadePreferences.prototype.getShouldAlbumCrossFade = function() {
    return this.shouldAlbumCrossFade && (this.outEnabled || this.inEnabled);
};

CrossFadePreferences.prototype.getInEnabled = function() {
    return this.inEnabled;
};

CrossFadePreferences.prototype.getInTime = function() {
    return this.getInEnabled() ? this.inTime : 0;
};

CrossFadePreferences.prototype.getInCurve = function() {
    return this.inCurve;
};

CrossFadePreferences.prototype.getOutEnabled = function() {
    return this.outEnabled;
};

CrossFadePreferences.prototype.getOutTime = function() {
    return this.getOutEnabled() ? this.outTime : 0;
};

CrossFadePreferences.prototype.getOutCurve = function() {
    return this.outCurve;
};

CrossFadePreferences.prototype.getInCurveSamples = function() {
    return getSamplesForCurve(this.inCurve, PROGRESS_INCREASE);
};

CrossFadePreferences.prototype.getOutCurveSamples = function() {
    return getSamplesForCurve(this.outCurve, PROGRESS_DECREASE);
};

CrossFadePreferences.asValidTime = function(time) {
    if (!isFinite(+time)) return DEFAULT_TIME;
    return Math.min(Math.max(MIN_TIME, +time), MAX_TIME);
};

CrossFadePreferences.asValidEnabled = function(enabled) {
    return !!enabled;
};

CrossFadePreferences.asValidShouldAlbumCrossFade = function(albumCrossFade) {
    return !!albumCrossFade;
};

CrossFadePreferences.asValidCurve = function(curve) {
    return CURVE_MAP.hasOwnProperty(curve + "") ? curve : DEFAULT_CURVE;
};

CrossFadePreferences.getPresetMatchingPreferences = function(preferences) {
    var presetNames = Object.keys(presets);
    for (var i = 0; i < presetNames.length; ++i) {
        if (presets[presetNames[i]].equals(preferences)) {
            return presetNames[i];
        }
    }
    return "Custom";
};

const presets = {
    "Default": new CrossFadePreferences(true, 5, "sCurve", true, 5, "sCurve", false),
    "Normal": new CrossFadePreferences(true, 5, "linear", true, 5, "linear", false),
    "Sudden death": new CrossFadePreferences(true, 5, "exponentialFromStart", true, 5, "sCurve", false),
    "Disabled": new CrossFadePreferences(false, 0, "sCurve", false, 0, "sCurve", false),
    "Custom": new CrossFadePreferences(false, 0, "sCurve", false, 0, "sCurve", false)
};

const PRESET_HTML = (function() {
    return "<select class='fade-preset-select'>" + Object.keys(presets).map(function(key) {
        return "<option value='"+key+"'>"+key+"</option>";
    }).join("") + "</select>";
})();

const POPUP_EDITOR_HTML = "<div class='crossfading-configurator popup-content-container'>    \
        <div class='popup-header'>                                                           \
            <h2 class='app-header-2'>Crossfading</h2>                                        \
        </div>                                                                               \
        <div class='popup-body'>                                                             \
            <div class='cross-fade-album-preference-container'>                              \
                <div class='checkbox-container'>                                             \
                    <label class='checkbox-label'>                                           \
                        <input type='checkbox' class='album-crossfade-preference checkbox'>  \
                        Don't crossfade between consecutive tracks of the same album         \
                    </label>                                                                 \
                    <div class='cross-fade-preset-container'>                                \
                        <label>Preset:</label>                                               \
                        "+PRESET_HTML+"                                                      \
                    </div>                                                                   \
                </div>                                                                       \
            </div>                                                                           \
            <div class='section-separator'></div>                                            \
            <div class='left fade-in-configurator fade-configurator-container'></div>        \
            <div class='right fade-out-configurator fade-configurator-container'></div>      \
            <div class='clear'></div>                                                        \
            <div class='section-separator'></div>                                            \
            <canvas width='530' height='230' class='cross-fade-visualizer'></canvas>         \
        </div>                                                                               \
    </div>";

var preferences = new CrossFadePreferences();
preferences.copyFrom(presets["Default"]);
crossfading.getPreferences = function() {
    return preferences;
};

keyValueDatabase.getInitialValues().then(function(values) {
    if (STORAGE_KEY in values) {
        const store = values[STORAGE_KEY];
        preferences = new CrossFadePreferences(store.inEnabled, store.inTime, store.nCurve,
                                               store.outEnabled, store.outTime, store.outCurve,
                                               store.shouldAlbumCrossFade);
    }
});

const savePreferences = function(preferences) {
    keyValueDatabase.set(STORAGE_KEY, preferences.toJSON());
    crossfading.emit("crossFadingChange", preferences);
};

const openPopup = function() {
    popup.open(POPUP_EDITOR_HTML, 550, 445);
    var manager = new CrossFadeManager(".crossfading-configurator", crossfading.getPreferences());
    popup.once("close", function() {
        manager.destroy();
    });
    manager.on("preferencesUpdate", function() {
        savePreferences(manager.preferences);
    });
};

$(".menul-crossfade").click(openPopup);

hotkeyManager.addDescriptor({
    category: "General actions",
    action: "Open crossfading options",
    description: "Opens the crossfading options popup.",
    handler: openPopup
});

const curveInterpolator = {
    cubicFromStart: function(ticks, maxTicks, progressDirection) {
        var ret = (ticks = ticks / maxTicks - 1) * ticks * ticks + 1;
        if (progressDirection === PROGRESS_DECREASE) {
            return 1 - ret;
        }
        return ret;
    },

    linear: function(ticks, maxTicks, progressDirection) {
        var ret = ticks / maxTicks;
        if (progressDirection === PROGRESS_DECREASE) {
            return 1 - ret;
        }
        return ret;
    },

    sCurve: function(ticks, maxTicks, progressDirection) {
        ticks = ticks / (maxTicks / 2);

        var ret;
        if (ticks < 1) {
            ret = 1 / 2 * ticks * ticks * ticks;
        } else {
            ret = 1 / 2 * ((ticks -= 2) * ticks * ticks + 2);
        }
        if (progressDirection === PROGRESS_DECREASE) {
            return 1 - ret;
        }
        return ret;
    },

    exponentialFromStart: function(ticks, maxTicks, progressDirection) {
        var ret = (ticks == maxTicks) ? 1 : -Math.pow(2, -10 * ticks /
            maxTicks) + 1;
        if (progressDirection === PROGRESS_DECREASE) {
            return 1 - ret;
        }
        return ret;
    },

    exponentialToEnd: function(ticks, maxTicks, progressDirection) {
        var ret = (ticks == 0) ? 0 : Math.pow(2, 10 * (ticks / maxTicks -
            1));
        if (progressDirection === PROGRESS_DECREASE) {
            return 1 - ret;
        }
        return ret;
    }
};

const getSamplesForCurve = function(curve, progressDirection) {
    const interpolator = curveInterpolator[curve];
    const maxTicks = 16;
    const ret = new Float32Array(maxTicks);

    for (var i = 0; i < maxTicks; ++i) {
        ret[i] = interpolator(i, maxTicks - 1, progressDirection);
    }
    return ret;
};

function FadeConfigurator(manager, domNode, config) {
    this._domNode = domNode;
    this.manager = manager;
    this.config = config;
    this.slided = $.proxy(this.slided, this);
    this.curveChanged = $.proxy(this.curveChanged, this);
    this.enabledChanged = $.proxy(this.enabledChanged, this);

    this.$().html(FADE_CONFIGURATOR_HTML);
    this.$().find(".fade-curve-container").html(CURVE_SELECTOR_HTML);
    this.$().find(".fade-indicator").addClass(config.indicatorClass);
    this.$().find(".fade-enable-text").text(config.enablerText);

    this.slider = new Slider($(".fade-slider", this.$()));
    this.slider.on("slide", this.slided);
    this.$().find(".fade-enable-checkbox").on("change", this.enabledChanged);
    this.$().find(".fade-curve-select").on("change", this.curveChanged);
    this.update();
}

FadeConfigurator.prototype.destroy = function() {
    this.slider.removeAllListeners();
    this.slider = null;
    this.$().find(".fade-enable-checkbox").off("change", this.enabledChanged);
    this.$().find(".fade-curve-select").off("change", this.curveChanged);
    this._domNode = null;
};

FadeConfigurator.prototype.curveChanged = function(e) {
    this.setCurve($(e.target).val());
};

FadeConfigurator.prototype.enabledChanged = function(e) {
    this.setEnabled(e.target.checked);
};

FadeConfigurator.prototype.slided = function(p) {
    this.setTime(p * MAX_TIME);
};

FadeConfigurator.prototype.update = function() {
    var time = this.getTime();
    var timePercentage = time / MAX_TIME;
    this.$().find(".normal-fade-value").text(time.toPrecision(2) + "s");
    this.$().find(".app-general-slider-knob").css("left", timePercentage * 105 -5);
    this.$().find(".app-general-slider-bg").css("width", (timePercentage * 100) + "%");
    this.$().find(".fade-curve-select").val(this.getCurve());
    this.$().find(".fade-enable-checkbox").prop("checked", this.getEnabled());

    var sectionsSelector = ".normal-fade-value, .app-general-slider-knob, .app-general-slider-bg, .fade-curve-container";
    if (!this.getEnabled()) {
        this.$().find(sectionsSelector).addClass("inactive-section");
    } else {
        this.$().find(sectionsSelector).removeClass("inactive-section");
    }
};

FadeConfigurator.prototype.managerUpdated = function() {
    this.update();
};

FadeConfigurator.prototype.setTime = function(time) {
    time = CrossFadePreferences.asValidTime(time);
    this.manager.preferences[this.config.preferenceKey + "Time"] = time;
    this.manager.configuratorUpdated();
    if (!this.getEnabled()) this.setEnabled(true);
    this.update();
};

FadeConfigurator.prototype.setEnabled = function(enabled) {
    enabled = CrossFadePreferences.asValidEnabled(enabled);
    this.manager.preferences[this.config.preferenceKey + "Enabled"] = enabled;
    this.manager.configuratorUpdated();
    this.update();
};

FadeConfigurator.prototype.setCurve = function(curve) {
    curve = CrossFadePreferences.asValidCurve(curve);
    this.manager.preferences[this.config.preferenceKey + "Curve"] = curve;
    this.manager.configuratorUpdated();
    if (!this.getEnabled()) this.setEnabled(true);
    this.update();
};

FadeConfigurator.prototype.getTime = function() {
    return this.manager.preferences[this.config.preferenceKey + "Time"];
};

FadeConfigurator.prototype.getEnabled = function() {
    return this.manager.preferences[this.config.preferenceKey + "Enabled"];
};

FadeConfigurator.prototype.getCurve = function() {
    return this.manager.preferences[this.config.preferenceKey + "Curve"];
};

FadeConfigurator.prototype.$ = function() {
    return this._domNode;
};

function CrossFadeManager(domNode, preferences) {
    EventEmitter.call(this);
    this._domNode = $(domNode);
    this.preferences = preferences;
    this.inFadeConfigurator = new FadeConfigurator(this, this.$().find(".fade-in-configurator"), {
        enablerText: "Enable fade in",
        indicatorClass: "fade-in-color",
        preferenceKey: "in"
    });
    this.outFadeConfigurator = new FadeConfigurator(this, this.$().find(".fade-out-configurator"), {
        enablerText: "Enable fade out",
        indicatorClass: "fade-out-color",
        preferenceKey: "out"
    });

    this.visualizer = new CrossFadeVisualizer(".cross-fade-visualizer", this);

    this.shouldAlbumCrossFadeChanged = $.proxy(this.shouldAlbumCrossFadeChanged, this);
    this.presetChanged = $.proxy(this.presetChanged, this);
    this.$().find(".fade-preset-select").on("change", this.presetChanged);
    this.$().find(".album-crossfade-preference").on("change", this.shouldAlbumCrossFadeChanged);
    this.update();
}
util.inherits(CrossFadeManager, EventEmitter);

CrossFadeManager.prototype.destroy = function() {
    this.inFadeConfigurator.destroy();
    this.outFadeConfigurator.destroy();
    this.removeAllListeners();
    this.$().find(".fade-preset-select").off("change", this.presetChanged);
    this.$().find(".album-crossfade-preference").off("change", this.shouldAlbumCrossFadeChanged);
    this._domNode = null;
};

CrossFadeManager.prototype.shouldAlbumCrossFadeChanged = function(e) {
    var val = $(e.target).prop("checked");
    this.preferences.shouldAlbumCrossFade = CrossFadePreferences.asValidShouldAlbumCrossFade(!val);
    this.update();
    this.emit("preferencesUpdate");
};

CrossFadeManager.prototype.presetChanged = function(e) {
    var val = $(e.target).val();

    if (presets[val]) {
        this.preferences.copyFrom(presets[val]);
        this.inFadeConfigurator.managerUpdated();
        this.outFadeConfigurator.managerUpdated();
        this.update();
        this.emit("preferencesUpdate");
    }
};

CrossFadeManager.prototype.configuratorUpdated = function() {
    this.update();
    this.emit("preferencesUpdate");
};

CrossFadeManager.prototype.update = function() {
    var presetName = this.getPresetName();
    this.$().find(".fade-preset-select").val(presetName);
    this.$().find(".album-crossfade-preference").prop("checked", !this.preferences.getShouldAlbumCrossFade());
    this.visualizer.update();
};

CrossFadeManager.prototype.getPresetName = function() {
    return CrossFadePreferences.getPresetMatchingPreferences(this.preferences);
};

CrossFadeManager.prototype.$ = function() {
    return this._domNode;
};

function CrossFadeVisualizer(domNode, manager) {
    domNode = $(domNode);
    this.width = domNode.prop("width");
    this.height = domNode.prop("height");
    this.context = domNode[0].getContext("2d");
    this.manager = manager;
};

CrossFadeVisualizer.prototype.getContext = function() {
    return this.context;
};

CrossFadeVisualizer.prototype.update = function() {
    var ctx = this.getContext();
    var preferences = this.manager.preferences;
    var width = this.width;
    var height = this.height;

    ctx.clearRect(0, 0, width, height);

    if (!preferences.inEnabled && !preferences.outEnabled) return;

    ctx.font = "11px helvetica";
    ctx.fillStyle = "#444444";
    ctx.fillText("Relative volume", 0, 15);

    var yLabelGap = (height - 51) / 5;
    var percentage = 0;
    for (var i = 35; i <= height - 15; i += yLabelGap) {
        ctx.fillText(percentage + " %", 5, i - 6);
        percentage += 20;
    }

    var maxTime = Math.max(preferences.getInTime(), preferences.getOutTime());

    var xLabels = maxTime + 1;
    var xLabelGap = Math.floor((width - 55 - 12) / (xLabels -1));
    for (var i = 0; i < xLabels; ++i) {
        ctx.fillText(i + "s", 55 + i * xLabelGap, height - 15);
    }

    if (preferences.getInEnabled()) {
        this._drawFade({
            time: preferences.getInTime(),
            curve: preferences.getInCurve(),
            maxTime: maxTime,
            xLabelGap: xLabelGap,
            progressDirection: PROGRESS_INCREASE,
            strokeStyle: "rgb(0, 0, 128)",
            fillStyle: "rgba(0, 0, 128, 0.45)"
        });
    }

    if (preferences.getOutEnabled()) {
        this._drawFade({
            time: preferences.getOutTime(),
            curve: preferences.getOutCurve(),
            maxTime: maxTime,
            xLabelGap: xLabelGap,
            progressDirection: PROGRESS_DECREASE,
            strokeStyle: "rgb(0, 100, 0)",
            fillStyle: "rgba(0, 100, 0, 0.45)"
        });
    }
};

CrossFadeVisualizer.prototype._drawFade = function(specs) {
    var ctx = this.getContext();
    var width = this.width;
    var height = this.height;
    var interpolator = curveInterpolator[specs.curve];
    var progressDirection = specs.progressDirection;
    var start = (specs.maxTime - specs.time) * specs.xLabelGap + 55;
    var end = width;

    var ticks = 0;
    var maxTicks = end - start;

    ctx.beginPath();
    ctx.lineWidth = 2;
    ctx.moveTo(start, height - 25);


    for (var i = start; i <= end; ++i) {
        ctx.lineTo(i, height - (25 + interpolator(ticks, maxTicks, progressDirection) * (height - 51)));
        ticks++;
    }

    ctx.strokeStyle = specs.strokeStyle;
    ctx.stroke();
    ctx.lineTo(end, height - 25);
    ctx.lineTo(start, height - 25);
    ctx.lineTo(start, height - (25 + interpolator(0, maxTicks, progressDirection) * (height - 51)));
    ctx.fillStyle = specs.fillStyle;
    ctx.fill();
    ctx.closePath();
};

})();

;
;
var player = player || {};

(function() {
player.main = new Player(".app-player-controls", playlist.main, {
    playButtonDom: ".play-button",
    pauseButtonDom: ".pause-button",
    previousButtonDom: ".previous-button",
    stopButtonDom: ".stop-button",
    nextButtonDom: ".next-button",
});

var playerTimeManager = new PlayerTimeManager(".player-upper-container", player.main, {
    seekSlider: new Slider(".time-progress-container"),
    currentTimeDom: ".current-time",
    totalTimeDom: ".total-time",
    timeContainerDom: ".playback-status-wrapper",
    timeProgressDom: ".time-progress"
});

var playerVolumeManager = new PlayerVolumeManager(".volume-controls-container", player.main, {
    volumeSlider: new Slider(".volume-slider-container"),
    muteDom: ".volume-mute"
});

var playerPictureManager = new PlayerPictureManager(".picture-container", player.main);

var playlistNotifications = new PlaylistNotifications(".notification-setting", player.main);

/* To be used both with hotkeys and click binds */
player.methodPause = function() {
    player.main.pause();
};
player.methodPlay = function() {
    player.main.play();
};

player.methodStop = function() {
    player.main.stop();
};

player.methodNext = function() {
    playlist.main.next();
};

player.methodPrev = function() {
    playlist.main.prev();
};

player.main.on("stop", function() {
    playlist.trackDisplay.newTitle("");
    document.title = __PROJECT__TITLE;
});

hotkeyManager.addDescriptor({
    category: "Music player",
    action: "Volume up",
    description: "Increases volume by 1%.",
    handler: function() {
        player.main.setVolume(player.main.getVolume() + 0.01);
    }
});

hotkeyManager.addDescriptor({
    category: "Music player",
    action: "Volume down",
    description: "Decreases volume by 1%.",
    handler: function() {
        player.main.setVolume(player.main.getVolume() - 0.01);
    }
});

hotkeyManager.addDescriptor({
    category: "Music player",
    action: "Toggle mute",
    description: "Toggles mute.",
    handler: function() {
        player.main.toggleMute();
    }
});

hotkeyManager.addDescriptor({
    category: "Music player",
    action: "Previous track",
    description: "Jumps to the previous track or, if no previous track is available, to the first track in the current playlist.",
    handler: player.methodPrev
});


hotkeyManager.addDescriptor({
    category: "Music player",
    action: "Next track",
    description: "Jumps to the next track.",
    handler: player.methodNext
});

hotkeyManager.addDescriptor({
    category: "Music player",
    action: "Play",
    description: "Start playback.",
    handler: player.methodPlay
});

hotkeyManager.addDescriptor({
    category: "Music player",
    action: "Pause",
    description: "Pauses playback.",
    handler: player.methodPause
});

hotkeyManager.addDescriptor({
    category: "Music player",
    action: "Stop",
    description: "Stops playback.",
    handler: player.methodStop
});

hotkeyManager.addDescriptor({
    category: "Music player",
    action: "Normal mode",
    description: "Activate normal mode. In normal mode tracks are played consecutively in the order they appear on the playlist as a track finishes.",
    handler: function() {
        playlist.main.tryChangeMode("normal");
    }
});

hotkeyManager.addDescriptor({
    category: "Music player",
    action: "Shuffle mode",
    description: "Activate shuffle mode. In shuffle mode the next track is randomly chosen from the playlist, preferring those tracks that haven't been played recently.",
    handler: function() {
        playlist.main.tryChangeMode("shuffle");
    }
});

hotkeyManager.addDescriptor({
    category: "Music player",
    action: "Repeat mode",
    description: "Activate repeat mode. In repeat mode the next track picked is always the same track that just finished.",
    handler: function() {
        playlist.main.tryChangeMode("repeat");
    }
});


hotkeyManager.addDescriptor({
    category: "Music player",
    action: "Seek forward",
    description: "Seeks forward by 1%.",
    handler: function() {
        var p = player.main.getProgress();
        if (p !== -1) {
            player.main.setProgress(p + 0.01);
        }
    }
});

hotkeyManager.addDescriptor({
    category: "Music player",
    action: "Seek back",
    description: "Seeks back by 1%.",
    handler: function() {
        var p = player.main.getProgress();
        if (p !== -1) {
            player.main.setProgress(p - 0.01);
        }
    }
});

hotkeyManager.addDescriptor({
    category: "Music player",
    action: "Toggle time display mode",
    description: "Toggle the time display mode between elapsed time and remaining time.",
    handler: function() {
        playerTimeManager.toggleDisplayMode();
    }
});

})()

;
;
var filter = {};

filter.show = function() {
    if (playlist.main.length > 0) {
        popup.open("<div class='popup-content-container'>                                                            \
                        <div class='popup-header'>                                                                   \
                            <h2 class='app-header-2'>Filter</h2>                                                     \
                        </div>                                                                                       \
                        <div class='popup-body'>                                                                     \
                            <div class='app-bread-text'>Find tracks on the playlist that match the given text.</div> \
                            <div id='track-searcher-container'></div>                                                \
                        </div>                                                                                       \
                    </div>",
        415, 495);

        var trackSearcher = new TrackSearcher(playlist.main, "#track-searcher-container");

        popup.closeEvent(function() {
            trackSearcher.destroy();
        });

        trackSearcher.on("destroy", function() {
            popup.closeAll();
        });

        setTimeout(function() {
            trackSearcher.input().val("").focus();
        }, 10);
    }
};

$(".menul-filter").bind("click", filter.show)
hotkeyManager.addDescriptor({
    category: "Playlist management",
    action: "Filter",
    description: "Shortcut for activating filter.",
    handler: filter.show
});

;
;
var workerPool = new WorkerPool((navigator.hardwareConcurrency || 2) - 1, "worker/root.js");
var replayGainProcessor = new ReplayGainProcessor(workerPool);
var localFiles = new LocalFiles(playlist.main, features.allowMimes, features.allowExtensions);
new ID3Process(playlist.main, replayGainProcessor);

$(document)
    .bind('dragenter', function(ev) {
        return false;
    })
    .bind("dragleave", function(ev) {
        return false;
    })
    .bind("dragover", function(ev) {
        return false;
    })
    .bind("drop", function(ev) {
        localFiles.handle(ev.originalEvent.dataTransfer.files);
        ev.preventDefault();
        ev.stopPropagation();
        return false;
    })
    .bind("selectstart", function(e) {
        var insideInput = !!(/textarea|input|select/i.test(e.target.nodeName) || e.target.isContentEditable);
        if (!insideInput) {
            e.preventDefault();
        }
    });


;
;
(function() {"use strict";
    const getFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.msRequestAnimationFrame;
    const cancelFrame = window.cancelAnimationFrame || window.webkitCancelAnimationFrame || window.mozCancelAnimationFrame || window.msCancelAnimationFrame;
    const canvas = document.getElementById("visualizer");
    const context = canvas.getContext("2d");

    const MAX_FFT_FREQUENCY = 18500;
    const BYTE_MAX_SIZE = 255;
    const CAP_DROP_TIME_DEFAULT = 550;
    const CAP_HOLDOUT_TIME = 55;
    const CAP_DROP_TIME_IDLE = CAP_DROP_TIME_DEFAULT;


    const WIDTH = parseInt(canvas.width, 10);
    const HEIGHT = parseInt(canvas.height, 10);

    const BIN_WIDTH = 4;
    const GAP_WIDTH = 1;
    const BIN_SPACE = BIN_WIDTH + GAP_WIDTH;

    const CAP_HEIGHT = 1;
    const CAP_SEPARATOR = 2;
    const CAP_SPACE = CAP_HEIGHT + CAP_SEPARATOR;

    const HIGHEST_Y = HEIGHT - CAP_SPACE;
    const gradients = new Array(HEIGHT + 1);

    // Someone please tell me there is a better way....
    for (var i = 0; i < gradients.length; ++i) {
        var gradient = context.createLinearGradient(0, HEIGHT - i, 0, HEIGHT);
        gradient.addColorStop(0.0, 'rgb(250, 250, 250)');
        gradient.addColorStop(0.2, "rgb(219, 241, 251)");
        gradient.addColorStop(0.8, "rgb(184, 228, 246)");
        gradient.addColorStop(1, 'rgb(166, 202, 238)');
        gradients[i] = gradient;
    }

    context.shadowBlur = 2;
    context.shadowColor = "rgb(11,32,53)";

    const NUM_BINS = Math.floor(WIDTH / BIN_SPACE);
    Player.visualizerBins(NUM_BINS);
    const CAP_STYLE = "rgb(37,117,197)";
    const BIN_STYLE = gradient;

    const capInfoArray = new Array(NUM_BINS);

    for (var i = 0; i < capInfoArray.length; ++i) {
        capInfoArray[i] = {
            started: -1,
            binValue: -1
        };
    }

    function easeInQuad(x, t, b, c, d) {
        return c*(t/=d)*t + b;
    }

    var capDropTime = CAP_DROP_TIME_DEFAULT;
    function getCapPosition(position, now) {
        if (position.binValue === -1) {
            return 0;
        }
        if (position.started === -1 || ((now - position.started) > capDropTime)) {
            position.binValue = -1;
            return 0;
        }
        var elapsed = now - position.started;
        var duration = capDropTime;
        if (elapsed < CAP_HOLDOUT_TIME) return position.binValue;
        return (1 - easeInQuad(0, elapsed, 0, 1, duration)) * position.binValue;
    }

    function resetCaps() {
        for (var i = 0; i < capInfoArray; ++i) {
            capInfoArray[i].started = -1;
            capInfoArray[i].binValue = -1;
        }
    }

    function drawCap(x, capSample, capInfo, now) {
        var capY = capSample * HIGHEST_Y + CAP_SPACE;
        context.fillRect(x, HEIGHT - capY, BIN_WIDTH, CAP_HEIGHT);
        var alpha = capSample / capInfo.binValue * 0.96;
        var originalY = capY - CAP_SPACE - 1;
        context.fillStyle = "rgb(184, 228, 246)";
        context.save();
        context.globalAlpha = alpha;
        context.shadowBlur = 0;
        context.fillRect(x, HEIGHT - originalY, BIN_WIDTH, originalY);
        context.restore();
    }

    function drawBins(event) {
        var bins = event.bins;
        var now = event.now;
        for (var i = 0; i < bins.length; ++i) {
            var binValue = bins[i];
            var capInfo = capInfoArray[i];
            var y = binValue * HIGHEST_Y;
            var x = i * BIN_SPACE;

            var capSample = -1;
            if (capInfo.binValue === -1) {
                capInfo.binValue = binValue;
            } else {
                capSample = getCapPosition(capInfo, now);
            }

            context.fillStyle = CAP_STYLE;
            if (binValue < capSample) {
                drawCap(x, capSample, capInfo, now);
            } else {
                context.fillRect(x, HEIGHT - y - CAP_SPACE, BIN_WIDTH, CAP_HEIGHT);
                capInfo.binValue = binValue;
                capInfo.started = now;
            }
            context.fillStyle = gradients[y|0];
            context.fillRect(x, HEIGHT - y, BIN_WIDTH, y);
        }
    }

    var needToDrawIdleBins = true;
    function drawIdleBins(event) {
        var drewSomething = false;
        for (var i = 0; i < NUM_BINS; ++i) {
            var capInfo = capInfoArray[i];
            if (capInfo.binValue !== -1) {
                drewSomething = true;
            }
            context.fillStyle = CAP_STYLE;
            drawCap(i * BIN_SPACE, getCapPosition(capInfo, event.now), capInfo);
        }

        if (!drewSomething) {
            needToDrawIdleBins = false;
        }
    }

    var nothingToDraw = 0;
    player.main.on("visualizerData", function(event) {
        var fresh = false;

        if (event.paused) {
            capDropTime = CAP_DROP_TIME_IDLE;
            nothingToDraw++;

            if (needToDrawIdleBins) {
                context.clearRect(0, 0, WIDTH, HEIGHT);
                drawIdleBins(event);
            }
            return;
        } else {
            needToDrawIdleBins = true;
            if (nothingToDraw > 0) {
                fresh = true;
            }
            nothingToDraw = 0;
        }
        capDropTime = CAP_DROP_TIME_DEFAULT;
        context.clearRect(0, 0, WIDTH, HEIGHT);
        if (fresh) resetCaps();
        drawBins(event);
    });

    player.main.on("stop", function() {
        var frame;
        player.main.once("play", function() {
            if (frame) cancelAnimationFrame(frame);
        });
        frame = requestAnimationFrame(function loop(now) {
            if (needToDrawIdleBins) {
                frame = requestAnimationFrame(loop);
                context.clearRect(0, 0, WIDTH, HEIGHT);
                drawIdleBins({now: now});
            } else {
                frame = null;
            }
        });
    });

    resetCaps();
    drawIdleBins({now: Date.now()});
})();
;

;
;
hotkeyManager.enableHotkeys();
hotkeyManager.enablePersistentHotkeys()
